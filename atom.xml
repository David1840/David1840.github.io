<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Programmer Liu</title>
  
  <subtitle>精彩生活，不惧挑战，做一只有理想的的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-25T03:14:40.314Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android包管理机制(三)PMS处理APK安装</title>
    <link href="http://yoursite.com/2021/03/24/Android%E5%8C%85%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-%E4%B8%89-PMS%E5%A4%84%E7%90%86APK%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2021/03/24/Android包管理机制-三-PMS处理APK安装/</id>
    <published>2021-03-24T11:47:19.000Z</published>
    <updated>2021-03-25T03:14:40.314Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇中，我们知道了最终调用了PMS的installStage方法安装APK，接下来进入PMS处理APK的流程。</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">installStage</span><span class="params">(String packageName, File stagedDir, String stagedCid,</span></span></span><br><span class="line"><span class="function"><span class="params">            IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams,</span></span></span><br><span class="line"><span class="function"><span class="params">            String installerPackageName, <span class="keyword">int</span> installerUid, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">            Certificate[][] certificates)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</span><br><span class="line">        <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams(origin, <span class="keyword">null</span>, observer,</span><br><span class="line">                sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid,</span><br><span class="line">                verificationInfo, user, sessionParams.abiOverride,</span><br><span class="line">                sessionParams.grantedRuntimePermissions, certificates);</span><br><span class="line">        params.setTraceMethod(<span class="string">"installStage"</span>).setTraceCookie(System.identityHashCode(params));</span><br><span class="line">        msg.obj = params;</span><br><span class="line"></span><br><span class="line">        Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installStage"</span>,</span><br><span class="line">                System.identityHashCode(msg.obj));</span><br><span class="line">        Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                System.identityHashCode(msg.obj));</span><br><span class="line"></span><br><span class="line">        mHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在installStage函数中创建了类型为INIT_COPY的消息，接下来看看对INIT_COPY的处理</p><h3 id="对INIT-COPY的消息的处理"><a href="#对INIT-COPY的消息的处理" class="headerlink" title="对INIT_COPY的消息的处理"></a>对INIT_COPY的消息的处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doHandleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> INIT_COPY: &#123;</span><br><span class="line">                    HandlerParams params = (HandlerParams) msg.obj;</span><br><span class="line">                    <span class="keyword">int</span> idx = mPendingInstalls.size();</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"init_copy idx="</span> + idx + <span class="string">": "</span> + params);</span><br><span class="line">                    <span class="comment">// If a bind was already initiated we dont really</span></span><br><span class="line">                    <span class="comment">// need to do anything. The pending install</span></span><br><span class="line">                    <span class="comment">// will be processed later on.</span></span><br><span class="line">                    <span class="comment">//mBound用于标识是否绑定了服务，默认值为false</span></span><br><span class="line">                    <span class="keyword">if</span> (!mBound) &#123;</span><br><span class="line">                        Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                                System.identityHashCode(mHandler));</span><br><span class="line">                        <span class="comment">// If this is the only one pending we might</span></span><br><span class="line">                        <span class="comment">// have to bind to the service again.</span></span><br><span class="line">                        <span class="comment">//如果没有绑定服务，重新绑定，connectToService方法内部如果绑定成功会将mBound置为true</span></span><br><span class="line">                        <span class="keyword">if</span> (!connectToService()) &#123;</span><br><span class="line">                            Slog.e(TAG, <span class="string">"Failed to bind to media container service"</span>);</span><br><span class="line">                            params.serviceError();</span><br><span class="line">                            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                                    System.identityHashCode(mHandler));</span><br><span class="line">                            <span class="keyword">if</span> (params.traceMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, params.traceMethod,</span><br><span class="line">                                        params.traceCookie);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Once we bind to the service, the first</span></span><br><span class="line">                            <span class="comment">// pending request will be processed.</span></span><br><span class="line">                            <span class="comment">//绑定服务成功，将请求添加到mPendingInstalls中，等待处理</span></span><br><span class="line">                            mPendingInstalls.add(idx, params);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//服务已经绑定成功，添加到mPendingInstalls中</span></span><br><span class="line">                        mPendingInstalls.add(idx, params);</span><br><span class="line">                        <span class="comment">// Already bound to the service. Just make</span></span><br><span class="line">                        <span class="comment">// sure we trigger off processing the first request.</span></span><br><span class="line">                        <span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 发送MCS_BOUND消息</span></span><br><span class="line">                            mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>mBound用于标识是否绑定了DefaultContainerService，默认值为false。DefaultContainerService是用于检查和复制可移动文件的服务，这是一个比较耗时的操作，因此DefaultContainerService没有和PMS运行在同一进程中，它运行在com.android.defcontainer进程，通过IMediaContainerService和PMS进行IPC通信。</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java#PackageHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connectToService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"Trying to bind to"</span> +</span><br><span class="line">                  <span class="string">" DefaultContainerService"</span>);</span><br><span class="line">          Intent service = <span class="keyword">new</span> Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">          Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">          <span class="keyword">if</span> (mContext.bindServiceAsUser(service, mDefContainerConn,</span><br><span class="line">                  Context.BIND_AUTO_CREATE, UserHandle.SYSTEM)) &#123;<span class="comment">//1</span></span><br><span class="line">              Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">              mBound = <span class="keyword">true</span>;<span class="comment">//2</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>bindServiceAsUser方法的处理逻辑和我们调用bindService是类似的，服务建立连接后，会调用onServiceConnected方法(传入了mDefContainerConn)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> DefaultContainerConnection mDefContainerConn =</span><br><span class="line">            <span class="keyword">new</span> DefaultContainerConnection();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DefaultContainerConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"onServiceConnected"</span>);</span><br><span class="line">            IMediaContainerService imcs =</span><br><span class="line">                IMediaContainerService.Stub.asInterface(service);</span><br><span class="line">            mHandler.sendMessage(mHandler.obtainMessage(MCS_BOUND, imcs));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"onServiceDisconnected"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在onServiceConnected中，又发送了MCS_BOUND消息，并将IMediaContainerService实例传递出去。</p><h3 id="对MCS-BOUND类型的消息的处理"><a href="#对MCS-BOUND类型的消息的处理" class="headerlink" title="对MCS_BOUND类型的消息的处理"></a>对MCS_BOUND类型的消息的处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MCS_BOUND: &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"mcs_bound"</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">          mContainerService = (IMediaContainerService) msg.obj; <span class="comment">//1</span></span><br><span class="line">          Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                              System.identityHashCode(mHandler));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mContainerService == <span class="keyword">null</span>) &#123; <span class="comment">//2</span></span><br><span class="line">          <span class="keyword">if</span> (!mBound) &#123; <span class="comment">//3</span></span><br><span class="line">            <span class="comment">// Something seriously wrong since we are not bound and we are not</span></span><br><span class="line">            <span class="comment">// waiting for connection. Bail out.</span></span><br><span class="line">            Slog.e(TAG, <span class="string">"Cannot bind to media container service"</span>);</span><br><span class="line">            <span class="keyword">for</span> (HandlerParams params : mPendingInstalls) &#123;</span><br><span class="line">              <span class="comment">// Indicate service bind error</span></span><br><span class="line">              params.serviceError();</span><br><span class="line">              Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                                  System.identityHashCode(params));</span><br><span class="line">              <span class="keyword">if</span> (params.traceMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER,</span><br><span class="line">                                    params.traceMethod, params.traceCookie);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingInstalls.clear();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Waiting to connect to media container service"</span>);<span class="comment">//4</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123; <span class="comment">//5</span></span><br><span class="line">          HandlerParams params = mPendingInstalls.get(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                                System.identityHashCode(params));</span><br><span class="line">            Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"startCopy"</span>);</span><br><span class="line">            <span class="keyword">if</span> (params.startCopy()) &#123; <span class="comment">//6</span></span><br><span class="line">              <span class="comment">// We are done...  look for more work or to</span></span><br><span class="line">              <span class="comment">// go idle.</span></span><br><span class="line">              <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                          <span class="string">"Checking for more work or unbind..."</span>);</span><br><span class="line">              <span class="comment">// Delete pending install</span></span><br><span class="line">              <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果APK安装成功，删除本次安装请求</span></span><br><span class="line">                mPendingInstalls.remove(<span class="number">0</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mBound) &#123;</span><br><span class="line">                  <span class="comment">//如果没有安装请求了，发送解绑服务的请求</span></span><br><span class="line">                  <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                              <span class="string">"Posting delayed MCS_UNBIND"</span>);</span><br><span class="line">                  removeMessages(MCS_UNBIND);</span><br><span class="line">                  Message ubmsg = obtainMessage(MCS_UNBIND);</span><br><span class="line">                  <span class="comment">// Unbind after a little delay, to avoid</span></span><br><span class="line">                  <span class="comment">// continual thrashing.</span></span><br><span class="line">                  sendMessageDelayed(ubmsg, <span class="number">10000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// There are more pending requests in queue.</span></span><br><span class="line">                <span class="comment">// Just post MCS_BOUND message to trigger processing</span></span><br><span class="line">                <span class="comment">// of next pending install.</span></span><br><span class="line">                <span class="comment">//如果还有其他的安装请求，接着发送MCS_BOUND消息继续处理剩余的安装请求 </span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                            <span class="string">"Posting MCS_BOUND for next work"</span>);</span><br><span class="line">                mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Should never happen ideally.</span></span><br><span class="line">          Slog.w(TAG, <span class="string">"Empty queue"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>在注释1处获取MediaContainerService服务对象，在这里就表示是接收到了onServiceConnected中发出的MCS_BOUND消息。如果msg.obj != null，表示从INIT_COPY消息处理中发出的。</p><p>注释2成立表示INIT_COPY消息处理中发出MCS_BOUND，注释3判断是否已经绑定服务，如果!mBound为true，而在发出MCS_BOUND消息之前的各种操作中就已经判断是否绑定服务，没有绑定的话就已经去connectToService()，这里说明发生异常情况，开始处理异常情况。如果!mBound为false，说明已经调用了connectToService方法去绑定服务，注释4打印日志提示等待服务绑定。</p><p>如果注释2不成立就进入注释5处判断，如果安装请求数不大于0，就会打印日志，提示空队列。</p><p>否则取出安装请求队列第一个请求HandlerParams ，如果HandlerParams 不为null就会调用注释6处的HandlerParams的startCopy方法，用于开始复制APK的流程。</p><h3 id="复制APK"><a href="#复制APK" class="headerlink" title="复制APK"></a>复制APK</h3><p>HandlerParams是PMS中的抽象类，它的实现类为PMS的内部类InstallParams。HandlerParams的startCopy方法如下所示。</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java#HandlerParams</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> res;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"startCopy "</span> + mUser + <span class="string">": "</span> + <span class="keyword">this</span>);</span><br><span class="line">                <span class="comment">//startCopy方法尝试的次数，超过了4次，就放弃这个安装请求</span></span><br><span class="line">                <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Failed to invoke remote methods on default container service. Giving up"</span>);</span><br><span class="line">                    mHandler.sendEmptyMessage(MCS_GIVE_UP);</span><br><span class="line">                    handleServiceError();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//开始处理复制</span></span><br><span class="line">                    handleStartCopy();</span><br><span class="line">                    res = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Posting install MCS_RECONNECT"</span>);</span><br><span class="line">                mHandler.sendEmptyMessage(MCS_RECONNECT);</span><br><span class="line">                res = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            handleReturnCode();</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>handleStartCopy()的实现在InstallParams类中</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java#InstallParams</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStartCopy</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//确定APK的安装位置。</span></span><br><span class="line">  <span class="comment">//onSd：安装到SD卡， onInt：内部存储即Data分区，ephemeral：安装到临时存储（Instant Apps安装）</span></span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> onSd = (installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> onInt = (installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> ephemeral = (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">           PackageInfoLite pkgLite = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (onInt &amp;&amp; onSd) &#123;</span><br><span class="line">               <span class="comment">// // APK不能同时安装在SD卡和Data分区</span></span><br><span class="line">               Slog.w(TAG, <span class="string">"Conflicting flags specified for installing on both internal and external"</span>);</span><br><span class="line">               ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onSd &amp;&amp; ephemeral) &#123;</span><br><span class="line">               <span class="comment">////安装标志冲突，Instant Apps不能安装到SD卡中</span></span><br><span class="line">               Slog.w(TAG,  <span class="string">"Conflicting flags specified for installing ephemeral on external"</span>);</span><br><span class="line">               ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//获取APK的少量的信息</span></span><br><span class="line">               pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath, installFlags,</span><br><span class="line">                       packageAbiOverride);</span><br><span class="line">             ......</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">               <span class="comment">//判断安装的位置</span></span><br><span class="line">               <span class="keyword">int</span> loc = pkgLite.recommendedInstallLocation;</span><br><span class="line">               <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_ALREADY_EXISTS;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_APK) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_INVALID_APK;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_URI) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_MEDIA_UNAVAILABLE) &#123;</span><br><span class="line">                   ret = PackageManager.INSTALL_FAILED_MEDIA_UNAVAILABLE;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// Override with defaults if needed.</span></span><br><span class="line">                   loc = installLocationPolicy(pkgLite);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据InstallParams创建InstallArgs对象</span></span><br><span class="line">           <span class="keyword">final</span> InstallArgs args = createInstallArgs(<span class="keyword">this</span>);</span><br><span class="line">           mArgs = args;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                 .....</span><br><span class="line">                   </span><br><span class="line">                 ret = args.copyApk(mContainerService, <span class="keyword">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           mRet = ret;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>首先是通过IMediaContainerService跨进程调用DefaultContainerService的getMinimalPackageInfo方法，该方法轻量解析APK并得到APK的少量信息，轻量解析的原因是这里不需要得到APK的全部信息，APK的少量信息会封装到PackageInfoLite中。然后确认APK的安装位置，最后创建InstallArgs对象。</p><p>InstallArgs 是一个抽象类，定义了APK的安装逻辑，比如复制和重命名APK等，它有3个子类，MoveInstallArgs、AsecInstallArgs、FileInstallArgs，都被定义在PMS中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallArgs <span class="title">createInstallArgs</span><span class="params">(InstallParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (params.move != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MoveInstallArgs(params);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installOnExternalAsec(params.installFlags) || params.isForwardLocked()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AsecInstallArgs(params);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FileInstallArgs(params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中FileInstallArgs用于处理安装到非ASEC的存储空间的APK，也就是内部存储空间（Data分区），AsecInstallArgs用于处理安装到ASEC中（mnt/asec）即SD卡中的APK。MoveInstallArgs用于处理已安装APK的移动的逻辑。</p><p>这里以FileInstallArgs为例，调用copyApk会直接调到FileInstallArgs的doCopyApk方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCopyApk</span><span class="params">(IMediaContainerService imcs, <span class="keyword">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral = (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//创建临时文件存储目录</span></span><br><span class="line">                <span class="keyword">final</span> File tempDir =</span><br><span class="line">                        mInstallerService.allocateStageDirLegacy(volumeUuid, isEphemeral);<span class="comment">//1</span></span><br><span class="line">                codeFile = tempDir;</span><br><span class="line">                resourceFile = tempDir;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Failed to create copy file: "</span> + e);</span><br><span class="line">                <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> IParcelFileDescriptorFactory target = <span class="keyword">new</span> IParcelFileDescriptorFactory.Stub() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">open</span><span class="params">(String name, <span class="keyword">int</span> mode)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid filename: "</span> + name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> File file = <span class="keyword">new</span> File(codeFile, name);</span><br><span class="line">                        <span class="keyword">final</span> FileDescriptor fd = Os.open(file.getAbsolutePath(),</span><br><span class="line">                                O_RDWR | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">                        Os.chmod(file.getAbsolutePath(), <span class="number">0644</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ParcelFileDescriptor(fd);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Failed to open: "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">            ret = imcs.copyPackage(origin.file.getAbsolutePath(), target);<span class="comment">//2</span></span><br><span class="line">            <span class="keyword">if</span> (ret != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failed to copy package"</span>);</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>doCopyApk函数的工作就是在/data/app下创建临时文件夹，以sessionId为临时文件夹名 ，例如/data/app/{sessionId}.tmp/base.apk将APK复制到这个文件夹下，一般命名为base.apk</p><h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><p>我们返回startCopy方法中，复制完成后调用handleReturnCode()，这个方法会调用到InstallParams的handleReturnCode方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleReturnCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If mArgs is null, then MCS couldn't be reached. When it</span></span><br><span class="line">        <span class="comment">// reconnects, it will try again to install. At that point, this</span></span><br><span class="line">        <span class="comment">// will succeed.</span></span><br><span class="line">        <span class="keyword">if</span> (mArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">Slog.d(TAG,<span class="string">"welen:"</span> + <span class="string">"handleReturnCode"</span>);</span><br><span class="line">            processPendingInstall(mArgs, mRet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processPendingInstall</span><span class="params">(<span class="keyword">final</span> InstallArgs args, <span class="keyword">final</span> <span class="keyword">int</span> currentStatus)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Queue up an async operation since the package installation may take a little while.</span></span><br><span class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Slog.d(TAG,<span class="string">"welen:"</span> + <span class="string">"processPendingInstall"</span>);</span><br><span class="line">                mHandler.removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line">                 <span class="comment">// Result object to be returned</span></span><br><span class="line">                PackageInstalledInfo res = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">                res.setReturnCode(currentStatus);</span><br><span class="line">                res.uid = -<span class="number">1</span>;</span><br><span class="line">                res.pkg = <span class="keyword">null</span>;</span><br><span class="line">                res.removedInfo = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                    <span class="comment">//安装前准备</span></span><br><span class="line">                    args.doPreInstall(res.returnCode);</span><br><span class="line">                    <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                        installPackageTracedLI(args, res);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 安装后处理</span></span><br><span class="line">                    args.doPostInstall(res.returnCode, res.uid);</span><br><span class="line">                &#125;</span><br><span class="line">              ......</span><br></pre></td></tr></table></figure><p>在processPendingInstall中进行安装前检查，确认安装环境，如果不可靠会清除复制的APK文件，安装完成后doPostInstall，如果安装不成功，删除掉安装相关的目录与文件。</p><p>接下来看下 <strong>installPackageTracedLI()</strong>，内部调用<strong>installPackageLI</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageTracedLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installPackage"</span>);</span><br><span class="line">            installPackageLI(args, res);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>installPackageLI</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">   PackageParser pp = <span class="keyword">new</span> PackageParser();</span><br><span class="line">        pp.setSeparateProcesses(mSeparateProcesses);</span><br><span class="line">        pp.setDisplayMetrics(mMetrics);</span><br><span class="line"></span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"parsePackage"</span>);</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析APK</span></span><br><span class="line">            pkg = pp.parsePackage(tmpPackageFile, parseFlags);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            res.setError(<span class="string">"Failed parse during installPackageLI"</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  ......</span><br><span class="line">          </span><br><span class="line">  pp = <span class="keyword">null</span>;</span><br><span class="line">        String oldCodePath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> systemApp = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">           <span class="comment">// 判断APK是否存在，存在replace = true</span></span><br><span class="line">           <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</span><br><span class="line">                String oldName = mSettings.mRenamedPackages.get(pkgName);</span><br><span class="line">                <span class="keyword">if</span> (pkg.mOriginalPackages != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; pkg.mOriginalPackages.contains(oldName)</span><br><span class="line">                        &amp;&amp; mPackages.containsKey(oldName)) &#123;</span><br><span class="line">                    <span class="comment">// This package is derived from an original package,</span></span><br><span class="line">                    <span class="comment">// and this device has been updating from that original</span></span><br><span class="line">                    <span class="comment">// name.  We must continue using the original name, so</span></span><br><span class="line">                    <span class="comment">// rename the new package here.</span></span><br><span class="line">                    pkg.setPackageName(oldName);</span><br><span class="line">                    pkgName = pkg.packageName;</span><br><span class="line">                    replace = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Replacing existing renamed package: oldName="</span></span><br><span class="line">                            + oldName + <span class="string">" pkgName="</span> + pkgName);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</span><br><span class="line">                    <span class="comment">// This package, under its official name, already exists</span></span><br><span class="line">                    <span class="comment">// on the device; we should replace it.</span></span><br><span class="line">                    replace = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Replace existing pacakge: "</span> + pkgName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">          <span class="comment">//查看Settings中是否存有要安装的APK的信息，如果有就获取签名信息</span></span><br><span class="line">          <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//检查签名信息</span></span><br><span class="line">                <span class="keyword">if</span> (shouldCheckUpgradeKeySetLP(ps, scanFlags)) &#123;</span><br><span class="line">                    <span class="comment">//新APK与老APK签名不一致</span></span><br><span class="line">                    <span class="keyword">if</span> (!checkUpgradeKeySetLP(ps, pkg)) &#123;</span><br><span class="line">                        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE, <span class="string">"Package "</span></span><br><span class="line">                                + pkg.packageName + <span class="string">" upgrade keys do not match the "</span></span><br><span class="line">                                + <span class="string">"previously installed version"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//确保签名一致</span></span><br><span class="line">                        verifySignaturesLP(ps, pkg);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                        res.setError(e.error, e.getMessage());</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="keyword">int</span> N = pkg.permissions.size();</span><br><span class="line">          <span class="comment">//遍历每个权限，对权限进行处理</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = N-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                PackageParser.Permission perm = pkg.permissions.get(i);</span><br><span class="line">                BasePermission bp = mSettings.mPermissions.get(perm.info.name);</span><br><span class="line">            ......</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  f (systemApp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (onExternal) &#123;</span><br><span class="line">                <span class="comment">// //系统APP不能在SD卡上替换安装</span></span><br><span class="line">                res.setError(INSTALL_FAILED_INVALID_INSTALL_LOCATION,</span><br><span class="line">                        <span class="string">"Cannot install updates to system apps on sdcard"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ephemeral) &#123;</span><br><span class="line">                <span class="comment">// 系统APP不能被Instant App替换</span></span><br><span class="line">                res.setError(INSTALL_FAILED_EPHEMERAL_INVALID,</span><br><span class="line">                        <span class="string">"Cannot update a system app with an ephemeral app"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  ......</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//重命名临时文件</span></span><br><span class="line">  <span class="keyword">if</span> (!args.doRename(res.returnCode, pkg, oldCodePath)) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE, <span class="string">"Failed rename"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startIntentFilterVerifications(args.user.getIdentifier(), replace, pkg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (PackageFreezer freezer = freezePackageForInstall(pkgName, installFlags,</span><br><span class="line">                <span class="string">"installPackageLI"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">                <span class="comment">//替换安装</span></span><br><span class="line">                replacePackageLIF(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</span><br><span class="line">                        installerPackageName, res);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//安装新APK</span></span><br><span class="line">                installNewPackageLIF(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</span><br><span class="line">                        args.user, installerPackageName, volumeUuid, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//更新应用程序所属的用户</span></span><br><span class="line">                res.newUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          ......</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>installPackageLI方法的代码这里截取主要的部分，主要做了几件事：</p><ol><li>创建PackageParser解析APK。</li><li>检查APK是否存在，如果存在就获取此前没被改名前的包名并赋值给PackageParser.Package类型的pkg，将标志位replace置为true表示是替换安装。</li><li>如果Settings中保存有要安装的APK的信息，说明此前安装过该APK，则需要校验APK的签名信息，确保安全的进行替换。</li><li>将临时文件重新命名，比如前面提到的/data/app/{sessionId}.tmp/base.apk，重命名为/data/app/包名-1/base.apk。这个新命名的包名会带上一个数字后缀1，每次升级一个已有的App，这个数字会不断的累加。</li><li>系统APP的更新安装会有两个限制，一个是系统APP不能在SD卡上替换安装，另一个是系统APP不能被Instant App替换。</li><li>根据replace来做区分，如果是替换安装就会调用replacePackageLIF方法，其方法内部还会对系统APP和非系统APP进行区分处理，如果是新安装APK会调用installNewPackageLIF方法。</li></ol><p>我们看一下安装新APK的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Install a non-existing package.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNewPackageLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> scanFlags, UserHandle user, String installerPackageName, String volumeUuid,</span></span></span><br><span class="line"><span class="function"><span class="params">           PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">       Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installNewPackage"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Remember this for later, in case we need to rollback this install</span></span><br><span class="line">       String pkgName = pkg.packageName;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//扫描APK</span></span><br><span class="line">           PackageParser.Package newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags,</span><br><span class="line">                   System.currentTimeMillis(), user);</span><br><span class="line"><span class="comment">//更新Settings信息</span></span><br><span class="line">           updateSettingsLI(newPackage, installerPackageName, <span class="keyword">null</span>, res, user);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">             <span class="comment">//安装成功后，为新安装的应用程序准备数据</span></span><br><span class="line">               prepareAppDataAfterInstallLIF(newPackage);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//安装失败则删除APK</span></span><br><span class="line">               deletePackageLIF(pkgName, UserHandle.ALL, <span class="keyword">false</span>, <span class="keyword">null</span>,</span><br><span class="line">                       PackageManager.DELETE_KEEP_DATA, res.removedInfo, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">           res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>OK，APK的安装流程就到这里结束，还有一些后续的流程可以后面再学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一篇中，我们知道了最终调用了PMS的installStage方法安装APK，接下来进入PMS处理APK的流程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;frameworks/base/services/core/java/com/android/server/pm/PackageMa
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="PMS" scheme="http://yoursite.com/tags/PMS/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI开发-实际项目开发总结(回调函数)</title>
    <link href="http://yoursite.com/2021/03/19/Android-JNI%E5%BC%80%E5%8F%91-%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2021/03/19/Android-JNI开发-实际项目开发总结/</id>
    <published>2021-03-19T01:09:34.000Z</published>
    <updated>2021-03-19T06:10:16.556Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章想要介绍一下我之前做的一个真实项目，感觉比较有意思，记录一下。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>这个项目比较有特点的是项目的主要业务逻辑由C语言开发同事完成，在他的SO库中去做初始化、网络操作、数据库存储、硬件设备操作等等的逻辑，我这边Android主要就是调用他的接口结合界面完成业务。</p><p>但是由于我们在第三方硬件设备操作，而第三方只提供了Android的SDK，在C层面无法调用，所以硬件操作的接口也需要由我进行封装，提供操作的接口(<a href="https://david1840.github.io/2018/12/23/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">回调函数，不了解的请看这里</a>)给C开发同事调用。这样就形成了下面的结构：</p><p><img src="/2021/03/19/Android-JNI开发-实际项目开发总结/jni1.png" alt=""></p><p>我在APP初始化的时候，就将所有有关界面操作和硬件操作的函数以参数的形式传给SO。SO库中实际业务中，如果需要修改界面，比如要显示黑名单下载进度，就调用传入downloadBlackListCallBack函数，这个函数中会以JNI反射的方式调用到Java层代码，再由Java层代码实现进度的更新。硬件操作接口同样的道理。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="SO库函数定义"><a href="#SO库函数定义" class="headerlink" title="SO库函数定义"></a>SO库函数定义</h3><p>在一步中除了正常的参数传入，重要的就是传入回调函数了。</p><p>和同事做好协商，以显示进度为例，在SO库对外提供的函数中有这样一个函数，用来设置进度回调。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APi_SetProgressCallback</span><span class="params">(Processfun Callback)</span></span>;</span><br></pre></td></tr></table></figure><p>在他的头文件中Processfun的定义如下，要求我们传入两个int类型的值，第一个参数为已下载数量，第二个参数为总数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Processfun)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这个是SO库中要求的函数形式，接下来我们就要写自己的实现函数</p><h3 id="Java层实现"><a href="#Java层实现" class="headerlink" title="Java层实现"></a>Java层实现</h3><p>我们首先实现一个Java层真正去控制进度显示的函数。</p><p>在JNIController类中实现函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 黑名单下载进度展示</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> downloaded 已下载黑名单条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> all        总黑名单条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadBlackListCallBack</span><span class="params">(<span class="keyword">int</span> downloaded, <span class="keyword">int</span> all)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setAction(DOWNLOAD_BLACKLIST_ACTION);</span><br><span class="line">        intent.putExtra(BLACKLIST_DOWNLOADED, downloaded);</span><br><span class="line">        intent.putExtra(BLACKLIST_ALL, all);</span><br><span class="line">        Application.getInstance().sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>入参和上面定义的一样，已下载数量和总数量，当函数调用后通过广播的方式将传入的数量发送出去，广播接收器去修改界面。</p><h3 id="JNI层实现"><a href="#JNI层实现" class="headerlink" title="JNI层实现"></a>JNI层实现</h3><p>然后要从JNI层以反射的方式调用Java层的downloadBlackListCallBack函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downloadBlackListCallBack</span><span class="params">(<span class="keyword">int</span> downloaded, <span class="keyword">int</span> all)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downloadBlackListCallBack</span><span class="params">(<span class="keyword">int</span> downloaded, <span class="keyword">int</span> all)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> status = (*local_jvm)-&gt;AttachCurrentThread(local_jvm, &amp;env, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"env is null"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jclass jclass1 = (*env)-&gt;FindClass(env, <span class="string">"com/.../controller/JNIController"</span>);</span><br><span class="line">    <span class="keyword">if</span> (jclass1 == <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"jclass1 = 0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jmethodID downloadProcess = (*env)-&gt;GetMethodID(env, jclass1, <span class="string">"downloadBlackListCallBack"</span>,</span><br><span class="line">                                                    <span class="string">"(II)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (downloadProcess == <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"methodID == 0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用Java层，downloaded, all参数传入</span></span><br><span class="line">    (*env)-&gt;CallVoidMethod(env, local_object, downloadProcess, downloaded, all);</span><br><span class="line">  </span><br><span class="line">    (*env)-&gt;DeleteLocalRef(env, jclass1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JNI中入参也是一致的形式，再通过反射的方式调用Java层代码，将downloaded, all参数传给Java函数。</p><h3 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h3><p>JNI层的downloadBlackListCallBack函数已经写好了，最后就在初始化的函数中，调用SO库提供的<code>APi_SetProgressCallback(Processfun Callback)</code>将函数以参数的形式传入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APi_SetProgressCallback(downloadBlackListCallBack);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Processfun processFun = null;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APi_SetProgressCallback</span><span class="params">(Processfun Callback)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Callback!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">processFun = Callback;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务代码中</span></span><br><span class="line">processFun(<span class="number">10</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>这样就是一个完整的流程了。</p><p>设备的硬件操作接口也是同样的逻辑完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体而言，主要还是用了C语言回调函数的方式，将上层的操作封装成接口，交给底层逻辑自己控制，这样比较灵活，双方的代码量也减少，就是需要在前期双方梳理好需要的接口，完工！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章想要介绍一下我之前做的一个真实项目，感觉比较有意思，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h2&gt;&lt;p&gt;这个项目比较有特点的是项目的主要业务逻
      
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android系统-生成OTA增量升级包</title>
    <link href="http://yoursite.com/2021/03/17/Android%E7%B3%BB%E7%BB%9F-%E7%94%9F%E6%88%90OTA%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7%E5%8C%85/"/>
    <id>http://yoursite.com/2021/03/17/Android系统-生成OTA增量升级包/</id>
    <published>2021-03-17T10:18:39.000Z</published>
    <updated>2021-03-18T11:01:46.859Z</updated>
    
    <content type="html"><![CDATA[<p>在这里记录一下系统OTA差量包的生成流程。</p><p>在系统完成整编之后：</p><h3 id="1-make-otapackage"><a href="#1-make-otapackage" class="headerlink" title="1. make otapackage"></a>1. make otapackage</h3><p>make otapackage完成了三件事情</p><ul><li>重新对system.img文件进行了打包；</li><li>生成差分资源包，路径为out/target/product/<product-name>/obj/PACKAGING/target_files_intermedias/<product-name>-target_files.zip，差分资源包用于生成整包和差分包；</product-name></product-name></li><li>生成OTA整包，路径为out/target/product/<product-name>/<product-name>-ota.zip</product-name></product-name></li></ul><p>全量包</p><p><img src="/2021/03/17/Android系统-生成OTA增量升级包/ota1.png" alt=""></p><p>差分资源包</p><p><img src="/2021/03/17/Android系统-生成OTA增量升级包/ota2.png" alt=""></p><p>将差分资源包拷贝出来，命名为msm8953_64-target_file-A.zip</p><p>同样的方式在系统做出修改后，生成差分资源包，拷贝并命名为msm8953_64-target_file-B.zip</p><h3 id="2-制作OTA升级包"><a href="#2-制作OTA升级包" class="headerlink" title="2.制作OTA升级包"></a>2.制作OTA升级包</h3><p>在系统源码<code>build/tools/releasetools</code>路径下有制作OTA包的相关工具，执行以下命令生成OTA差量包。</p><p><code>./build/tools/releasetools/ota_from_target_files -n -i 原资源包 目标资源包 生成的差量包</code></p><p>例子如下：</p><p><code>./build/tools/releasetools/ota_from_target_files -n -i /Users/david/Downloads/msm8953_64-target_files-A.zip /Users/david/Downloads/msm8953_64-target_files-B.zip /Users/david/Downloads/system_ota.zip</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里记录一下系统OTA差量包的生成流程。&lt;/p&gt;
&lt;p&gt;在系统完成整编之后：&lt;/p&gt;
&lt;h3 id=&quot;1-make-otapackage&quot;&gt;&lt;a href=&quot;#1-make-otapackage&quot; class=&quot;headerlink&quot; title=&quot;1. make ota
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="OTA增量" scheme="http://yoursite.com/tags/OTA%E5%A2%9E%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android包管理机制(二)PackageInstaller安装APK</title>
    <link href="http://yoursite.com/2021/03/17/Android%E5%8C%85%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-%E4%BA%8C-PackageInstaller%E5%AE%89%E8%A3%85APK/"/>
    <id>http://yoursite.com/2021/03/17/Android包管理机制-二-PackageInstaller安装APK/</id>
    <published>2021-03-17T04:03:03.000Z</published>
    <updated>2021-03-24T11:40:11.166Z</updated>
    
    <content type="html"><![CDATA[<p>APK的安装有很多方式，应用商城下载、文件浏览器安装、adb命令安装，我们以文件浏览器为例。</p><p>将一个APK文件放到SD卡目录下，文件浏览器显示apk文件。</p><p>当我们点击APK文件时，文件浏览器根据文件的后缀(.apk)解析，执行startActivity，调起packageinstaller.PackageInstallerActivity。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActivityManager: START u0 &#123;<span class="attribute">act</span>=android.intent.action.VIEW <span class="attribute">dat</span>=file:///storage/emulated/0/com.dewmobile.kuaiya.apk <span class="attribute">typ</span>=application/vnd.android.package-archive <span class="attribute">flg</span>=0x88000 <span class="attribute">cmp</span>=com.android.packageinstaller/.PackageInstallerActivity&#125; <span class="keyword">from</span> uid 10032 on display 0</span><br></pre></td></tr></table></figure><h3 id="PackageInstallerActivity"><a href="#PackageInstallerActivity" class="headerlink" title="PackageInstallerActivity"></a>PackageInstallerActivity</h3><p>PackageInstallerActivity这个类的主要作用是显示安装弹窗，对APK进行解析，判断是否允许未知来源安装，判断应用权限，等待用户安装。</p><p><code>packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == mOk) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mOkCanInstall || mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">                    mInstaller.setPermissionsResult(mSessionId, <span class="keyword">true</span>);</span><br><span class="line">                    clearCachedApkIfNeededAndFinish();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    startInstall(); <span class="comment">//开始安装</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mScrollView.pageScroll(View.FOCUS_DOWN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == mCancel) &#123;</span><br><span class="line">            <span class="comment">// Cancel and finish</span></span><br><span class="line">            setResult(RESULT_CANCELED);</span><br><span class="line">            <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">                mInstaller.setPermissionsResult(mSessionId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            clearCachedApkIfNeededAndFinish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后用户点击安装按钮，就会调用startInstall()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// Start subactivity to actually install the application</span></span><br><span class="line">     Intent newIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">     newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,</span><br><span class="line">             mPkgInfo.applicationInfo);</span><br><span class="line">     newIntent.setData(mPackageURI);</span><br><span class="line">     newIntent.setClass(<span class="keyword">this</span>, InstallAppProgress.class);<span class="comment">//</span></span><br><span class="line">     String installerPackageName = getIntent().getStringExtra(</span><br><span class="line">             Intent.EXTRA_INSTALLER_PACKAGE_NAME);</span><br><span class="line">  </span><br><span class="line">     ......</span><br><span class="line">       </span><br><span class="line">     <span class="keyword">if</span>(localLOGV) Log.i(TAG, <span class="string">"downloaded app uri="</span>+mPackageURI);</span><br><span class="line">     startActivity(newIntent);</span><br><span class="line">     finish();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>startInstall函数用于跳转到InstallAppProgress这个Activity，关闭PackageInstallerActivity。</p><h3 id="InstallAppProgress"><a href="#InstallAppProgress" class="headerlink" title="InstallAppProgress"></a>InstallAppProgress</h3><p>InstallAppProgress主要用于展示安装界面、向PMS发送包信息， 处理回调。</p><p><code>packages/apps/PackageInstaller/src/com/android/packageinstaller/InstallAppProgress.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        mAppInfo = intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class="line">        mPackageURI = intent.getData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String scheme = mPackageURI.getScheme();</span><br><span class="line">        <span class="keyword">if</span> (scheme != <span class="keyword">null</span> &amp;&amp; !<span class="string">"file"</span>.equals(scheme) &amp;&amp; !<span class="string">"package"</span>.equals(scheme)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"unexpected scheme "</span> + scheme);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启安装线程</span></span><br><span class="line">        mInstallThread = <span class="keyword">new</span> HandlerThread(<span class="string">"InstallThread"</span>);</span><br><span class="line">        mInstallThread.start();</span><br><span class="line">        mInstallHandler = <span class="keyword">new</span> Handler(mInstallThread.getLooper());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册安装监听</span></span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(BROADCAST_ACTION);</span><br><span class="line">        registerReceiver(</span><br><span class="line">                mBroadcastReceiver, intentFilter, BROADCAST_SENDER_PERMISSION, <span class="keyword">null</span> <span class="comment">/*scheduler*/</span>);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>InstallAppProgress中启动了一个HandlerThread，开启安装线程，注册了一个广播，这个广播用来监听系统返回的安装结果。</p><p>主要代码在在initView()函数中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PackageInstaller.SessionParams params = <span class="keyword">new</span> PackageInstaller.SessionParams(</span><br><span class="line">        PackageInstaller.SessionParams.MODE_FULL_INSTALL);</span><br><span class="line">params.referrerUri = getIntent().getParcelableExtra(Intent.EXTRA_REFERRER);</span><br><span class="line">params.originatingUri = getIntent().getParcelableExtra(Intent.EXTRA_ORIGINATING_URI);</span><br><span class="line">params.originatingUid = getIntent().getIntExtra(Intent.EXTRA_ORIGINATING_UID,</span><br><span class="line">        UID_UNKNOWN);</span><br><span class="line"></span><br><span class="line">File file = <span class="keyword">new</span> File(mPackageURI.getPath());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//解析安装包，设置安装位置，从AndroidManifest中获取</span></span><br><span class="line">    PackageLite pkg = PackageParser.parsePackageLite(file, <span class="number">0</span>);</span><br><span class="line">    params.setAppPackageName(pkg.packageName);</span><br><span class="line">    params.setInstallLocation(pkg.installLocation);</span><br><span class="line">    params.setSize(</span><br><span class="line">        PackageHelper.calculateInstalledSize(pkg, <span class="keyword">false</span>, params.abiOverride));</span><br><span class="line">&#125; <span class="keyword">catch</span> (PackageParser.PackageParserException e) &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"Cannot parse package "</span> + file + <span class="string">". Assuming defaults."</span>);</span><br><span class="line">    Log.e(TAG, <span class="string">"Cannot calculate installed size "</span> + file + <span class="string">". Try only apk size."</span>);</span><br><span class="line">    params.setSize(file.length());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"Cannot calculate installed size "</span> + file + <span class="string">". Try only apk size."</span>);</span><br><span class="line">    params.setSize(file.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mInstallHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行安装</span></span><br><span class="line">        doPackageStage(pm, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doPackageStage</span><span class="params">(PackageManager pm, PackageInstaller.SessionParams params)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//初始化安装器</span></span><br><span class="line">       <span class="keyword">final</span> PackageInstaller packageInstaller = pm.getPackageInstaller();</span><br><span class="line">       PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">final</span> String packageLocation = mPackageURI.getPath();</span><br><span class="line">           <span class="keyword">final</span> File file = <span class="keyword">new</span> File(packageLocation);</span><br><span class="line">           <span class="comment">//获取sessionId</span></span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> sessionId = packageInstaller.createSession(params);</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">65536</span>];</span><br><span class="line">    <span class="comment">//获取session</span></span><br><span class="line">           session = packageInstaller.openSession(sessionId);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> InputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">long</span> sizeBytes = file.length();</span><br><span class="line">           <span class="comment">// 根据这个session回话, 获取一个OutPutstream, 然后将文件写入到这个OutPutStream中</span></span><br><span class="line">           <span class="keyword">final</span> OutputStream out = session.openWrite(<span class="string">"PackageInstaller"</span>, <span class="number">0</span>, sizeBytes);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">int</span> c;</span><br><span class="line">               <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                   out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line">                   <span class="keyword">if</span> (sizeBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">final</span> <span class="keyword">float</span> fraction = ((<span class="keyword">float</span>) c / (<span class="keyword">float</span>) sizeBytes);</span><br><span class="line">                       <span class="comment">//安装中</span></span><br><span class="line">                       session.addProgress(fraction);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               session.fsync(out);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               IoUtils.closeQuietly(in);</span><br><span class="line">               IoUtils.closeQuietly(out);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Create a PendingIntent and use it to generate the IntentSender</span></span><br><span class="line">           Intent broadcastIntent = <span class="keyword">new</span> Intent(BROADCAST_ACTION);</span><br><span class="line">           PendingIntent pendingIntent = PendingIntent.getBroadcast(</span><br><span class="line">                   InstallAppProgress.<span class="keyword">this</span> <span class="comment">/*context*/</span>,</span><br><span class="line">                   sessionId,</span><br><span class="line">                   broadcastIntent,</span><br><span class="line">                   PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">           <span class="comment">//最后调用session的commit方法进行提交</span></span><br><span class="line">           session.commit(pendingIntent.getIntentSender());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           onPackageInstalled(PackageInstaller.STATUS_FAILURE);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           IoUtils.closeQuietly(session);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最终广播接受安装结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> statusCode = intent.getIntExtra(</span><br><span class="line">                    PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_FAILURE);</span><br><span class="line">            <span class="keyword">if</span> (statusCode == PackageInstaller.STATUS_PENDING_USER_ACTION) &#123;</span><br><span class="line">                context.startActivity((Intent)intent.getParcelableExtra(Intent.EXTRA_INTENT));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                onPackageInstalled(statusCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>应用安装的前期工作，用户可以看到的部分基本就这些，接下来的工作就都由Java框架层处理。</p><h3 id="Java框架层"><a href="#Java框架层" class="headerlink" title="Java框架层"></a>Java框架层</h3><p>上面最终调用PackageInstallerSession的commit方法，将安装APK的信息发给框架层。</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(IntentSender statusReceiver)</span> </span>&#123;</span><br><span class="line">      ......</span><br><span class="line">      mActiveCount.incrementAndGet();</span><br><span class="line">      <span class="keyword">final</span> PackageInstallObserverAdapter adapter = <span class="keyword">new</span> PackageInstallObserverAdapter(mContext,</span><br><span class="line">              statusReceiver, sessionId, mIsInstallerDeviceOwner, userId);</span><br><span class="line">      mHandler.obtainMessage(MSG_COMMIT, adapter.getBinder()).sendToTarget();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>commit函数中向Handler发送一个类型为MSG_COMMIT的消息，adapter.getBinder()会得到IPackageInstallObserver2观察者，处理消息逻辑如下：</p><p><code>frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler.Callback mHandlerCallback = <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Cache package manager data without the lock held</span></span><br><span class="line">            <span class="keyword">final</span> PackageInfo pkgInfo = mPm.getPackageInfo(</span><br><span class="line">                    params.appPackageName, PackageManager.GET_SIGNATURES <span class="comment">/*flags*/</span>, userId);</span><br><span class="line">            <span class="keyword">final</span> ApplicationInfo appInfo = mPm.getApplicationInfo(</span><br><span class="line">                    params.appPackageName, <span class="number">0</span>, userId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mRemoteObserver = (IPackageInstallObserver2) msg.obj;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    commitLocked(pkgInfo, appInfo);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                    <span class="keyword">final</span> String completeMsg = ExceptionUtils.getCompleteMessage(e);</span><br><span class="line">                    Slog.e(TAG, <span class="string">"Commit of session "</span> + sessionId + <span class="string">" failed: "</span> + completeMsg);</span><br><span class="line">                    destroyInternal();</span><br><span class="line">                    dispatchSessionFinished(e.error, completeMsg, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">      mPm.installStage(mPackageName, stageDir, stageCid, localObserver, params,</span><br><span class="line">              installerPackageName, installerUid, user, mCertificates);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在commitLocked方法中，调用PMS的installStage方法，这样逻辑就进入PMS中了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>PackageInstaller安装APK的过程，简单来说就两步：</p><ol><li>将APK的信息通过IO流的形式写入到PackageInstaller.Session中。</li><li>调用PackageInstaller.Session的commit方法，将APK的信息交由PMS处理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;APK的安装有很多方式，应用商城下载、文件浏览器安装、adb命令安装，我们以文件浏览器为例。&lt;/p&gt;
&lt;p&gt;将一个APK文件放到SD卡目录下，文件浏览器显示apk文件。&lt;/p&gt;
&lt;p&gt;当我们点击APK文件时，文件浏览器根据文件的后缀(.apk)解析，执行startActiv
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android包管理机制(一)PMS服务启动</title>
    <link href="http://yoursite.com/2021/03/17/Android%E5%8C%85%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-%E4%B8%80-PMS%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2021/03/17/Android包管理机制-一-PMS服务启动/</id>
    <published>2021-03-17T04:00:59.000Z</published>
    <updated>2021-03-22T10:51:06.150Z</updated>
    
    <content type="html"><![CDATA[<p>PackageManagerService(简称PMS)，是Android系统中核心服务之一，管理着所有跟package相关的工作，常见的比如安装、卸载应用。 </p><h2 id="SyetemServer处理"><a href="#SyetemServer处理" class="headerlink" title="SyetemServer处理"></a>SyetemServer处理</h2><p>SystemServer启动过程中启动服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//创建消息Looper</span></span><br><span class="line">         Looper.prepareMainLooper();</span><br><span class="line">        <span class="comment">//加载了动态库libandroid_servers.so</span></span><br><span class="line">        System.loadLibrary(<span class="string">"android_servers"</span>);</span><br><span class="line">        performPendingShutdown();</span><br><span class="line">        <span class="comment">// 创建系统的Context</span></span><br><span class="line">        createSystemContext();</span><br><span class="line">        <span class="comment">// 创建SystemServiceManager</span></span><br><span class="line">        mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</span><br><span class="line">        mSystemServiceManager.setRuntimeRestarted(mRuntimeRestart);</span><br><span class="line">        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line">        SystemServerInitThreadPool.get();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        traceEnd(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        traceBeginAndSlog(<span class="string">"StartServices"</span>);</span><br><span class="line">        <span class="comment">//启动引导服务</span></span><br><span class="line">        startBootstrapServices();</span><br><span class="line">        <span class="comment">//启动核心服务</span></span><br><span class="line">        startCoreServices();</span><br><span class="line">        <span class="comment">//启动其他服务</span></span><br><span class="line">        startOtherServices();</span><br><span class="line">        SystemServerInitThreadPool.shutdown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Slog.e(<span class="string">"System"</span>, <span class="string">"******************************************"</span>);</span><br><span class="line">        Slog.e(<span class="string">"System"</span>, <span class="string">"************ Failure starting system services"</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        traceEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，系统服务分为了三种类型，分别是引导服务、核心服务和其他服务，本文要了解的PMS属于引导服务。</p><table><thead><tr><th>引导服务</th><th>作用</th></tr></thead><tbody><tr><td>Installer</td><td>系统安装apk时的一个服务类，启动完成Installer服务之后才能启动其他的系统服务</td></tr><tr><td>ActivityManagerService</td><td>负责四大组件的启动、切换、调度。</td></tr><tr><td>PowerManagerService</td><td>计算系统中和Power相关的计算，然后决策系统应该如何反应</td></tr><tr><td>LightsService</td><td>管理和显示背光LED</td></tr><tr><td>DisplayManagerService</td><td>用来管理所有显示设备</td></tr><tr><td>UserManagerService</td><td>多用户模式管理</td></tr><tr><td>SensorService</td><td>为系统提供各种感应器服务</td></tr><tr><td>PackageManagerService</td><td>用来对apk进行安装、解析、删除、卸载等等操作</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//启动installer服务</span></span><br><span class="line">    Installer installer = mSystemServiceManager.startService(Installer.class);</span><br><span class="line">    <span class="comment">// AMS</span></span><br><span class="line">    mActivityManagerService = mSystemServiceManager.startService(</span><br><span class="line">            ActivityManagerService.Lifecycle.class).getService();</span><br><span class="line">    mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</span><br><span class="line">    mActivityManagerService.setInstaller(installer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//POWERMS</span></span><br><span class="line">    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, <span class="string">"InitPowerManagement"</span>);</span><br><span class="line">    mActivityManagerService.initPowerManagement();</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    mSystemServiceManager.startService(LightsService.class);</span><br><span class="line">    mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</span><br><span class="line">    mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only run "core" apps if we're encrypting the device.</span></span><br><span class="line">    <span class="comment">// 表示加密了设备，这时mOnlyCore的值为true，表示只运行“核心”程序，创建一个极简的启动环境。</span></span><br><span class="line">    String cryptState = SystemProperties.get(<span class="string">"vold.decrypt"</span>);</span><br><span class="line"></span><br><span class="line">    mIsAlarmBoot = SystemProperties.getBoolean(<span class="string">"ro.alarm_boot"</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Detected encryption in progress - only parsing core apps"</span>);</span><br><span class="line">        mOnlyCore = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Device encrypted - only parsing core apps"</span>);</span><br><span class="line">        mOnlyCore = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mIsAlarmBoot) &#123;</span><br><span class="line">        mOnlyCore = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RegionalizationEnvironment.isSupported()) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">"Regionalization Service"</span>);</span><br><span class="line">        RegionalizationService regionalizationService = <span class="keyword">new</span> RegionalizationService();</span><br><span class="line">        ServiceManager.addService(<span class="string">"regionalization"</span>, regionalizationService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the package manager.</span></span><br><span class="line">    <span class="comment">//启动PMS</span></span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartPackageManagerService"</span>);</span><br><span class="line">    <span class="comment">//创建PMS</span></span><br><span class="line">    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class="line">            mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br><span class="line">    <span class="comment">// 表示PMS是否首次被启动，这个参数会在WMS创建时使用</span></span><br><span class="line">    mFirstBoot = mPackageManagerService.isFirstBoot();</span><br><span class="line">    mPackageManager = mSystemContext.getPackageManager();</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> disableOtaDexopt = SystemProperties.getBoolean(<span class="string">"config.disable_otadexopt"</span>,</span><br><span class="line">                <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!disableOtaDexopt) &#123;</span><br><span class="line">            traceBeginAndSlog(<span class="string">"StartOtaDexOptService"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                OtaDexoptService.main(mSystemContext, mPackageManagerService);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                reportWtf(<span class="string">"starting OtaDexOptService"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartUserManagerService"</span>);</span><br><span class="line">    mSystemServiceManager.startService(UserManagerService.LifeCycle.class);</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    AttributeCache.init(mSystemContext);</span><br><span class="line">    mActivityManagerService.setSystemProcess();</span><br><span class="line">    startSensorService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PMS"><a href="#PMS" class="headerlink" title="PMS"></a>PMS</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Self-check for initial settings.</span></span><br><span class="line">       PackageManagerServiceCompilerMapping.checkProperties();</span><br><span class="line">  <span class="comment">//初始化PMS</span></span><br><span class="line">       PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</span><br><span class="line">               factoryTest, onlyCore);</span><br><span class="line">       m.enableSystemUserPackages();</span><br><span class="line">       <span class="comment">//将package服务注册到ServiceManager大管家</span></span><br><span class="line">       ServiceManager.addService(<span class="string">"package"</span>, m);</span><br><span class="line">       <span class="keyword">return</span> m;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>PMS的构造方法一共有700多行，在代码中，将PMS的构造流程分为了5个阶段，每个阶段会使用EventLog.writeEvent打印系统日志。</p><ol><li>BOOT_PROGRESS_PMS_START（开始阶段）</li><li>BOOT_PROGRESS_PMS_SYSTEM_SCAN_START（扫描系统阶段）</li><li>BOOT_PROGRESS_PMS_DATA_SCAN_START（扫描Data分区阶段）</li><li>BOOT_PROGRESS_PMS_SCAN_END（扫描结束阶段）</li><li>BOOT_PROGRESS_PMS_READY（准备阶段）</li></ol><h3 id="1、开始阶段"><a href="#1、开始阶段" class="headerlink" title="1、开始阶段"></a>1、开始阶段</h3><p>BOOT_PROGRESS_PMS_START</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//打印开始日志</span></span><br><span class="line">     EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,</span><br><span class="line">             SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (mSdkVersion &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">         Slog.w(TAG, <span class="string">"**** ro.build.version.sdk not set!"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     mContext = context;</span><br><span class="line"></span><br><span class="line">     mPermissionReviewRequired = context.getResources().getBoolean(</span><br><span class="line">             R.bool.config_permissionReviewRequired);</span><br><span class="line"></span><br><span class="line">     mFactoryTest = factoryTest;</span><br><span class="line">     mOnlyCore = onlyCore;</span><br><span class="line">     <span class="comment">//用于存储屏幕的相关信息</span></span><br><span class="line">     mMetrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">     <span class="comment">//创建Settings对象 (1)</span></span><br><span class="line">     mSettings = <span class="keyword">new</span> Settings(mPackages);</span><br><span class="line">     <span class="comment">// 添加system, phone, log, nfc, bluetooth, shell这六种shareUserId到mSettings；</span></span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.system"</span>, Process.SYSTEM_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.phone"</span>, RADIO_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.log"</span>, LOG_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.nfc"</span>, NFC_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.bluetooth"</span>, BLUETOOTH_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">     mSettings.addSharedUserLPw(<span class="string">"android.uid.shell"</span>, SHELL_UID,</span><br><span class="line">             ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">     mInstaller = installer;</span><br><span class="line">     <span class="comment">//创建Dex优化工具类</span></span><br><span class="line">     mPackageDexOptimizer = <span class="keyword">new</span> PackageDexOptimizer(installer, mInstallLock, context,</span><br><span class="line">             <span class="string">"*dexopt*"</span>);</span><br><span class="line">     mMoveCallbacks = <span class="keyword">new</span> MoveCallbacks(FgThread.get().getLooper());</span><br><span class="line"></span><br><span class="line">     mOnPermissionChangeListeners = <span class="keyword">new</span> OnPermissionChangeListeners(</span><br><span class="line">             FgThread.get().getLooper());</span><br><span class="line"></span><br><span class="line">     getDefaultDisplayMetrics(context, mMetrics);</span><br><span class="line">     <span class="comment">//得到全局系统配置信息</span></span><br><span class="line">     SystemConfig systemConfig = SystemConfig.getInstance();</span><br><span class="line">  <span class="comment">//获取全局的groupId </span></span><br><span class="line">     mGlobalGids = systemConfig.getGlobalGids();</span><br><span class="line">  <span class="comment">//获取系统权限</span></span><br><span class="line">     mSystemPermissions = systemConfig.getSystemPermissions();</span><br><span class="line">     mAvailableFeatures = systemConfig.getAvailableFeatures();</span><br><span class="line"></span><br><span class="line">     mProtectedPackages = <span class="keyword">new</span> ProtectedPackages(mContext);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//安装APK时需要的锁，保护所有对installd的访问。</span></span><br><span class="line">     <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">     <span class="comment">//更新APK时需要的锁，保护内存中已经解析的包信息等内容</span></span><br><span class="line">     <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">         <span class="comment">//创建后台线程ServiceThread</span></span><br><span class="line">         mHandlerThread = <span class="keyword">new</span> ServiceThread(TAG,</span><br><span class="line">                 Process.THREAD_PRIORITY_BACKGROUND, <span class="keyword">true</span> <span class="comment">/*allowIo*/</span>);</span><br><span class="line">         mHandlerThread.start();</span><br><span class="line">         <span class="comment">//创建PackageHandler绑定到ServiceThread的消息队列</span></span><br><span class="line">         mHandler = <span class="keyword">new</span> PackageHandler(mHandlerThread.getLooper());</span><br><span class="line">         mProcessLoggingHandler = <span class="keyword">new</span> ProcessLoggingHandler();</span><br><span class="line">         <span class="comment">//将PackageHandler添加到Watchdog的检测集中</span></span><br><span class="line">         Watchdog.getInstance().addThread(mHandler, WATCHDOG_TIMEOUT);</span><br><span class="line"></span><br><span class="line">         mDefaultPermissionPolicy = <span class="keyword">new</span> DefaultPermissionGrantPolicy(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//在Data分区创建一些目录</span></span><br><span class="line">         File dataDir = Environment.getDataDirectory();</span><br><span class="line">         mAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app"</span>);</span><br><span class="line">         mAppLib32InstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-lib"</span>);</span><br><span class="line">         mEphemeralInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-ephemeral"</span>);</span><br><span class="line">         mAsecInternalPath = <span class="keyword">new</span> File(dataDir, <span class="string">"app-asec"</span>).getPath();</span><br><span class="line">         mDrmAppPrivateInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-private"</span>);</span><br><span class="line">         mRegionalizationAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-regional"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//创建多用户管理服务</span></span><br><span class="line">         sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>, mPackages);</span><br><span class="line"></span><br><span class="line">         mFoundPolicyFile = SELinuxMMAC.readInstallPolicy();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//解析packages.xml等文件的信息，保存到Settings的对应字段中。packages.xml中记录系统中所有安装的应用信息，包括基本信息、签名和权限。如果packages.xml有安装的应用信息，readLPw方法会返回true，mFirstBoot的值为false，说明PMS不是首次被启动。</span></span><br><span class="line">         mFirstBoot = !mSettings.readLPw(sUserManager.getUsers(<span class="keyword">false</span>));</span><br></pre></td></tr></table></figure><p>在开始阶段，创建了很多PMS中的关键对象并赋值给PMS中的成员变量</p><h4 id="mSettings"><a href="#mSettings" class="headerlink" title="mSettings"></a>mSettings</h4><p>用于保存所有包的动态设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Settings(Object lock) &#123;</span><br><span class="line">    <span class="keyword">this</span>(Environment.getDataDirectory(), lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Settings(File dataDir, Object lock) &#123;</span><br><span class="line">    mLock = lock;</span><br><span class="line"></span><br><span class="line">    mRuntimePermissionsPersistence = <span class="keyword">new</span> RuntimePermissionPersistence(mLock);</span><br><span class="line"></span><br><span class="line">    mSystemDir = <span class="keyword">new</span> File(dataDir, <span class="string">"system"</span>);</span><br><span class="line">    mSystemDir.mkdirs(); <span class="comment">//创建/data/system</span></span><br><span class="line">    FileUtils.setPermissions(mSystemDir.toString(),</span><br><span class="line">           FileUtils.S_IRWXU|FileUtils.S_IRWXG</span><br><span class="line">           |FileUtils.S_IROTH|FileUtils.S_IXOTH,</span><br><span class="line">           -<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    mSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages.xml"</span>);</span><br><span class="line">    mBackupSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-backup.xml"</span>);</span><br><span class="line">    mPackageListFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages.list"</span>);</span><br><span class="line">    FileUtils.setPermissions(mPackageListFilename, <span class="number">0640</span>, SYSTEM_UID, PACKAGE_INFO_GID);</span><br><span class="line"></span><br><span class="line">    mStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-stopped.xml"</span>);</span><br><span class="line">    mBackupStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-stopped-backup.xml"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处mSystemDir是指目录<code>/data/system</code>，在该目录有以下5个文件：</p><table><thead><tr><th style="text-align:left">文件</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">packages.xml</td><td style="text-align:left">记录所有安装app的信息</td></tr><tr><td style="text-align:left">packages-backup.xml</td><td style="text-align:left">备份文件</td></tr><tr><td style="text-align:left">packages-stopped.xml</td><td style="text-align:left">记录系统被强制停止的文件</td></tr><tr><td style="text-align:left">packages-stopped-backup.xml</td><td style="text-align:left">备份文件</td></tr><tr><td style="text-align:left">packages.list</td><td style="text-align:left">记录应用的数据信息</td></tr></tbody></table><h4 id="mInstaller"><a href="#mInstaller" class="headerlink" title="mInstaller"></a>mInstaller</h4><p>Installer继承自SystemService，和PMS、AMS一样是系统的服务(引导服务)，PMS很多的操作都是由Installer来完成的，比如APK的安装和卸载。在Installer内部，通过IInstalld和installd进行Binder通信，由位于nativie层的installd来完成具体的操作。</p><h4 id="systemConfig"><a href="#systemConfig" class="headerlink" title="systemConfig"></a>systemConfig</h4><p>用于得到全局系统配置信息。比如系统的权限就可以通过SystemConfig来获取。</p><h4 id="mPackageDexOptimizer"><a href="#mPackageDexOptimizer" class="headerlink" title="mPackageDexOptimizer"></a>mPackageDexOptimizer</h4><p>Dex优化的工具类。</p><h4 id="mHandler（PackageHandler类型）"><a href="#mHandler（PackageHandler类型）" class="headerlink" title="mHandler（PackageHandler类型）"></a>mHandler（PackageHandler类型）</h4><p>PackageHandler继承自Handler，PMS通过PackageHandler驱动APK的复制和安装工作。<br>PackageHandler处理的消息队列如果过于繁忙，有可能导致系统卡住， 因此将它添加到Watchdog的监测集中。<br>Watchdog主要有两个用途，一个是定时检测系统关键服务（AMS和WMS等）是否可能发生死锁，还有一个是定时检测线程的消息队列是否长时间处于工作状态（可能阻塞等待了很长时间）。如果出现上述问题，Watchdog会将日志保存起来，必要时还会杀掉自己所在的进程，也就是SystemServer进程。</p><h4 id="sUserManager（UserManagerService类型）"><a href="#sUserManager（UserManagerService类型）" class="headerlink" title="sUserManager（UserManagerService类型）"></a>sUserManager（UserManagerService类型）</h4><p>多用户管理服务。</p><h3 id="2、扫描系统阶段"><a href="#2、扫描系统阶段" class="headerlink" title="2、扫描系统阶段"></a>2、扫描系统阶段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印扫描系统阶段日志</span></span><br><span class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,</span><br><span class="line">                    startTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set flag to monitor and not change apk file paths when</span></span><br><span class="line"><span class="comment">// scanning install directories.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> scanFlags = SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING | SCAN_INITIAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String bootClassPath = System.getenv(<span class="string">"BOOTCLASSPATH"</span>);</span><br><span class="line"><span class="keyword">final</span> String systemServerClassPath = System.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bootClassPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">  Slog.w(TAG, <span class="string">"No BOOTCLASSPATH found!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (systemServerClassPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">  Slog.w(TAG, <span class="string">"No SYSTEMSERVERCLASSPATH found!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> List&lt;String&gt; allInstructionSets = InstructionSets.getAllInstructionSets();</span><br><span class="line"><span class="keyword">final</span> String[] dexCodeInstructionSets =</span><br><span class="line">  getDexCodeInstructionSets(</span><br><span class="line">  allInstructionSets.toArray(<span class="keyword">new</span> String[allInstructionSets.size()]));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Ensure all external libraries have had dexopt run on them.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"><span class="keyword">if</span> (mSharedLibraries.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> For now, we're compiling these system "shared libraries"</span></span><br><span class="line">  <span class="comment">// (and framework jars) into all available architectures. It's possible</span></span><br><span class="line">  <span class="comment">// to compile them only when we come across an app that uses them (there's</span></span><br><span class="line">  <span class="comment">// already logic for that in scanPackageLI) but that adds some complexity.</span></span><br><span class="line">  <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</span><br><span class="line">    <span class="keyword">for</span> (SharedLibraryEntry libEntry : mSharedLibraries.values()) &#123;</span><br><span class="line">      <span class="keyword">final</span> String lib = libEntry.path;</span><br><span class="line">      <span class="keyword">if</span> (lib == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Shared libraries do not have profiles so we perform a full</span></span><br><span class="line">        <span class="comment">// AOT compilation (if needed).</span></span><br><span class="line">        <span class="keyword">int</span> dexoptNeeded = DexFile.getDexOptNeeded(</span><br><span class="line">          lib, dexCodeInstructionSet,</span><br><span class="line">          getCompilerFilterForReason(REASON_SHARED_APK),</span><br><span class="line">          <span class="keyword">false</span> <span class="comment">/* newProfile */</span>);</span><br><span class="line">        <span class="keyword">if</span> (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) &#123;</span><br><span class="line">          mInstaller.dexopt(lib, Process.SYSTEM_UID, dexCodeInstructionSet,</span><br><span class="line">                            dexoptNeeded, DEXOPT_PUBLIC <span class="comment">/*dexFlags*/</span>,</span><br><span class="line">                            getCompilerFilterForReason(REASON_SHARED_APK),</span><br><span class="line">                            StorageManager.UUID_PRIVATE_INTERNAL,</span><br><span class="line">                            SKIP_SHARED_LIBRARY_CHECK);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Library not found: "</span> + lib);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException | InstallerException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Cannot dexopt "</span> + lib + <span class="string">"; is it an APK or JAR? "</span></span><br><span class="line">               + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在/system中创建framework目录</span></span><br><span class="line">File frameworkDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"framework"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> VersionInfo ver = mSettings.getInternalVersion();</span><br><span class="line">mIsUpgrade = !Build.FINGERPRINT.equals(ver.fingerprint);</span><br><span class="line"></span><br><span class="line"><span class="comment">// when upgrading from pre-M, promote system app permissions from install to runtime</span></span><br><span class="line">mPromoteSystemApps =</span><br><span class="line">  mIsUpgrade &amp;&amp; ver.sdkVersion &lt;= Build.VERSION_CODES.LOLLIPOP_MR1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When upgrading from pre-N, we need to handle package extraction like first boot,</span></span><br><span class="line"><span class="comment">// as there is no profiling data available.</span></span><br><span class="line">mIsPreNUpgrade = mIsUpgrade &amp;&amp; ver.sdkVersion &lt; Build.VERSION_CODES.N;</span><br><span class="line"></span><br><span class="line">mIsPreNMR1Upgrade = mIsUpgrade &amp;&amp; ver.sdkVersion &lt; Build.VERSION_CODES.N_MR1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// save off the names of pre-existing system packages prior to scanning; we don't</span></span><br><span class="line"><span class="comment">// want to automatically grant runtime permissions for new system apps</span></span><br><span class="line"><span class="keyword">if</span> (mPromoteSystemApps) &#123;</span><br><span class="line">  Iterator&lt;PackageSetting&gt; pkgSettingIter = mSettings.mPackages.values().iterator();</span><br><span class="line">  <span class="keyword">while</span> (pkgSettingIter.hasNext()) &#123;</span><br><span class="line">    PackageSetting ps = pkgSettingIter.next();</span><br><span class="line">    <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">      mExistingSystemPackages.add(ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collect vendor overlay packages. (Do this before scanning any apps.)</span></span><br><span class="line"><span class="comment">// For security and version matching reason, only consider</span></span><br><span class="line"><span class="comment">// overlay packages if they reside in the right directory.</span></span><br><span class="line">String overlayThemeDir = SystemProperties.get(VENDOR_OVERLAY_THEME_PROPERTY);</span><br><span class="line"> <span class="comment">//扫描/vendor/overlay目录下的文件</span></span><br><span class="line"><span class="keyword">if</span> (!overlayThemeDir.isEmpty()) &#123;</span><br><span class="line">  scanDirTracedLI(<span class="keyword">new</span> File(VENDOR_OVERLAY_DIR, overlayThemeDir), mDefParseFlags</span><br><span class="line">                  | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                  | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">                  | PackageParser.PARSE_TRUSTED_OVERLAY, scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">scanDirTracedLI(<span class="keyword">new</span> File(VENDOR_OVERLAY_DIR), mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">                | PackageParser.PARSE_TRUSTED_OVERLAY, scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find base frameworks (resource packages without code).</span></span><br><span class="line"><span class="comment">//收集包名：/system/framework</span></span><br><span class="line">scanDirTracedLI(frameworkDir, mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">                | PackageParser.PARSE_IS_PRIVILEGED,</span><br><span class="line">                scanFlags | SCAN_NO_DEX, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collected privileged system packages.</span></span><br><span class="line"><span class="comment">//收集私有的系统包名：/system/priv-app</span></span><br><span class="line"><span class="keyword">final</span> File privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>);</span><br><span class="line">scanDirTracedLI(privilegedAppDir, mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">                | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collect ordinary system packages.</span></span><br><span class="line"><span class="comment">//收集一般的系统包名：/system/app</span></span><br><span class="line"><span class="keyword">final</span> File systemAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"app"</span>);</span><br><span class="line">scanDirTracedLI(systemAppDir, mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collect all vendor packages.</span></span><br><span class="line"><span class="comment">//收集所有的供应商包名：/vendor/app</span></span><br><span class="line">File vendorAppDir = <span class="keyword">new</span> File(<span class="string">"/vendor/app"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  vendorAppDir = vendorAppDir.getCanonicalFile();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  <span class="comment">// failed to look up canonical path, continue with original one</span></span><br><span class="line">&#125;</span><br><span class="line">scanDirTracedLI(vendorAppDir, mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collect all OEM packages.</span></span><br><span class="line"><span class="comment">//收集所有OEM包名：/oem/app</span></span><br><span class="line"><span class="keyword">final</span> File oemAppDir = <span class="keyword">new</span> File(Environment.getOemDirectory(), <span class="string">"app"</span>);</span><br><span class="line">scanDirTracedLI(oemAppDir, mDefParseFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Collect all Regionalization packages form Carrier's res packages.</span></span><br><span class="line"><span class="keyword">if</span> (RegionalizationEnvironment.isSupported()) &#123;</span><br><span class="line">  Log.d(TAG, <span class="string">"Load Regionalization vendor apks"</span>);</span><br><span class="line">  <span class="keyword">final</span> List&lt;File&gt; RegionalizationDirs =</span><br><span class="line">    RegionalizationEnvironment.getAllPackageDirectories();</span><br><span class="line">  <span class="keyword">for</span> (File f : RegionalizationDirs) &#123;</span><br><span class="line">    File RegionalizationSystemDir = <span class="keyword">new</span> File(f, <span class="string">"system"</span>);</span><br><span class="line">    <span class="comment">// Collect packages in &lt;Package&gt;/system/priv-app</span></span><br><span class="line">    scanDirLI(<span class="keyword">new</span> File(RegionalizationSystemDir, <span class="string">"priv-app"</span>),</span><br><span class="line">              PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">              | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Collect packages in &lt;Package&gt;/system/app</span></span><br><span class="line">    scanDirLI(<span class="keyword">new</span> File(RegionalizationSystemDir, <span class="string">"app"</span>),</span><br><span class="line">              PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">              scanFlags, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Collect overlay in &lt;Package&gt;/system/vendor</span></span><br><span class="line">    scanDirLI(<span class="keyword">new</span> File(RegionalizationSystemDir, <span class="string">"vendor/overlay"</span>),</span><br><span class="line">              PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">              scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prune any system packages that no longer exist.</span></span><br><span class="line"><span class="comment">// 这个列表代表有可能有升级包的系统App</span></span><br><span class="line"><span class="keyword">final</span> List&lt;String&gt; possiblyDeletedUpdatedSystemApps = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">  Iterator&lt;PackageSetting&gt; psit = mSettings.mPackages.values().iterator();</span><br><span class="line">  <span class="keyword">while</span> (psit.hasNext()) &#123;</span><br><span class="line">    PackageSetting ps = psit.next();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * If this is not a system app, it can't be a</span></span><br><span class="line"><span class="comment">    * disable system app.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> ((ps.pkgFlags &amp; ApplicationInfo.FLAG_SYSTEM) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * If the package is scanned, it's not erased.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package scannedPkg = mPackages.get(ps.name);</span><br><span class="line">    <span class="keyword">if</span> (scannedPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * If the system app is both scanned and in the</span></span><br><span class="line"><span class="comment">      * disabled packages list, then it must have been</span></span><br><span class="line"><span class="comment">      * added via OTA. Remove it from the currently</span></span><br><span class="line"><span class="comment">      * scanned package so the previously user-installed</span></span><br><span class="line"><span class="comment">      * application can be scanned.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;  <span class="comment">//1</span></span><br><span class="line">        logCriticalInfo(Log.WARN, <span class="string">"Expecting better updated system app for "</span></span><br><span class="line">                        + ps.name + <span class="string">"; removing system app.  Last known codePath="</span></span><br><span class="line">                        + ps.codePathString + <span class="string">", installStatus="</span> + ps.installStatus</span><br><span class="line">                        + <span class="string">", versionCode="</span> + ps.versionCode + <span class="string">"; scanned versionCode="</span></span><br><span class="line">                        + scannedPkg.mVersionCode);</span><br><span class="line">        <span class="comment">//将这个系统App的PackageSetting从PMS的mPackages中移除</span></span><br><span class="line">        removePackageLI(scannedPkg, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//将升级包的路径添加到mExpectingBetter列表中</span></span><br><span class="line">        mExpectingBetter.put(ps.name, ps.codePath);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;</span><br><span class="line">      psit.remove();</span><br><span class="line">      logCriticalInfo(Log.WARN, <span class="string">"System package "</span> + ps.name</span><br><span class="line">                      + <span class="string">" no longer exists; it's data will be wiped"</span>);</span><br><span class="line">      <span class="comment">// Actual deletion of code and data will be handled by later</span></span><br><span class="line">      <span class="comment">// reconciliation step</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> PackageSetting disabledPs = mSettings.getDisabledSystemPkgLPr(ps.name);</span><br><span class="line">      <span class="comment">//这个系统App升级包信息在mDisabledSysPackages中,但是没有发现这个升级包存在</span></span><br><span class="line">      <span class="keyword">if</span> (disabledPs.codePath == <span class="keyword">null</span> || !disabledPs.codePath.exists()) &#123;<span class="comment">//2</span></span><br><span class="line">        possiblyDeletedUpdatedSystemApps.add(ps.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//look for any incomplete package installations</span></span><br><span class="line"><span class="comment">//清理所有安装不完整的包</span></span><br><span class="line">ArrayList&lt;PackageSetting&gt; deletePkgsList = mSettings.getListOfIncompleteInstallPackagesLPr();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deletePkgsList.size(); i++) &#123;</span><br><span class="line">  <span class="comment">// Actual deletion of code and data will be handled by later</span></span><br><span class="line">  <span class="comment">// reconciliation step</span></span><br><span class="line">  <span class="keyword">final</span> String packageName = deletePkgsList.get(i).name;</span><br><span class="line">  logCriticalInfo(Log.WARN, <span class="string">"Cleaning up incompletely installed app: "</span> + packageName);</span><br><span class="line">  <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">    mSettings.removePackageLPw(packageName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete tmp files</span></span><br><span class="line"><span class="comment">//删除临时文件</span></span><br><span class="line">deleteTempPackageFiles();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove any shared userIDs that have no associated packages</span></span><br><span class="line">mSettings.pruneSharedUsersLPw();</span><br></pre></td></tr></table></figure><p>系统扫描阶段的主要工作有以下3点：</p><ol><li>创建/system的子目录，比如/system/framework、/system/priv-app和/system/app等等</li><li>扫描系统文件，比如/vendor/overlay、/system/framework、/system/app等等目录下的文件。</li><li>对扫描到的系统文件做后续处理。</li></ol><p>主要来说第3点，一次OTA升级对于一个系统App会有三种情况：</p><ul><li>这个系统APP无更新。</li><li>这个系统APP有更新。</li><li>新的OTA版本中，这个系统APP已经被删除。</li></ul><p>当系统App升级，PMS会将该系统App的升级包设置数据（PackageSetting）存储到Settings的mDisabledSysPackages列表中（具体见PMS的replaceSystemPackageLIF方法），mDisabledSysPackages的类型为<code>ArrayMap&lt;String, PackageSetting&gt;</code>。mDisabledSysPackages中的信息会被PMS保存到packages.xml中的<code>&lt;updated-package&gt;</code>标签下（具体见Settings的writeDisabledSysPackageLPr方法）。</p><p>注释1处说明这个系统App有升级包，那么就将该系统App的PackageSetting从mDisabledSysPackages列表中移除，并将系统App的升级包的路径添加到mExpectingBetter列表中，mExpectingBetter的类型为<code>ArrayMap&lt;String, File&gt;</code>等待后续处理。</p><p>注释2处如果这个系统App的升级包信息存储在mDisabledSysPackages列表中，但是没有发现这个升级包存在，则将它加入到possiblyDeletedUpdatedSystemApps列表中，意为“系统App的升级包可能被删除”，之所以是“可能”，是因为系统还没有扫描Data分区，只能暂放到possiblyDeletedUpdatedSystemApps列表中，等到扫描完Data分区后再做处理。</p><h3 id="3、扫描Data分区阶段"><a href="#3、扫描Data分区阶段" class="headerlink" title="3、扫描Data分区阶段"></a>3、扫描Data分区阶段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果设备没有加密，那么就开始扫描Data分区</span></span><br><span class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">    <span class="comment">//打印扫描Data分区阶段日志</span></span><br><span class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,</span><br><span class="line">                        SystemClock.uptimeMillis());</span><br><span class="line">    <span class="comment">//扫描/data/app目录下的文件 </span></span><br><span class="line">    scanDirTracedLI(mAppInstallDir, <span class="number">0</span>, scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//扫描/data/app-private目录下的文件</span></span><br><span class="line">    scanDirTracedLI(mDrmAppPrivateInstallDir, mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_FORWARD_LOCK,</span><br><span class="line">                    scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//扫描/data/app-ephemeral目录下的文件</span></span><br><span class="line">    scanDirLI(mEphemeralInstallDir, mDefParseFlags</span><br><span class="line">              | PackageParser.PARSE_IS_EPHEMERAL,</span><br><span class="line">              scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Remove disable package settings for any updated system</span></span><br><span class="line"><span class="comment">    * apps that were removed via an OTA. If they're not a</span></span><br><span class="line"><span class="comment">    * previously-updated app, remove them completely.</span></span><br><span class="line"><span class="comment">    * Otherwise, just revoke their system-level permissions.</span></span><br><span class="line"><span class="comment">    * 处理possiblyDeletedUpdatedSystemApps列表</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (String deletedAppName : possiblyDeletedUpdatedSystemApps) &#123;</span><br><span class="line">      PackageParser.Package deletedPkg = mPackages.get(deletedAppName);</span><br><span class="line">      mSettings.removeDisabledSystemPackageLPw(deletedAppName);</span><br><span class="line"></span><br><span class="line">      String msg;</span><br><span class="line">      <span class="keyword">if</span> (deletedPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1 如果这个系统App的包信息不在PMS的变量mPackages中，说明是残留的App信息，后续会删除它的数据</span></span><br><span class="line">        msg = <span class="string">"Updated system package "</span> + deletedAppName</span><br><span class="line">          + <span class="string">" no longer exists; it's data will be wiped"</span>;</span><br><span class="line">        <span class="comment">// Actual deletion of code and data will be handled by later</span></span><br><span class="line">        <span class="comment">// reconciliation step</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//2 如果这个系统App在mPackages中，说明是存在于Data分区，不属于系统App，那么移除其系统权限。</span></span><br><span class="line">        msg = <span class="string">"Updated system app + "</span> + deletedAppName</span><br><span class="line">          + <span class="string">" no longer present; removing system privileges for "</span></span><br><span class="line">          + deletedAppName;</span><br><span class="line"></span><br><span class="line">        deletedPkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</span><br><span class="line"></span><br><span class="line">        PackageSetting deletedPs = mSettings.mPackages.get(deletedAppName);</span><br><span class="line">        deletedPs.pkgFlags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</span><br><span class="line">      &#125;</span><br><span class="line">      logCriticalInfo(Log.WARN, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Make sure all system apps that we expected to appear on</span></span><br><span class="line"><span class="comment">    * the userdata partition actually showed up. If they never</span></span><br><span class="line"><span class="comment">    * appeared, crawl back and revive the system version.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">     <span class="comment">//遍历mExpectingBetter列表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mExpectingBetter.size(); i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> String packageName = mExpectingBetter.keyAt(i);</span><br><span class="line">      <span class="keyword">if</span> (!mPackages.containsKey(packageName)) &#123;</span><br><span class="line">        <span class="comment">//得到系统App的升级包路径</span></span><br><span class="line">        <span class="keyword">final</span> File scanFile = mExpectingBetter.valueAt(i);</span><br><span class="line"></span><br><span class="line">        logCriticalInfo(Log.WARN, <span class="string">"Expected better "</span> + packageName</span><br><span class="line">                        + <span class="string">" but never showed up; reverting to system"</span>);</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3 根据系统App所在的目录设置扫描的解析参数</span></span><br><span class="line">        <span class="keyword">int</span> reparseFlags = mDefParseFlags;</span><br><span class="line">        <span class="keyword">if</span> (FileUtils.contains(privilegedAppDir, scanFile)) &#123;</span><br><span class="line">          reparseFlags = PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR</span><br><span class="line">            | PackageParser.PARSE_IS_PRIVILEGED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(systemAppDir, scanFile)) &#123;</span><br><span class="line">          reparseFlags = PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(vendorAppDir, scanFile)) &#123;</span><br><span class="line">          reparseFlags = PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(oemAppDir, scanFile)) &#123;</span><br><span class="line">          reparseFlags = PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Slog.e(TAG, <span class="string">"Ignoring unexpected fallback path "</span> + scanFile);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 将packageName对应的包设置数据（PackageSetting）添加到mSettings的mPackages中</span></span><br><span class="line">        mSettings.enableSystemPackageLPw(packageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//5 扫描系统App的升级包</span></span><br><span class="line">          scanPackageTracedLI(scanFile, reparseFlags, scanFlags, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">          Slog.e(TAG, <span class="string">"Failed to parse original system package: "</span></span><br><span class="line">                 + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">//清除mExpectingBetter列表</span></span><br><span class="line">  mExpectingBetter.clear();</span><br></pre></td></tr></table></figure><p>扫描Data分区阶段主要做了以下几件事：</p><ol><li>扫描/data/app和/data/app-private目录下的文件。</li><li>遍历possiblyDeletedUpdatedSystemApps列表，注释1处如果这个系统App的包信息不在PMS的变量mPackages中，说明是残留的App信息，后续会删除它的数据。注释2处如果这个系统App的包信息在mPackages中，说明是存在于Data分区，不属于系统App，那么移除其系统权限。</li><li>遍历mExpectingBetter列表，注释3处根据系统App所在的目录设置扫描的解析参数，注释4处的方法内部会将packageName对应的包设置数据（PackageSetting）添加到mSettings的mPackages中。注释5处扫描系统App的升级包，最后清除mExpectingBetter列表。</li></ol><h3 id="4、扫描结束阶段"><a href="#4、扫描结束阶段" class="headerlink" title="4、扫描结束阶段"></a>4、扫描结束阶段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印扫描结束阶段日志</span></span><br><span class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,</span><br><span class="line">                    SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the platform SDK has changed since the last time we booted,</span></span><br><span class="line">            <span class="comment">// we need to re-grant app permission to catch any new ones that</span></span><br><span class="line">            <span class="comment">// appear.  This is really a hack, and means that apps can in some</span></span><br><span class="line">            <span class="comment">// cases get permissions that the user didn't initially explicitly</span></span><br><span class="line">            <span class="comment">// allow...  it would be nice to have some better way to handle</span></span><br><span class="line">            <span class="comment">// this situation.</span></span><br><span class="line">            <span class="comment">//当sdk版本不一致时，需要更新权限</span></span><br><span class="line">            <span class="keyword">int</span> updateFlags = UPDATE_PERMISSIONS_ALL;</span><br><span class="line">            <span class="keyword">if</span> (ver.sdkVersion != mSdkVersion) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Platform changed from "</span> + ver.sdkVersion + <span class="string">" to "</span></span><br><span class="line">                        + mSdkVersion + <span class="string">"; regranting permissions for internal storage"</span>);</span><br><span class="line">                updateFlags |= UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;</span><br><span class="line">            &#125;</span><br><span class="line">            updatePermissionsLPw(<span class="keyword">null</span>, <span class="keyword">null</span>, StorageManager.UUID_PRIVATE_INTERNAL, updateFlags);</span><br><span class="line">            ver.sdkVersion = mSdkVersion;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If this is the first boot or an update from pre-M, and it is a normal</span></span><br><span class="line">            <span class="comment">// boot, then we need to initialize the default preferred apps across</span></span><br><span class="line">            <span class="comment">// all defined users.</span></span><br><span class="line">   <span class="comment">//如果是第一次启动或者是Android M升级后的第一次启动，需要初始化所有用户定义的默认首选App</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyCore &amp;&amp; (mPromoteSystemApps || mFirstBoot)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (UserInfo user : sUserManager.getUsers(<span class="keyword">true</span>)) &#123;</span><br><span class="line">                    mSettings.applyDefaultPreferredAppsLPw(<span class="keyword">this</span>, user.id);</span><br><span class="line">                    applyFactoryDefaultBrowserLPw(user.id);</span><br><span class="line">                    primeDomainVerificationsLPw(user.id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在引导过程中尽早为系统用户准备存储，</span></span><br><span class="line">            <span class="comment">//因为核心系统应用程序，如设置Provider和SystemUI无法等待用户启动</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> storageFlags;</span><br><span class="line">            <span class="keyword">if</span> (StorageManager.isFileEncryptedNativeOrEmulated()) &#123;</span><br><span class="line">                storageFlags = StorageManager.FLAG_STORAGE_DE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                storageFlags = StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;</span><br><span class="line">            &#125;</span><br><span class="line">            reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL, UserHandle.USER_SYSTEM,</span><br><span class="line">                    storageFlags);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If this is first boot after an OTA, and a normal boot, then</span></span><br><span class="line">            <span class="comment">// we need to clear code cache directories.</span></span><br><span class="line">            <span class="comment">// Note that we do *not* clear the application profiles. These remain valid</span></span><br><span class="line">            <span class="comment">// across OTAs and are used to drive profile verification (post OTA) and</span></span><br><span class="line">            <span class="comment">// profile compilation (without waiting to collect a fresh set of profiles).</span></span><br><span class="line"> <span class="comment">// OTA后的第一次启动，会清除代码缓存目录</span></span><br><span class="line">            <span class="keyword">if</span> (mIsUpgrade &amp;&amp; !onlyCore) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Build fingerprint changed; clearing code caches"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSettings.mPackages.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.valueAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, ps.volumeUuid)) &#123;</span><br><span class="line">                        <span class="comment">// No apps are running this early, so no need to freeze</span></span><br><span class="line">                        clearAppDataLIF(ps.pkg, UserHandle.USER_ALL,</span><br><span class="line">                                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE</span><br><span class="line">                                        | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ver.fingerprint = Build.FINGERPRINT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            checkDefaultBrowser();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当权限和其他默认项都完成更新，则清理相关信息</span></span><br><span class="line">            mExistingSystemPackages.clear();</span><br><span class="line">            mPromoteSystemApps = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// All the changes are done during package scanning.</span></span><br><span class="line">            ver.databaseVersion = Settings.CURRENT_DATABASE_VERSION;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把Settings的内容保存到packages.xml中</span></span><br><span class="line">            mSettings.writeLPr();</span><br></pre></td></tr></table></figure><p>扫描结束结束阶段主要做了以下几件事：</p><ol><li>如果当前平台SDK版本和上次启动时的SDK版本不同，重新更新APK的授权。</li><li>如果是第一次启动或者是Android M升级后的第一次启动，需要初始化所有用户定义的默认首选App。</li><li>OTA升级后的第一次启动，会清除代码缓存目录。</li><li>把Settings的内容保存到packages.xml中，这样此后PMS再次创建时会读到此前保存的Settings的内容。</li></ol><h3 id="5、准备阶段"><a href="#5、准备阶段" class="headerlink" title="5、准备阶段"></a>5、准备阶段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印准备阶段日志</span></span><br><span class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,</span><br><span class="line">                    SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">  mRequiredVerifierPackage = getRequiredButNotReallyRequiredVerifierLPr();</span><br><span class="line">  mRequiredInstallerPackage = getRequiredInstallerLPr();</span><br><span class="line">    mRequiredUninstallerPackage = getRequiredUninstallerLPr();</span><br><span class="line">    mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();</span><br><span class="line">    mIntentFilterVerifier = <span class="keyword">new</span> IntentVerifierProxy(mContext,</span><br><span class="line">                                                    mIntentFilterVerifierComponent);</span><br><span class="line">    mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">      PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);</span><br><span class="line">    mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">      PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mRequiredVerifierPackage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mOnlyPowerOffAlarm) &#123;</span><br><span class="line">      mRequiredInstallerPackage = getRequiredInstallerLPr();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mRequiredInstallerPackage = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mRequiredUninstallerPackage = <span class="keyword">null</span>;</span><br><span class="line">    mIntentFilterVerifierComponent = <span class="keyword">null</span>;</span><br><span class="line">    mIntentFilterVerifier = <span class="keyword">null</span>;</span><br><span class="line">    mServicesSystemSharedLibraryPackageName = <span class="keyword">null</span>;</span><br><span class="line">    mSharedSystemSharedLibraryPackageName = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建PackageInstallerService，用于管理安装会话的服务，它会为每次安装过程分配一个SessionId</span></span><br><span class="line">mInstallerService = <span class="keyword">new</span> PackageInstallerService(context, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行一次垃圾收集</span></span><br><span class="line">untime.getRuntime().gc();</span><br><span class="line"></span><br><span class="line"><span class="comment">// The initial scanning above does many calls into installd while</span></span><br><span class="line"><span class="comment">// holding the mPackages lock, but we're mostly interested in yelling</span></span><br><span class="line"><span class="comment">// once we have a booted system.</span></span><br><span class="line">mInstaller.setWarnIfHeld(mPackages);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将PackageManagerInternalImpl（PackageManager的本地服务）添加到LocalServices中，LocalServices用于存储运行在当前的进程中的本地服务</span></span><br><span class="line">LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PMS属于引导服务，由SyetemServer启动</p><p>PMS启动又分为5个阶段</p><ol><li>BOOT_PROGRESS_PMS_START（开始阶段）</li><li>BOOT_PROGRESS_PMS_SYSTEM_SCAN_START（扫描系统阶段）</li><li>BOOT_PROGRESS_PMS_DATA_SCAN_START（扫描Data分区阶段）</li><li>BOOT_PROGRESS_PMS_SCAN_END（扫描结束阶段）</li><li>BOOT_PROGRESS_PMS_READY（准备阶段）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PackageManagerService(简称PMS)，是Android系统中核心服务之一，管理着所有跟package相关的工作，常见的比如安装、卸载应用。 &lt;/p&gt;
&lt;h2 id=&quot;SyetemServer处理&quot;&gt;&lt;a href=&quot;#SyetemServer处理&quot; cl
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="PMS" scheme="http://yoursite.com/tags/PMS/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="http://yoursite.com/2021/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/11/设计模式-代理模式/</id>
    <published>2021-03-11T01:33:22.000Z</published>
    <updated>2021-03-11T07:51:00.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>为其它对象提供一种代理以控制对这个对象的访问</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当无法或不想直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="/2021/03/11/设计模式-代理模式/proxy.png" alt=""></p><p>Subject：抽象主题类</p><p>该类的主要职责是声明真实主题与代理的共同接口方法，该类既可以是一个抽象类也可以是接口。</p><p>RealSubject：真实主题类</p><p>该类也被称为被委托类或被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户类则通过代理类间接得调用真实主题类中定义的方法。</p><p>ProxySubject：代理类</p><p>该类也称为委托类或代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中相应的接口方法执行，以此起到代理的作用。</p><p>Client：客户类，即使用代理类的类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;为其它对象提供一种代理以控制对这个对象的访问&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;header
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>树与二叉树</title>
    <link href="http://yoursite.com/2021/03/08/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2021/03/08/树与二叉树/</id>
    <published>2021-03-08T03:48:07.000Z</published>
    <updated>2021-03-08T05:33:49.807Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快排排序-三路快排</title>
    <link href="http://yoursite.com/2021/03/08/%E5%BF%AB%E6%8E%92%E6%8E%92%E5%BA%8F-%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92/"/>
    <id>http://yoursite.com/2021/03/08/快排排序-三路快排/</id>
    <published>2021-03-08T03:22:38.000Z</published>
    <updated>2021-03-08T05:33:51.483Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式(RecyclerView notifyDataSetChanged)</title>
    <link href="http://yoursite.com/2021/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/04/设计模式-观察者模式/</id>
    <published>2021-03-04T06:20:16.000Z</published>
    <updated>2021-03-08T02:59:38.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合关系”</li><li>事件多级触发场景</li><li>跨系统的消息交换场景，如消息队列、事件总线的处理机制</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="/2021/03/04/设计模式-观察者模式/observer_uml.png" alt=""></p><ul><li>Subject：抽象对象，也是被观察(Observable)的角色，抽象主题角色把所有观察者对象的引用保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有注册过的观察者发出通知，具体主题角色有叫做具体被观察者(ConcreteObservable)角色。</li><li>Observer：抽象观察者，该角色是观察者的抽象类，它定义了一个更新接口，使得在得到猪头的更改通知时更新自己。</li><li>ConcreteObserver：具体的观察者，该角色实现抽象观察者角色所定义的更新接口，以便在主题的状态发生改变时更新自己的状态。</li></ul><h2 id="Android源码"><a href="#Android源码" class="headerlink" title="Android源码"></a>Android源码</h2><p>Android中使用观察者模式的地方很多，在这里以我们常用的RecyclerView为例。当我们往RecyclerView中添加数据后，都会调用Adapter的notifyDataSetChanged方法，其中就使用观察者模式的方式，接下来研究它的实现源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> AdapterDataObservable mObservable = <span class="keyword">new</span> AdapterDataObservable();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">boolean</span> mHasStableIds = <span class="keyword">false</span>;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">          mObservable.registerObserver(observer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">          mObservable.unregisterObserver(observer);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mObservable.notifyChanged();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObservable</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">AdapterDataObserver</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !mObservers.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// since onChanged() is implemented by the app, it could do anything, including</span></span><br><span class="line">            <span class="comment">// removing itself from &#123;@link mObservers&#125; - and that could cause problems if</span></span><br><span class="line">            <span class="comment">// an iterator is used on the ArrayList &#123;@link mObservers&#125;.</span></span><br><span class="line">            <span class="comment">// to avoid such problems, just march thru the list in the reverse order.</span></span><br><span class="line">          <span class="comment">//调用每个观察者的onChanged方法通知它们被观察者发生了改变</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = mObservers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                mObservers.get(i).onChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这些观察者从哪里来的？这些观察者是在RecyclerView通过setAdapter方法设置的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(@Nullable Adapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bail out if layout is frozen</span></span><br><span class="line">        setLayoutFrozen(<span class="keyword">false</span>);</span><br><span class="line">        setAdapterInternal(adapter, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        processDataSetCompletelyChanged(<span class="keyword">false</span>);</span><br><span class="line">        requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapterInternal</span><span class="params">(@Nullable Adapter adapter, <span class="keyword">boolean</span> compatibleWithPrevious,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> removeAndRecycleViews)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果已经有了Adapter，那么先注销该Adapter对应的观察者</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAdapter.unregisterAdapterDataObserver(mObserver);</span><br><span class="line">            mAdapter.onDetachedFromRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!compatibleWithPrevious || removeAndRecycleViews) &#123;</span><br><span class="line">            removeAndRecycleViews();</span><br><span class="line">        &#125;</span><br><span class="line">        mAdapterHelper.reset();</span><br><span class="line">        <span class="keyword">final</span> Adapter oldAdapter = mAdapter;</span><br><span class="line">        mAdapter = adapter;</span><br><span class="line">        <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//将观察者注册到Adapter中，实际注册到mObservable(见上面)</span></span><br><span class="line">            adapter.registerAdapterDataObserver(mObserver);</span><br><span class="line">            adapter.onAttachedToRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLayout.onAdapterChanged(oldAdapter, mAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        mRecycler.onAdapterChanged(oldAdapter, mAdapter, compatibleWithPrevious);</span><br><span class="line">        mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样注册也就完成了，只要我们调用notifyDataSetChanged，就会调用AdapterDataObservable的notifyChanged方法，这个函数会调用所有观察者（AdapterDataObserver）的onChanged方法。</p><p>onChanged实际调用的RecyclerViewDataObserver中的onChanged方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewDataObserver</span> <span class="keyword">extends</span> <span class="title">AdapterDataObserver</span> </span>&#123;</span><br><span class="line">        RecyclerViewDataObserver() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertNotInLayoutOrScroll(<span class="keyword">null</span>);</span><br><span class="line">            mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            processDataSetCompletelyChanged(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mAdapterHelper.hasPendingUpdates()) &#123;</span><br><span class="line">                requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onChanged方法中调用requestLayout方法重新布局，更新用户界面。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>观察者和被观察者之间是抽象耦合，应对业务变化；</li><li>增强系统灵活性、可扩展性。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>在应用观察者模式时需要考虑开发效率和运行效率，程序包括一个被观察者、多个观察者，开发和调试会比较复杂，而且在Java中消息的通知默认是顺序执行，一个观察者卡顿，会影响整体执行效率，在这种情况下，一般采用异步的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="http://yoursite.com/2021/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/02/设计模式-策略模式/</id>
    <published>2021-03-02T01:08:42.000Z</published>
    <updated>2021-03-03T03:32:31.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们可以互相替换。策略模式让算法独立于使用它的客户而独立变化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。</li><li>需要安全地封装多种同一类型的操作时。</li><li>出现同一抽象类有多个子类，而又需要使用if-else或switch-case来选择具体子类时。</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>Context：用来操作策略的上下文环境</p><p>Stragety：策略的抽象</p><p>ConcreteStragetyA、ConcreteStragetyB：具体的策略实现</p><p><img src="/2021/03/02/设计模式-策略模式/1.png" alt=""></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以乘坐公共交通为例，公共交通采用分段计费，乘坐距离越远，价格越高。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算接口</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">     <span class="comment">//按照距离来计算价格</span></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BusStrategy</span> : <span class="type">CalculateStrategy &#123;</span></span></span><br><span class="line">     <span class="comment">//十公里1元，超过10公里每加1元乘5公里</span></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">         <span class="comment">//超过10公里的总距离</span></span><br><span class="line">         <span class="keyword">val</span> extraTotal = km - <span class="number">10</span></span><br><span class="line">         <span class="comment">//超过的距离是5公里的倍数</span></span><br><span class="line">         <span class="keyword">val</span> extraFactor = extraTotal / <span class="number">5</span></span><br><span class="line">         <span class="comment">//超过的距离对5公里取余</span></span><br><span class="line">         <span class="keyword">val</span> fraction = extraTotal % <span class="number">5</span></span><br><span class="line">         <span class="comment">//计算价格</span></span><br><span class="line">         <span class="keyword">var</span> price = <span class="number">1</span> + extraFactor * <span class="number">1</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">if</span> (fraction &gt; <span class="number">0</span>)</span><br><span class="line">             ++price</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             price</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SubwayStrategy</span> : <span class="type">CalculateStrategy &#123;</span></span></span><br><span class="line">     <span class="comment">//6公里内3元，6-12公里4元，12-22公里5元，22-32公里6元</span></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">if</span> (km &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">             <span class="number">3</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">6</span> &amp;&amp; km &lt; <span class="number">12</span>) &#123;</span><br><span class="line">             <span class="number">4</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">12</span> &amp;&amp; km &lt; <span class="number">22</span>) &#123;</span><br><span class="line">             <span class="number">5</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">22</span> &amp;&amp; km &lt; <span class="number">32</span>) &#123;</span><br><span class="line">             <span class="number">6</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="number">7</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">TranficCalculate</span> </span>&#123;</span><br><span class="line">     <span class="keyword">lateinit</span> <span class="keyword">var</span> mStrategy: CalculateStrategy</span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">setStrategy</span><span class="params">(strategy: <span class="type">CalculateStrategy</span>)</span></span> &#123;</span><br><span class="line">         mStrategy = strategy</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">         mStrategy.calculatePrice(km)</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">val</span> calculate = TranficCalculate()</span><br><span class="line">         calculate.setStrategy(BusStrategy())</span><br><span class="line">         <span class="comment">//计算乘坐公交16公里的价格</span></span><br><span class="line">         calculate.calculatePrice(<span class="number">15</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这种方案在隐藏实现的同时，可扩展性变得很强，当我们想增加计算出租车的计算策略的时候，只需要增加出租车计算策略类，然后将该策略设置给TranficCalculate即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。这个模式很好的演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>结构清晰明了、使用简单直观</li><li>耦合度相对而言较低，扩展方便</li><li>操作封装也更为彻底，数据更为安全</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>随着策略的增多，子类也会变得繁多</li></ul><blockquote><p>《Android源码设计模式解析与实战》学习笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们可以互相替换。策略模式让算法独立于使用它的客户而独立变化。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android WIFI源码分析-WifiStateMachine</title>
    <link href="http://yoursite.com/2021/03/01/Android-WIFI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-WifiStateMachine/"/>
    <id>http://yoursite.com/2021/03/01/Android-WIFI源码分析-WifiStateMachine/</id>
    <published>2021-03-01T08:32:14.000Z</published>
    <updated>2021-03-02T02:47:36.113Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="WIFI" scheme="http://yoursite.com/tags/WIFI/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="http://yoursite.com/2021/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/01/设计模式-状态模式/</id>
    <published>2021-03-01T08:31:01.000Z</published>
    <updated>2021-03-02T03:06:33.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式和策略模式的结构几乎完全一样，但它们的目的、本质完全不一样。状态模式的行为是平行的、不可替换的，策略模式的行为是彼此独立的、可相互替换的。用一句话表述，状态模式把对象的行为包装在不同的状态对象里，每一个状态对象都有一个共同的抽象状态基类。状态模式的意图是让一个对象在其内部状态改变时，其行为也随之改变。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</li><li>代码中包含大量与对象状态有关的条件语句，例如，一个操作中包含庞大的多分支语句（if-else或switch-case），且这些分支依赖于该对象的状态。</li></ol><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="/2021/03/01/设计模式-状态模式/state_uml.png" alt=""></p><ul><li>Context：环境类，定义客户感兴趣的接口，维护一个State子类的实例，这个实例定义了对象的当前状态。</li><li>State：抽象状态类或状态接口，定义一个或一组接口，表示该状态下的行为。</li><li>Concerte StateA 、Concerte StateB：具体状态类，每一个具体的状态类实现抽象State中定义的接口，从而达到不同状态下的不同行为。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以电视遥控器为例演示状态模式的实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电视操作接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TVState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关机状态，此时只有开机状态是有效的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerOffState</span> : <span class="type">TVState &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开机状态，此时触发开机功能不做操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerOnState</span> : <span class="type">TVState &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"下一频道"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"上一频道"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"调高音量"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"调低音量"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PowerController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">powerOn</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">powerOff</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电视遥控器，相当于上面UML图中的Context</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVController</span> : <span class="type">PowerController &#123;</span></span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTVState: TVState</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTVState</span><span class="params">(tvState: <span class="type">TVState</span>)</span></span> &#123;</span><br><span class="line">        mTVState = tvState</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">powerOn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setTVState(PowerOnState())</span><br><span class="line">        Log.d(TAG, <span class="string">"开机啦！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">powerOff</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setTVState(PowerOffState())</span><br><span class="line">        Log.d(TAG, <span class="string">"关机啦！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.nextChannel()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.prevChannel()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.turnUp()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.turnDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tvController = TVController()</span><br><span class="line">    tvController.powerOn()</span><br><span class="line">    tvController.nextChannel()</span><br><span class="line">    tvController.prevChannel()</span><br><span class="line">    tvController.turnDown()</span><br><span class="line">    tvController.turnUp()</span><br><span class="line">    tvController.powerOff()</span><br><span class="line">    tvController.turnUp() <span class="comment">// 不会生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开机啦！</span><br><span class="line">下一频道</span><br><span class="line">上一频道</span><br><span class="line">调低音量</span><br><span class="line">调高音量</span><br><span class="line">关机啦！</span><br><span class="line">已经关机啦</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式的关键点在于不同的状态下对于同一个行为有不同的相应，这其实就是一个将if-else用多态来实现的一个具体示例。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>State模式将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同事也保证可可扩展性和可维护性。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>状态模式的使用必然会增加系统类和对象的个数。</p><blockquote><p>《Android源码设计模式解析与实战》学习笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式和策略模式的结构几乎完全一样，但它们的目的、本质完全不一样。状态模式的行
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="状态机" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux等待队列</title>
    <link href="http://yoursite.com/2021/02/26/Linux%E7%AD%89%E5%BE%85%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2021/02/26/Linux等待队列/</id>
    <published>2021-02-26T01:39:26.000Z</published>
    <updated>2021-02-26T06:19:02.600Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。Linux中提供了等待队列的机制，该机制在内核中应用很广泛。</p><p>它是以双循环链表为基础数据结构，与进程的休眠唤醒机制紧密相联，是实现异步事件通知、跨进程通信、同步资源访问等技术的底层技术支撑。</p><p>它有两种数据结构：等待队列头 （wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为”连接件”。它通过一个双链表和把等待task的头，和等待的进程列表链接起来。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>等待队列结构如下，因为每个等待队列都可以再中断时被修改，因此，在操作等待队列之前必须获得一个自旋锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> &#123;</span></span><br><span class="line">   <span class="keyword">spinlock_t</span>      lock;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span>;</span></span><br></pre></td></tr></table></figure><p>可通过宏<code>DECLARE_WAIT_QUEUE_HEAD(name)</code>来创建类型为wait_queue_head_t的等待队列头name。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_WAIT_QUEUE_HEAD(name) \</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> <span class="title">name</span> = __<span class="title">WAIT_QUEUE_HEAD_INITIALIZER</span>(<span class="title">name</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">#<span class="title">define</span> __<span class="title">WAIT_QUEUE_HEAD_INITIALIZER</span>(<span class="title">name</span>) &#123;</span>                    \</span><br><span class="line">    .lock        = __SPIN_LOCK_UNLOCKED(name.lock),            \</span><br><span class="line">    .head        = &#123; &amp;(name).head, &amp;(name).head &#125; &#125;</span><br></pre></td></tr></table></figure><p>等待队列是通过task_list双链表来实现，其数据成员是如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flags;</span><br><span class="line"><span class="keyword">void</span>*<span class="keyword">private</span>;  <span class="comment">//指向等待队列的进程task_struct</span></span><br><span class="line"><span class="keyword">wait_queue_func_t</span>func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> <span class="title">wait_queue_t</span>;</span></span><br></pre></td></tr></table></figure><p>可通过宏<code>DECLARE_WAITQUEUE(name, tsk)</code>来创建类型为wait_queue_t的等待队列项name，并将tsk赋值给成员变量private， default_wake_function赋值给成员变量func。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_WAITQUEUE(name, tsk)                        \</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_entry</span> <span class="title">name</span> = __<span class="title">WAITQUEUE_INITIALIZER</span>(<span class="title">name</span>, <span class="title">tsk</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">define</span> __<span class="title">WAITQUEUE_INITIALIZER</span>(<span class="title">name</span>, <span class="title">tsk</span>) &#123;</span>                    \</span><br><span class="line">    .<span class="keyword">private</span>    = tsk,                            \</span><br><span class="line">    .func        = default_wake_function,                \</span><br><span class="line">    .entry        = &#123; <span class="literal">NULL</span>, <span class="literal">NULL</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>示意图：</p><p><img src="/2021/02/26/Linux等待队列/wait_queue.png" alt=""></p><h2 id="初始化等待队列元素"><a href="#初始化等待队列元素" class="headerlink" title="初始化等待队列元素"></a>初始化等待队列元素</h2><ol><li><p>静态初始化</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define DEFINE_WAIT_FUNC(<span class="keyword">name</span>, <span class="function"><span class="keyword">function</span></span>)\</span><br><span class="line">wait_queue_t <span class="keyword">name</span> = &#123;\</span><br><span class="line">.<span class="keyword">private</span>= current,\</span><br><span class="line">.func= <span class="function"><span class="keyword">function</span></span>,\</span><br><span class="line">.task_list= LIST_HEAD_INIT((<span class="keyword">name</span>).task_list),\</span><br><span class="line">&#125;</span><br><span class="line">#define DEFINE_WAIT(<span class="keyword">name</span>) DEFINE_WAIT_FUNC(<span class="keyword">name</span>, autoremove_wake_function)</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_waitqueue_entry</span><span class="params">(<span class="keyword">wait_queue_t</span> *q, struct task_struct *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q-&gt;flags= <span class="number">0</span>;</span><br><span class="line">q-&gt;<span class="keyword">private</span>= p;</span><br><span class="line">q-&gt;func= default_wake_function;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="增加删除"><a href="#增加删除" class="headerlink" title="增加删除"></a>增加删除</h2><h3 id="add-wait-queue"><a href="#add-wait-queue" class="headerlink" title="add_wait_queue"></a>add_wait_queue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_wait_queue</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    wait-&gt;flags &amp;= ~WQ_FLAG_EXCLUSIVE;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    __add_wait_queue(q, wait);  <span class="comment">//挂到队列头</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __add_wait_queue(<span class="keyword">wait_queue_head_t</span> *head, <span class="keyword">wait_queue_t</span> *<span class="keyword">new</span>)</span><br><span class="line">&#123;</span><br><span class="line">    list_add(&amp;<span class="keyword">new</span>-&gt;task_list, &amp;head-&gt;task_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的功能是将wait等待队列项 挂到等待队列头q中。</p><h3 id="remove-wait-queue"><a href="#remove-wait-queue" class="headerlink" title="remove_wait_queue"></a>remove_wait_queue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_wait_queue</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    __remove_wait_queue(q, wait);</span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __remove_wait_queue(<span class="keyword">wait_queue_head_t</span> *head, <span class="keyword">wait_queue_t</span> *old)</span><br><span class="line">&#123;</span><br><span class="line">    list_del(&amp;old-&gt;task_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能是将wait等待队列项 从等待队列头q中移除。</p><h2 id="休眠唤醒"><a href="#休眠唤醒" class="headerlink" title="休眠唤醒"></a>休眠唤醒</h2><h3 id="wait-event-（进程休眠）"><a href="#wait-event-（进程休眠）" class="headerlink" title="wait_event （进程休眠）"></a>wait_event （进程休眠）</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//condition ： a C expression for the event to wait for</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wait_event(wq, condition)                    \</span></span><br><span class="line"><span class="keyword">do</span> &#123;                                    \</span><br><span class="line">    <span class="keyword">if</span> (condition)                            \</span><br><span class="line">        <span class="keyword">break</span>;                            \</span><br><span class="line">    __wait_event(wq, condition);                    \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __wait_event(wq, condition)                    \</span></span><br><span class="line">    (<span class="keyword">void</span>)___wait_event(wq, condition, TASK_UNINTERRUPTIBLE, <span class="number">0</span>, <span class="number">0</span>, schedule())</span><br></pre></td></tr></table></figure><p>####___wait_event</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">___wait_event(wq, condition, state, exclusive, ret, cmd)&#123;  </span><br><span class="line">    <span class="keyword">wait_queue_t</span> __wait;                    </span><br><span class="line">    INIT_LIST_HEAD(&amp;__wait.task_list);                </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//当检测进程是否有待处理信号则返回值__int不为0,见下面解析</span></span><br><span class="line">        <span class="keyword">long</span> __int = prepare_to_wait_event(&amp;wq, &amp;__wait, state);</span><br><span class="line">        <span class="keyword">if</span> (condition)  <span class="comment">//当满足条件，则跳出循环                    </span></span><br><span class="line">            <span class="keyword">break</span>;                        </span><br><span class="line">                                    </span><br><span class="line">        <span class="comment">//当有待处理信号且进程处于可中断状态(TASK_INTERRUPTIBLE或TASK_KILLABLE))，则跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (___wait_is_interruptible(state) &amp;&amp; __int) &#123;        </span><br><span class="line">            __ret = __int;                    </span><br><span class="line">            <span class="keyword">break</span>;                      </span><br><span class="line">        &#125;                            </span><br><span class="line">        cmd; <span class="comment">//schedule()，进入睡眠，从进程就绪队列选择一个高优先级进程来代替当前进程运行                       </span></span><br><span class="line">    &#125;                                </span><br><span class="line">    finish_wait(&amp;wq, &amp;__wait);  <span class="comment">//调用函数finish_wait()将进程状态设置为TASK_RUNNING，并从等待队列的链表中移除对应的成员             </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prepare-to-wait-event"><a href="#prepare-to-wait-event" class="headerlink" title="prepare_to_wait_event"></a>prepare_to_wait_event</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">prepare_to_wait_event</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait, <span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">if</span> (signal_pending_state(state, current)) <span class="comment">//信号检测</span></span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line"></span><br><span class="line">    wait-&gt;<span class="keyword">private</span> = current;</span><br><span class="line">    wait-&gt;func = autoremove_wake_function; <span class="comment">//设置func唤醒函数</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    <span class="keyword">if</span> (list_empty(&amp;wait-&gt;task_list)) &#123;  <span class="comment">//当wait不在队列q，则加入其中，防止无法唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (wait-&gt;flags &amp; WQ_FLAG_EXCLUSIVE)</span><br><span class="line">            __add_wait_queue_tail(q, wait);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            __add_wait_queue(q, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    set_current_state(state);  <span class="comment">//设置进程状态</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">autoremove_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = default_wake_function(wait, mode, sync, key); <span class="comment">//唤醒函数</span></span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        list_del_init(&amp;wait-&gt;task_list); <span class="comment">//从列表中移除wait</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait_event(wq, condition)：进入睡眠状态直到condition为true，在等待期进程状态为TASK_UNINTERRUPTIBLE。对应的唤醒方法是wake_up()，当等待队列wq被唤醒时会执行如下两个检测：</p><ul><li>检查condition是否为true，满足条件，则跳出循环。</li><li>检测该进程task的成员thread_info-&gt;flags是否被设置TIF_SIGPENDING，被设置则说明有待处理的信号，则跳出循环。</li></ul><h3 id="wake-up-（进程唤醒）"><a href="#wake-up-（进程唤醒）" class="headerlink" title="wake_up （进程唤醒）"></a>wake_up （进程唤醒）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up(x)            __wake_up(x, TASK_NORMAL, 1, NULL)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __wake_up(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</span><br><span class="line">            <span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//核心方法</span></span><br><span class="line">    __wake_up_common(q, mode, nr_exclusive, <span class="number">0</span>, key);</span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __wake_up_common(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</span><br><span class="line">            <span class="keyword">int</span> nr_exclusive, <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">wait_queue_t</span> *curr, *next;</span><br><span class="line"></span><br><span class="line">    list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> flags = curr-&gt;flags;</span><br><span class="line">        <span class="comment">//调用prepare_to_wait_event中设置的唤醒函数</span></span><br><span class="line">        <span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp;</span><br><span class="line">                (flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：q是等待队列，mode指定进程的状态，用于控制唤醒进程的条件，nr_exclusive表示将要唤醒的设置了WQ_FLAG_EXCLUSIVE标志的进程的数目。 </p><p>然后扫描链表，调用func唤醒函数，直至没有更多的进程被唤醒，或者被唤醒的的独占进程数目已经达到规定数目。</p><p>从上面可知，真正调用的唤醒函数为default_wake_function</p><h4 id="default-wake-function"><a href="#default-wake-function" class="headerlink" title="default_wake_function"></a>default_wake_function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *curr, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> wake_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> try_to_wake_up(curr-&gt;<span class="keyword">private</span>, mode, wake_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="try-to-wake-up"><a href="#try-to-wake-up" class="headerlink" title="try_to_wake_up"></a>try_to_wake_up</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">try_to_wake_up</span><span class="params">(struct task_struct *p, <span class="keyword">unsigned</span> <span class="keyword">int</span> state, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> cpu, src_cpu, success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> freq_notif_allowed = !(wake_flags &amp; WF_NO_NOTIFIER);</span><br><span class="line">    <span class="keyword">bool</span> check_group = <span class="literal">false</span>;</span><br><span class="line">    wake_flags &amp;= ~WF_NO_NOTIFIER;</span><br><span class="line"></span><br><span class="line">    smp_mb__before_spinlock();</span><br><span class="line">    raw_spin_lock_irqsave(&amp;p-&gt;pi_lock, flags); <span class="comment">//关闭本地中断</span></span><br><span class="line">    src_cpu = cpu = task_cpu(p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前进程状态不属于可唤醒状态集，则无法唤醒该进程</span></span><br><span class="line">    <span class="comment">//wake_up()传递过来的TASK_NORMAL等于(TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)</span></span><br><span class="line">    <span class="keyword">if</span> (!(p-&gt;state &amp; state)) </span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    success = <span class="number">1</span>; </span><br><span class="line">    smp_rmb();</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;on_rq &amp;&amp; ttwu_remote(p, wake_flags)) <span class="comment">//当前进程已处于rq运行队列，则无需唤醒</span></span><br><span class="line">        <span class="keyword">goto</span> stat;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    ttwu_queue(p, cpu); </span><br><span class="line">stat:</span><br><span class="line">    ttwu_stat(p, cpu, wake_flags);</span><br><span class="line">out:</span><br><span class="line">    raw_spin_unlock_irqrestore(&amp;p-&gt;pi_lock, flags); <span class="comment">//恢复本地中断</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ttwu-queue"><a href="#ttwu-queue" class="headerlink" title="ttwu_queue"></a>ttwu_queue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_queue</span><span class="params">(struct task_struct *p, <span class="keyword">int</span> cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span> = <span class="title">cpu_rq</span>(<span class="title">cpu</span>);</span> <span class="comment">// 获取当前进程的运行队列</span></span><br><span class="line">raw_spin_lock(&amp;rq-&gt;lock);</span><br><span class="line">lockdep_pin_lock(&amp;rq-&gt;lock);</span><br><span class="line">ttwu_do_activate(rq, p, <span class="number">0</span>); <span class="comment">//</span></span><br><span class="line">lockdep_unpin_lock(&amp;rq-&gt;lock);</span><br><span class="line">raw_spin_unlock(&amp;rq-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ttwu ： try to wake up 缩写</span></span><br></pre></td></tr></table></figure><h4 id="ttwu-do-activate"><a href="#ttwu-do-activate" class="headerlink" title="ttwu_do_activate"></a>ttwu_do_activate</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_do_activate</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ttwu_activate(rq, p, ENQUEUE_WAKEUP | ENQUEUE_WAKING);</span><br><span class="line">ttwu_do_wakeup(rq, p, wake_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ttwu_activate</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> en_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">activate_task(rq, p, en_flags); <span class="comment">//将进程task加入rq队列</span></span><br><span class="line">p-&gt;on_rq = TASK_ON_RQ_QUEUED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; PF_WQ_WORKER)</span><br><span class="line">wq_worker_waking_up(p, cpu_of(rq)); <span class="comment">//worker正在唤醒中，则通知工作队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_do_wakeup</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">check_preempt_curr(rq, p, wake_flags);</span><br><span class="line">p-&gt;state = TASK_RUNNING; <span class="comment">//标记该进程为TASK_RUNNING状态</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>休眠与唤醒流程：</strong></p><ol><li>进程A调用wait_event(wq, condition)就是向等待队列头中添加等待队列项wait_queue_t，该该等待队列项中的成员变量private记录当前进程，其成员变量func记录唤醒回调函数，然后调用schedule()使当前进程进入休眠状态。</li><li>进程B调用wake_up(wq)会遍历整个等待列表wq中的每一项wait_queue_t，依次调用每一项的唤醒函数try_to_wake_up()。这个过程会将private记录的进程加入rq运行队列，并设置进程状态为TASK_RUNNING。</li><li>进程A被唤醒后只执行如下检测：<ul><li>检查condition是否为true，满足条件则跳出循环，再把wait_queue_t从wq队列中移除；</li><li>检测该进程task的成员thread_info-&gt;flags是否被设置TIF_SIGPENDING，被设置则说明有待处理的信号，则跳出循环，再把wait_queue_t从wq队列中移除；</li><li>否则，继续调用schedule()再次进入休眠等待状态，如果wait_queue_t不在wq队列，则再次加入wq队列。</li></ul></li></ol><p>参考：</p><p><a href="http://gityuan.com/2018/12/02/linux-wait-queue/" target="_blank" rel="noopener">http://gityuan.com/2018/12/02/linux-wait-queue/</a></p><p><a href="https://blog.csdn.net/younger_china/article/details/7176851" target="_blank" rel="noopener">https://blog.csdn.net/younger_china/article/details/7176851</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。Linux中提供了等待队列的机制，该机制在内核中应用很广泛。&lt;/p&gt;
&lt;p&gt;它是以双循环链表为基础数据结构，与进程的休眠唤醒
      
    
    </summary>
    
      <category term="Linux系统" scheme="http://yoursite.com/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android智能指针</title>
    <link href="http://yoursite.com/2020/12/01/Android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2020/12/01/Android智能指针/</id>
    <published>2020-12-01T11:33:57.000Z</published>
    <updated>2021-02-23T08:50:23.008Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中通常会使用引用计数来维护对象的生命周期。</p><p>每当有一个指针指向了一个new出来的对象时，就对这个对象的引用计数增加1，每当有一个指针不再使用这个对象时，就对这个对象的引用计数减少1，每次减1之后，如果发现引用计数值为0时，那么，就要delete这个对象了，这样就避免了忘记delete对象或者这个对象被delete之后其它地方还在使用的问题了。</p><p>那如何实现这个对象的引用计数呢？如果由开发人员维护，显然既不可靠，易出错，又不方便编写和维护。因此Android使用智能指针技术—能自动维护对象引用计数的技术。需要注意的是，智能指针是一个对象，而不是一个指针。这个对象代表的是另外一个真实使用的对象，当智能指针指向实际对象的时候，就是智能指针对象创建的时候，当智能指针不再指向实际对象的时候，就是智能指针对象销毁的时候</p><p>考虑这样的一个场景，系统中有两个对象A和B，在对象A的内部引用了对象B，而在对象B的内部也引用了对象A。当两个对象A和B都不再使用时，垃圾收集系统会发现无法回收这两个对象的所占据的内存的，因为系统一次只能收集一个对象，而无论系统决定要收回对象A还是要收回对象B时，都会发现这个对象被其它的对象所引用，因而就都回收不了，这样就造成了内存泄漏。这样，就要采取另外的一种引用计数技术了，即对象的引用计数同时存在强引用和弱引用两种计数，当父对象要引用子对象时，就对子对象使用强引用计数技术，而当子对象要引用父对象时，就对父对象使用弱引用计数技术，而当垃圾收集系统执行对象回收工作时，只要发现对象的强引用计数为0，而不管它的弱引用计数是否为0，都可以回收这个对象，但是，如果我们只对一个对象持有弱引用计数，当我们要使用这个对象时，就不直接使用了，必须要把这个弱引用升级成为强引用时，才能使用这个对象，在转换的过程中，如果对象已经不存在，那么转换就失败了，这时候就说明这个对象已经被销毁了，不能再使用了。</p><p>Android系统提供了强大的智能指针技术供我们使用，这些智能指针实现方案既包括简单的引用计数技术，也包括了复杂的引用计数技术，即对象既有强引用计数，也有弱引用计数，对应地，这三种智能指针分别就称为轻量级指针（Light Pointer）、强指针（Strong Pointer）和弱指针（Weak Pointer）。</p><p>无论是轻量级指针，还是强指针和弱指针，它们的实现框架都是一致的，即由对象本身来提供引用计数器，但是它不会去维护这个引用计数器的值，而是由智能指针来维护。</p><p>##轻量级指针</p><p><code>/system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LightRefBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    inline LightRefBase() : mCount(0) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">incStrong</span><span class="params">(__attribute__((unused)) <span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        mCount.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">decStrong</span><span class="params">(__attribute__((unused)) <span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="comment">//fetch_sub将原子对象的封装值减 val，并返回原子对象的旧值，整个过程是原子的</span></span><br><span class="line">        <span class="keyword">if</span> (mCount.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> T*&gt;(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//! DEBUGGING ONLY: Get current strong ref count.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> int32_t <span class="title">getStrongCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> LightRefBase&lt;T&gt; basetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">inline</span> ~LightRefBase() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceMover</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefs</span><span class="params">(<span class="keyword">size_t</span> n, <span class="keyword">const</span> ReferenceRenamer&amp; renamer)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(T* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt; mCount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先它是一个模板类，拥有一个atomic&lt;int32_t&gt; 类型的计数器（atomic是一个原子操作类，在c++11中新定义的）提供了desString 和 incString的计数器增减方案，还有一个getStringCount的获取计数器数量的方法。</p><p>在decStrong方法中，如果强引用全部删除之后，我们会delete本对象。</p><p>轻量级指针的实现类为sp，它不仅仅是LightRefBase计数器的智能指针，同时也是强指针引用计数器的智能指针。</p><p><code>system/core/include/utils/StrongPointer.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    inline sp() : m_ptr(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    sp(T* other);</span><br><span class="line">    sp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    sp(sp&lt;T&gt;&amp;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(sp&lt;U&gt;&amp;&amp; other);</span><br><span class="line"></span><br><span class="line">    ~sp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line"></span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (T* other);</span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (sp&lt;T&gt;&amp;&amp; other);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (sp&lt;U&gt;&amp;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (U* other);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Special optimization for use by ProcessState (and nobody else).</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">force_set</span><span class="params">(T* other)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Accessors</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span>  T&amp;      <span class="keyword">operator</span>* () <span class="keyword">const</span>  &#123; <span class="keyword">return</span> *m_ptr; &#125;</span><br><span class="line">    <span class="keyword">inline</span>  T*      <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_ptr;  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  T*      <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span>         </span>&#123; <span class="keyword">return</span> m_ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Operators</span></span><br><span class="line"></span><br><span class="line">    COMPARE(==)</span><br><span class="line">    COMPARE(!=)</span><br><span class="line">    COMPARE(&gt;)</span><br><span class="line">    COMPARE(&lt;)</span><br><span class="line">    COMPARE(&lt;=)</span><br><span class="line">    COMPARE(&gt;=)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">sp</span>;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">wp</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_pointer</span><span class="params">(T* ptr)</span></span>;</span><br><span class="line">    T* m_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sp类也是一个模版类，T表示对象的实际类型，它也是必须继承了LightRefBase的。成员变量m_ptr是一个指针，它是在构造函数里初始化的，指向实际引用的对象。所以下面这两个构造函数实际就是调用了LightRefBase的成员函数incStrong来增加引用计数。</p><p>构造函数</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::sp(T* other)</span><br><span class="line">        : m_ptr(other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (other)</span><br><span class="line">        other-&gt;incStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::sp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other)</span><br><span class="line">        : m_ptr(other.m_ptr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr)</span><br><span class="line">        m_ptr-&gt;incStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>析构函数</p><p>调用了LightRefBase的成员函数decStrong来减少引用计数</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::~sp() &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr)</span><br><span class="line">        m_ptr-&gt;decStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><code>external/lightpointer/lightpointer.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/RefBase.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightClass</span> :</span> <span class="keyword">public</span> LightRefBase&lt;LightClass&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LightClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Construce LightClass Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~LightClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Destory LightClass Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LightClass *pLightClass = <span class="keyword">new</span> LightClass();</span><br><span class="line">    sp&lt;LightClass&gt; lpOut = pLightClass;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">//作用域</span></span><br><span class="line">        sp&lt;LightClass&gt; lpInner = lpOut;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line">       <span class="comment">//作用域结束，lpInner析构</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>external/lightpointer/Android.mk</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_MODULE := lightpointer</span><br><span class="line">LOCAL_SRC_FILES := lightpointer.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">libcutils \</span><br><span class="line">libutils</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure><p>编译打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mmm ./external/lightpointer/</span><br><span class="line">make snod</span><br></pre></td></tr></table></figure><p>烧录新镜像后：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span></span><br><span class="line"><span class="keyword">cd</span> <span class="built_in">system</span>/bin/</span><br><span class="line">./lightpointer</span><br><span class="line"></span><br><span class="line">Construce LightClass Object</span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">1</span></span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">2</span></span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">1</span> </span><br><span class="line">Destory LightClass Object</span><br></pre></td></tr></table></figure><p>可以看到pLightClass对象赋值给lpOut智能指针后，引用计数加1，然后在局部作用域中，定义一个智能指针lpInner，并且指向了原来的对象，引用计数再次加1，当局部作用域结束时，lpInner析构，引用计数减1。</p><h2 id="强指针"><a href="#强指针" class="headerlink" title="强指针"></a>强指针</h2><p><code>system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">incStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">decStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    </span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">forceIncStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Get current strong ref count.</span></span><br><span class="line">            <span class="keyword">int32_t</span>         getStrongCount() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">weakref_type</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">RefBase*            <span class="title">refBase</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">incWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">decWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// acquires a strong reference if there is already one.</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span>                <span class="title">attemptIncStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// acquires a weak reference if there is already one.</span></span><br><span class="line">        <span class="comment">// This is not always safe. see ProcessState.cpp and BpBinder.cpp</span></span><br><span class="line">        <span class="comment">// for proper use.</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span>                <span class="title">attemptIncWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Get current weak ref count.</span></span><br><span class="line">        <span class="keyword">int32_t</span>             getWeakCount() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Print references held on object.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Enable tracking for this object.</span></span><br><span class="line">        <span class="comment">// enable -- enable/disable tracking</span></span><br><span class="line">        <span class="comment">// retain -- when tracking is enable, if true, then we save a stack trace</span></span><br><span class="line">        <span class="comment">//           for each reference and dereference; when retain == false, we</span></span><br><span class="line">        <span class="comment">//           match up references and dereferences and keep only the </span></span><br><span class="line">        <span class="comment">//           outstanding ones.</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span> enable, <span class="keyword">bool</span> retain)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">            <span class="function">weakref_type*   <span class="title">createWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">            </span><br><span class="line">            <span class="function">weakref_type*   <span class="title">getWeakRefs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Print references held on object.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  <span class="keyword">void</span>            <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; getWeakRefs()-&gt;printRefs(); &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Enable tracking of object.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  <span class="keyword">void</span>            <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span> enable, <span class="keyword">bool</span> retain)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        getWeakRefs()-&gt;trackMe(enable, retain); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> RefBase basetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">                            RefBase();</span><br><span class="line">    <span class="keyword">virtual</span>                 ~RefBase();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//! Flags for extendObjectLifetime()</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        OBJECT_LIFETIME_STRONG  = <span class="number">0x0000</span>,</span><br><span class="line">        OBJECT_LIFETIME_WEAK    = <span class="number">0x0001</span>,</span><br><span class="line">        OBJECT_LIFETIME_MASK    = <span class="number">0x0001</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">extendObjectLifetime</span><span class="params">(<span class="keyword">int32_t</span> mode)</span></span>;</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//! Flags for onIncStrongAttempted()</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        FIRST_INC_STRONG = <span class="number">0x0001</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onFirstRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onLastStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span>            <span class="title">onIncStrongAttempted</span><span class="params">(<span class="keyword">uint32_t</span> flags, <span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onLastWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">weakref_type</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">weakref_impl</span>;</span></span><br><span class="line">    </span><br><span class="line">                            RefBase(<span class="keyword">const</span> RefBase&amp; o);</span><br><span class="line">            RefBase&amp;        <span class="keyword">operator</span>=(<span class="keyword">const</span> RefBase&amp; o);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceMover</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefs</span><span class="params">(<span class="keyword">size_t</span> n, <span class="keyword">const</span> ReferenceRenamer&amp; renamer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(weakref_type* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(RefBase* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span></span>;</span><br><span class="line"></span><br><span class="line">        weakref_impl* <span class="keyword">const</span> mRefs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样定义了 incStrong 和decStrong方法，用于增减引用计数（这也是为什么强指针也能使用sp<t>类来控制引用计数的原因）。和轻量级指针引用计数不同的是，我们的引用计数量不再是一个int类型来记录引用数量，而是使用了一个weakref_impl指针类型的变量mRefs。</t></p><p>weakref_impl继承自上面的weakref_type</p><p><code>system/core/libutils/RefBase.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefBase</span>:</span>:weakref_impl : <span class="keyword">public</span> RefBase::weakref_type</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mStrong;</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mWeak;</span><br><span class="line">    RefBase* <span class="keyword">const</span>          mBase;</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mFlags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !DEBUG_REFS</span></span><br><span class="line"></span><br><span class="line">    weakref_impl(RefBase* base)</span><br><span class="line">        : mStrong(INITIAL_STRONG_VALUE)</span><br><span class="line">        , mWeak(<span class="number">0</span>)</span><br><span class="line">        , mBase(base)</span><br><span class="line">        , mFlags(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">renameStrongRefId</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*old_id*/</span>, <span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*new_id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">renameWeakRefId</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*old_id*/</span>, <span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*new_id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span>, <span class="keyword">bool</span>)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个里面实际有用的就是最上面定义的4个成员变量，mStrong 和 mWeak分别用来做强引用和弱引用的计数，mBase指向实现引用计数的对象本身，mFlags是标志位，默认值是0。</p><p>强指针的实现类依然为sp，上面我们知道sp中实际是调用了RefBase类的incStrong和decStrong来增加和减少引用计数的。我们先来看一下incStrong。</p><p><code>system/core/libutils/RefBase.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::incStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    refs-&gt;incWeak(id);</span><br><span class="line">    </span><br><span class="line">    refs-&gt;addStrongRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = refs-&gt;mStrong.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    ALOG_ASSERT(c &gt; <span class="number">0</span>, <span class="string">"incStrong() called on %p after last strong ref"</span>, refs);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"incStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, c);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (c != INITIAL_STRONG_VALUE)  &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> old = refs-&gt;mStrong.fetch_sub(INITIAL_STRONG_VALUE,</span><br><span class="line">            <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    <span class="comment">// A decStrong() must still happen after us.</span></span><br><span class="line">    ALOG_ASSERT(old &gt; INITIAL_STRONG_VALUE, <span class="string">"0x%x too small"</span>, old);</span><br><span class="line">    refs-&gt;mBase-&gt;onFirstRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用incWeak，弱引用加1。（<strong>从这里可以看到增加对象的强引用，也会增加对象的弱引用计数，即一个对象的弱引用计数一定大于等于它的强引用计数</strong>）</p><p>然后调用addStrongRef，这个函数为空实现。</p><p>关键是mStrong.fetch_add，在强引用上加1，返回值c为增加前原值，如果c等于INITIAL_STRONG_VALUE，表明是第一次调用，就会调用fetch_sub，将mStrong归1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITIAL_STRONG_VALUE (1&lt;&lt;28)</span></span><br></pre></td></tr></table></figure><p>因为mStrong的初始值不为0，而是INITIAL_STRONG_VALUE，也就是1&lt;&lt;28，fetch_add后就成了1&lt;&lt;28+1，所以后面调用fetch_sub减掉INITIAL_STRONG_VALUE初始值，才会把mStrong值置为1。可以把这个操作看为一个判断是否第一次被强引用，相比使用boolean去标记优雅很多，后面refs-&gt;mBase-&gt;onFirstRef()调用是个空实现，由开发者自己定义。</p><p>然后看decStrong</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::decStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    refs-&gt;removeStrongRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = refs-&gt;mStrong.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"decStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, c);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ALOG_ASSERT(c &gt;= <span class="number">1</span>, <span class="string">"decStrong() called on %p too many times"</span>, refs);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line">        refs-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">        <span class="keyword">int32_t</span> flags = refs-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// Since mStrong had been incremented, the destructor did not</span></span><br><span class="line">            <span class="comment">// delete refs.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note that even with only strong reference operations, the thread</span></span><br><span class="line">    <span class="comment">// deallocating this may not be the same as the thread deallocating refs.</span></span><br><span class="line">    <span class="comment">// That's OK: all accesses to this happen before its deletion here,</span></span><br><span class="line">    <span class="comment">// and all accesses to refs happen before its deletion in the final decWeak.</span></span><br><span class="line">    <span class="comment">// The destructor can safely access mRefs because either it's deleting</span></span><br><span class="line">    <span class="comment">// mRefs itself, or it's running entirely before the final mWeak decrement.</span></span><br><span class="line">    refs-&gt;decWeak(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>removeStrongRef()也是一个空实现。</p><p>fetch_sub对对象的计数减1，如果c == 1，即没有其它引用了，先调用onLastStrongRef，与onFirstRef对应，也可以自定义。</p><p>接下来先看一个枚举：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Flags for extendObjectLifetime()</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        OBJECT_LIFETIME_STRONG  = <span class="number">0</span>x0000,</span><br><span class="line">        OBJECT_LIFETIME_WEAK    = <span class="number">0</span>x0001,</span><br><span class="line">        OBJECT_LIFETIME_MASK    = <span class="number">0</span>x0001</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p> 这个枚举量是用来控制对象生命周期的，如果设置为OBJECT_LIFETIME_STRONG表示，对象如果强引用计数器为0，就表示生命周期终止，需要delete，如果设置为OBJECT_LIFETIME_WEAK,表示，只有当弱引用和强引用计数器都为0时，才会delete对象。</p><p><code>if ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG)</code> 判断对象的生命周期类型，如果是OBJECT_LIFETIME_STRONG,那么会直接delete自己。delete会调用析构函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RefBase::~RefBase()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRefs-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed)</span><br><span class="line">            == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we never acquired a strong (and/or weak) reference on this object.</span></span><br><span class="line">        <span class="keyword">delete</span> mRefs;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// life-time of this object is extended to WEAK, in</span></span><br><span class="line">        <span class="comment">// which case weakref_impl doesn't out-live the object and we</span></span><br><span class="line">        <span class="comment">// can free it now.</span></span><br><span class="line">        <span class="keyword">int32_t</span> flags = mRefs-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; OBJECT_LIFETIME_MASK) != OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="comment">// It's possible that the weak count is not 0 if the object</span></span><br><span class="line">            <span class="comment">// re-acquired a weak reference in its destructor</span></span><br><span class="line">            <span class="keyword">if</span> (mRefs-&gt;mWeak.load(<span class="built_in">std</span>::memory_order_relaxed) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> mRefs;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for debugging purposes, clear this.</span></span><br><span class="line">    <span class="keyword">const_cast</span>&lt;weakref_impl*&amp;&gt;(mRefs) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该对象从没有过强引用，释放mRefs，如果当前对象生命周期是受弱引用控制的，那么只有在弱引用计数为0的时候，才会去销毁mRefs。</p><p>然后析构函数中做了一件很重要的事情，释放mRefs计数对象（我们在构造函数的时候new的，所以需要确保释放）。</p><p>回到decStrong中，最后调用了refs-&gt;decWeak(id),将弱引用-1。</p><p>mWeak.fetch_sub将弱引用减1，如果c != 1，说明还有弱引用，不用再进一步处理。如果等于1，就说明已经没有弱引用了，也说明了没有强引用了（一个对象的弱引用计数一定大于等于它的强引用计数），然后就需要判断是否需要释放该对象了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::weakref_type::decWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    impl-&gt;removeWeakRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = impl-&gt;mWeak.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release);</span><br><span class="line">    ALOG_ASSERT(c &gt;= <span class="number">1</span>, <span class="string">"decWeak called on %p too many times"</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> flags = impl-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    <span class="comment">// 1、生命周期受强引用计数控制</span></span><br><span class="line">    <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">        <span class="comment">// This is the regular lifetime case. The object is destroyed</span></span><br><span class="line">        <span class="comment">// when the last strong reference goes away. Since weakref_impl</span></span><br><span class="line">        <span class="comment">// outlive the object, it is not destroyed in the dtor, and</span></span><br><span class="line">        <span class="comment">// we'll have to do it here.</span></span><br><span class="line">        <span class="comment">//2、没有被强引用引用过</span></span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed)</span><br><span class="line">                == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">            <span class="comment">// Special case: we never had a strong reference, so we need to</span></span><br><span class="line">            <span class="comment">// destroy the object now.</span></span><br><span class="line">            <span class="comment">// 释放对象</span></span><br><span class="line">            <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ALOGV("Freeing refs %p of old RefBase %p\n", this, impl-&gt;mBase);</span></span><br><span class="line">            <span class="comment">// 只释放内部的引用计数器对象</span></span><br><span class="line">            <span class="keyword">delete</span> impl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This is the OBJECT_LIFETIME_WEAK case. The last weak-reference</span></span><br><span class="line">        <span class="comment">// is gone, we can destroy the object.</span></span><br><span class="line">        <span class="comment">// 如果对象生命周期受到弱引用控制，那么当弱引用为0时，delete impl-&gt;mBase</span></span><br><span class="line">        impl-&gt;mBase-&gt;onLastWeakRef(id);</span><br><span class="line">        <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弱指针"><a href="#弱指针" class="headerlink" title="弱指针"></a>弱指针</h2><p>弱指针使用的引用计数类同样是RefBase类，实现类是wp<t></t></p><p><code>system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> RefBase::weakref_type weakref_type;</span><br><span class="line">    </span><br><span class="line">    inline wp() : m_ptr(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    wp(T* other);</span><br><span class="line">    wp(<span class="keyword">const</span> wp&lt;T&gt;&amp; other);</span><br><span class="line">    wp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(<span class="keyword">const</span> wp&lt;U&gt;&amp; other);</span><br><span class="line"></span><br><span class="line">    ~wp();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line"></span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (T* other);</span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> wp&lt;T&gt;&amp; other);</span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> wp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_object_and_refs</span><span class="params">(T* other, weakref_type* refs)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// promotion to sp</span></span><br><span class="line">    </span><br><span class="line">    sp&lt;T&gt; promote() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Accessors</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  weakref_type* <span class="title">get_refs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_refs; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  T* <span class="title">unsafe_get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Operators</span></span><br><span class="line"></span><br><span class="line">    COMPARE_WEAK(==)</span><br><span class="line">    COMPARE_WEAK(!=)</span><br><span class="line">    COMPARE_WEAK(&gt;)</span><br><span class="line">    COMPARE_WEAK(&lt;)</span><br><span class="line">    COMPARE_WEAK(&lt;=)</span><br><span class="line">    COMPARE_WEAK(&gt;=)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) &amp;&amp; (m_refs == o.m_refs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_ptr == o.m_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &gt; o.m_refs) : (m_ptr &gt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &gt; o.m_refs) : (m_ptr &gt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &lt; o.m_refs) : (m_ptr &lt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &lt; o.m_refs) : (m_ptr &lt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_refs != o.m_refs; &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> == (o); &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &gt; (o); &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &gt; (o); &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &lt; (o); &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &lt; (o); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">sp</span>;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">wp</span>;</span></span><br><span class="line"></span><br><span class="line">    T*              m_ptr;</span><br><span class="line">    weakref_type*   m_refs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>wp<t>类的定义和sp<t>其实是比较接近的，最大的区别在于wp<t> 不仅保存了 T的指针 m_ptr，而且保存了T中引用计数的指针m_refs。</t></t></t></p><p>弱指针和强指针有一个很大的区别，弱指针不可以直接操作它所引用的对象，因为它所引用的对象可能是不受弱引用计数器控制的，即它所引用的对象有可能是一个无效的对象。实现方式就在于弱指针类没有重载*和-&gt;操作符号，而强指针重载了这两个操作符号。如果需要操作一个弱指针所引用的对象，就需要将弱指针升级为强指针。</p><p>在wp的构造函数中，会调用createWeak方法，createWeak调用incWeak增加弱引用计数，返回mRefs对象指针，构造函数中将mRefs存入m_refs中。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">wp&lt;T&gt;::wp(T* other)</span><br><span class="line">    : m_ptr(other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (other) m_refs = other-&gt;createWeak(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//system/core/libutils/RefBase.cpp</span></span><br><span class="line">RefBase::weakref_type* RefBase::createWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    mRefs-&gt;incWeak(id);</span><br><span class="line">    <span class="keyword">return</span> mRefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wp的析构函数则调用decWeak减少引用计数，具体上面已经讲过。</p><p>接下来就是弱指针的重点，如何将弱指针升级为强指针。该过程通过调用成员函数promote实现。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt; wp&lt;T&gt;::promote() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;T&gt; result;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr &amp;&amp; m_refs-&gt;attemptIncStrong(&amp;result)) &#123;</span><br><span class="line">        result.set_pointer(m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看下attemptIncStrong方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> RefBase::weakref_type::attemptIncStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    incWeak(id); <span class="comment">//增加弱引用计数一次</span></span><br><span class="line">    </span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">int32_t</span> curCount = impl-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed); <span class="comment">//获取当前强引用计数器的值</span></span><br><span class="line"></span><br><span class="line">    ALOG_ASSERT(curCount &gt;= <span class="number">0</span>,</span><br><span class="line">            <span class="string">"attemptIncStrong called on %p after underflow"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前已经有其他强引用，那么对象一定存在，所以就试着将强引用引用计数+1</span></span><br><span class="line">    <span class="keyword">while</span> (curCount &gt; <span class="number">0</span> &amp;&amp; curCount != INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we're in the easy/common case of promoting a weak-reference</span></span><br><span class="line">        <span class="comment">// from an existing strong reference.</span></span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;mStrong.compare_exchange_weak(curCount, curCount+<span class="number">1</span>,</span><br><span class="line">                <span class="built_in">std</span>::memory_order_relaxed)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the strong count has changed on us, we need to re-assert our</span></span><br><span class="line">        <span class="comment">// situation. curCount was updated by compare_exchange_weak.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果当前没有强引用的</span></span><br><span class="line">    <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span> || curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we're now in the harder case of either:</span></span><br><span class="line">        <span class="comment">// - there never was a strong reference on us</span></span><br><span class="line">        <span class="comment">// - or, all strong references have been released</span></span><br><span class="line">        <span class="keyword">int32_t</span> flags = impl-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="comment">//对象生命周期受强引用控制</span></span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="comment">// this object has a "normal" life-time, i.e.: it gets destroyed</span></span><br><span class="line">            <span class="comment">// when the last strong reference goes away</span></span><br><span class="line">            <span class="comment">//有过强引用</span></span><br><span class="line">            <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// the last strong-reference got released, the object cannot</span></span><br><span class="line">                <span class="comment">// be revived.</span></span><br><span class="line">                <span class="comment">//弱引用-1作回退</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// here, curCount == INITIAL_STRONG_VALUE, which means</span></span><br><span class="line">            <span class="comment">// there never was a strong-reference, so we can try to</span></span><br><span class="line">            <span class="comment">// promote this object; we need to do that atomically.</span></span><br><span class="line">            <span class="comment">// 强引用计数等于初始值，表示对象还没有强引用，自然也没有被销毁，可以转换，所以强引用+1，这里+1之后的值并不是1，而是     1&lt;&lt;28，所以在最后fetch_sub减掉了INITIAL_STRONG_VALUE</span></span><br><span class="line">            <span class="keyword">while</span> (curCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (impl-&gt;mStrong.compare_exchange_weak(curCount, curCount+<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">std</span>::memory_order_relaxed)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// the strong count has changed on us, we need to re-assert our</span></span><br><span class="line">                <span class="comment">// situation (e.g.: another thread has inc/decStrong'ed us)</span></span><br><span class="line">                <span class="comment">// curCount has been updated.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// promote() failed, some other thread destroyed us in the</span></span><br><span class="line">                <span class="comment">// meantime (i.e.: strong count reached zero).</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// this object has an "extended" life-time, i.e.: it can be</span></span><br><span class="line">            <span class="comment">// revived from a weak-reference only.</span></span><br><span class="line">            <span class="comment">// Ask the object's implementation if it agrees to be revived</span></span><br><span class="line">            <span class="comment">// 询问是否允许升级到强指针，默认返回true表示允许，但是部分对象可能不允许做弱引用升级（重写该方法，返回false即可），如果不允许，那么久弱引用-1（回退第一步操作），直接然后返回false。如果允许弱引用升级，那么就强引用+1。</span></span><br><span class="line">            <span class="keyword">if</span> (!impl-&gt;mBase-&gt;onIncStrongAttempted(FIRST_INC_STRONG, id)) &#123;</span><br><span class="line">                <span class="comment">// it didn't so give-up.</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// grab a strong-reference, which is always safe due to the</span></span><br><span class="line">            <span class="comment">// extended life-time.</span></span><br><span class="line">            curCount = impl-&gt;mStrong.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">            <span class="comment">// If the strong reference count has already been incremented by</span></span><br><span class="line">            <span class="comment">// someone else, the implementor of onIncStrongAttempted() is holding</span></span><br><span class="line">            <span class="comment">// an unneeded reference.  So call onLastStrongRef() here to remove it.</span></span><br><span class="line">            <span class="comment">// (No, this is not pretty.)  Note that we MUST NOT do this if we</span></span><br><span class="line">            <span class="comment">// are in fact acquiring the first reference.</span></span><br><span class="line">            <span class="keyword">if</span> (curCount != <span class="number">0</span> &amp;&amp; curCount != INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">                impl-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">    impl-&gt;addStrongRef(id);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"attemptIncStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, curCount);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// curCount is the value of mStrong before we incremented it.</span></span><br><span class="line">    <span class="comment">// Now we need to fix-up the count if it was INITIAL_STRONG_VALUE.</span></span><br><span class="line">    <span class="comment">// This must be done safely, i.e.: handle the case where several threads</span></span><br><span class="line">    <span class="comment">// were here in attemptIncStrong().</span></span><br><span class="line">    <span class="comment">// curCount &gt; INITIAL_STRONG_VALUE is OK, and can happen if we're doing</span></span><br><span class="line">    <span class="comment">// this in the middle of another incStrong.  The subtraction is handled</span></span><br><span class="line">    <span class="comment">// by the thread that started with INITIAL_STRONG_VALUE.</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果之前没有过强引用，这里需要在强引用计数上减去1&lt;&lt;28。</span></span><br><span class="line">    <span class="keyword">if</span> (curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        impl-&gt;mStrong.fetch_sub(INITIAL_STRONG_VALUE,</span><br><span class="line">                <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中通常会使用引用计数来维护对象的生命周期。&lt;/p&gt;
&lt;p&gt;每当有一个指针指向了一个new出来的对象时，就对这个对象的引用计数增加1，每当有一个指针不再使用这个对象时，就对这个对象的引用计数减少1，每次减1之后，如果发现引用计数值为0时，那么，就要delete这个对象了
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++ 引用</title>
    <link href="http://yoursite.com/2020/11/30/C-%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/30/C-引用/</id>
    <published>2020-11-30T02:31:48.000Z</published>
    <updated>2020-11-30T02:55:50.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-引用"><a href="#C-引用" class="headerlink" title="C++ 引用"></a>C++ 引用</h1><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><h3 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h3><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><h3 id="创建引用"><a href="#创建引用" class="headerlink" title="创建引用"></a>创建引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明引用变量</span></span><br><span class="line">    <span class="keyword">int</span> &amp;c = a;</span><br><span class="line">    <span class="keyword">double</span> &amp;d = b;</span><br><span class="line"></span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b = <span class="number">30.0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"d = "</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">c = <span class="number">20</span></span><br><span class="line">d = <span class="number">30</span></span><br></pre></td></tr></table></figure><p>在这些声明中，&amp; 读作<strong>引用</strong>。因此，第一个声明可以读作 “c 是一个初始化为 a 的整型引用”，第二个声明可以读作 “d 是一个初始化为 b 的 double 型引用”。</p><h3 id="把引用作为参数（引用传递）"><a href="#把引用作为参数（引用传递）" class="headerlink" title="把引用作为参数（引用传递）"></a>把引用作为参数（引用传递）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">    swap(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">    x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">    y = temp; <span class="comment">/* 把 x 赋值给 y  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">交换前，a 的值：<span class="number">100</span>交换前，b 的值：<span class="number">200</span></span><br><span class="line">交换后，a 的值：<span class="number">200</span>交换后，b 的值：<span class="number">100</span></span><br></pre></td></tr></table></figure><p>被调函数的形参虽然也作为局部变量在栈中开辟了内存空间，但在栈中放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被间接寻址，即通过栈中的存放的地址访问主调函数中的中的实参变量（相当于一个人有两个名字），因此形参在任意改动都直接影响到实参。</p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">    swap(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">    x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">    y = temp; <span class="comment">/* 把 x 赋值给 y  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">交换前，a 的值：<span class="number">100</span>交换前，b 的值：<span class="number">200</span></span><br><span class="line">交换后，a 的值：<span class="number">100</span>交换后，b 的值：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>形参时实参的拷贝，改变函数形参并不影响函数外部的实参，这是最常用的一种传递方式，也是最简单的一种传递方式。只需要传递参数，返回值是return考虑的；使用值传递这种方式，调用函数不对实参进行操作，也就是说，即使形参的值发生改变，实参的值也完全不受影响。</p><h3 id="把引用作为返回值"><a href="#把引用作为返回值" class="headerlink" title="把引用作为返回值"></a>把引用作为返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> vals[] = &#123;<span class="number">10.1</span>, <span class="number">12.6</span>, <span class="number">33.1</span>, <span class="number">24.1</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> &amp;<span class="title">setValues</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> vals[i];   <span class="comment">// 返回第 i 个元素的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要调用上面定义函数的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"改变前的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"vals["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vals[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setValues(<span class="number">1</span>) = <span class="number">20.23</span>; <span class="comment">// 改变第 2 个元素</span></span><br><span class="line">    setValues(<span class="number">3</span>) = <span class="number">70.8</span>;  <span class="comment">// 改变第 4 个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"改变后的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"vals["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vals[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">改变前的值</span><br><span class="line">vals[<span class="number">0</span>] = <span class="number">10.1</span></span><br><span class="line">vals[<span class="number">1</span>] = <span class="number">12.6</span></span><br><span class="line">vals[<span class="number">2</span>] = <span class="number">33.1</span></span><br><span class="line">vals[<span class="number">3</span>] = <span class="number">24.1</span></span><br><span class="line">vals[<span class="number">4</span>] = <span class="number">50</span></span><br><span class="line">改变后的值</span><br><span class="line">vals[<span class="number">0</span>] = <span class="number">10.1</span></span><br><span class="line">vals[<span class="number">1</span>] = <span class="number">20.23</span></span><br><span class="line">vals[<span class="number">2</span>] = <span class="number">33.1</span></span><br><span class="line">vals[<span class="number">3</span>] = <span class="number">70.8</span></span><br><span class="line">vals[<span class="number">4</span>] = <span class="number">50</span></span><br></pre></td></tr></table></figure><p>setValues(1)和setValues(3)得到的是实际上的实参变量地址，所以setValues(1) = 20.23就是对实际的变量进行修改。</p><p>用引用作函数的返回值的最大的好处是在内存中不产生返回值的副本，会使 C++ 程序更容易阅读和维护。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-引用&quot;&gt;&lt;a href=&quot;#C-引用&quot; class=&quot;headerlink&quot; title=&quot;C++ 引用&quot;&gt;&lt;/a&gt;C++ 引用&lt;/h1&gt;&lt;p&gt;引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量
      
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux_UNIX系统编程手册</title>
    <link href="http://yoursite.com/2020/11/11/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/11/11/Linux-UNIX系统编程手册读书笔记/</id>
    <published>2020-11-11T03:27:30.000Z</published>
    <updated>2020-11-26T01:15:29.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>系统调用是受控的内核入口，借助这一机制，进程可以请求内核以自己的名义去执行某些操作。以应用程序编程接口（API）的形式，内核提供有一系列服务供程序访问。</p><blockquote><ul><li>系统调用将处理器从用户态切换到核心态，以便CPU访问受到保护的内核内存</li><li>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。(程序通过名称来标识系统调用，对这一编号方案往往一无所知)</li><li>每个系统调用可辅之以一套参数，对用户空间(亦即进程的寻你地址空间)与内核空间之间传递的信息加以规范。</li></ul></blockquote><p>从编程角度来看，系统调用和C语言函数的调用很相似。然而，在执行系统调用时，其幕后会经历诸多步骤。以一个具体的硬件平台-x86-32为例，按事件发生的顺序对这些步骤加以分析。</p><ol><li>应用程序调用C语言函数库中的外壳（wrapper）函数，来发起系统调用。</li><li>对系统调用中断处理例程来说，外壳函数必须保证所有的系统调用参数可用，通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。因此，外壳函数会讲上述参数复制到寄存器。</li><li>由于所有系统调用进入内核的方式相同，内核需要去区分每个系统调用。为此外壳函数会讲系统调用编号复制到一个特殊的CPU寄存器（%eax）中。</li><li>外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行系统中断0x80的中断矢量所指向的代码。</li><li>为响应中断0x80，内核会调用system_call()例程来处理这次中断，具体如下：<ul><li>在内核栈中保存寄存器值</li><li>审核系统嗲用编号的有效性</li><li>以系统调用编号对存放所有调用服务例程的列表（内核变量sys_call_table）进行索引，发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。最后，该服务例程会将结果状态放回给system_call()例程</li><li>从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中</li><li>返回至外壳函数，同时将处理器切换回用户态</li></ul></li><li>若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量errno。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统调用是否成功。</li></ol><p>下图以系统调用execve()为例</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/sys_call.png" alt="系统调用"></p><h2 id="1、文件I-O"><a href="#1、文件I-O" class="headerlink" title="1、文件I/O"></a>1、文件I/O</h2><p>所有执行I/O操作的系统嗲用都以文件描述符，一个非负整数(通常是小整数)，来指代打开的文件。文件描述符用以表示所有类型的已打开文件，包括管道(pipe)、FIFO、socket、终端、设备和普通文件。针对每个进程，文件描述符都自成一套。</p><h3 id="1-1通用I-O"><a href="#1-1通用I-O" class="headerlink" title="1.1通用I/O"></a>1.1通用I/O</h3><p>UNIX I/O模型的显著特点之一是其输入/输出的通用性概念。这就意味着使用4个同样的系统调用open()、read()、wrtie()和close()可以对所有类型的文件执行I/O操作，包括终端之类的设备。</p><h3 id="1-2打开一个文件：open"><a href="#1-2打开一个文件：open" class="headerlink" title="1.2打开一个文件：open()"></a>1.2打开一个文件：open()</h3><p>open()调用既能打开一个已存在的文件，也能创建并打开一个新文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname,<span class="keyword">int</span> flags,...<span class="comment">/* mode_t mode*/</span>)</span></span>;</span><br><span class="line">             </span><br><span class="line">                                              Return file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>参数flags为位掩码，用于制定文件的访问模式，可选下表所示的常量之一。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/UNIX_IO_mode.png" alt="系统调用"></p><p>open函数使用的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只读方式打开已存在的文件</span></span><br><span class="line">fd = open(<span class="string">"startup"</span>,o_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写方式打开或创建文件，清空文件内容</span></span><br><span class="line">fd = open(<span class="string">"myfile"</span>,O_RD_WD | O_CREAT | O_TRUNNC, S_IRUSR | S_IWUSR);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开或创建只写的文件，清空文件内容，总在文件尾部追加数据</span></span><br><span class="line">fd = open(<span class="string">"w.log"</span>,O_WRONLY | O_CREAT | O_TRUNNC | O_APPEND, S_IRUSR | S_IWUSR);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br></pre></td></tr></table></figure><p><strong>open()中flags参数</strong></p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/flags1.png" alt=""></p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/flags2.png" alt=""></p><h3 id="1-3读取文件内容：read"><a href="#1-3读取文件内容：read" class="headerlink" title="1.3读取文件内容：read()"></a>1.3读取文件内容：read()</h3><p>read()系统调用从文件描述符fd所指代的打开文件中读取数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> count);</span><br><span class="line">Returns number of bytes read,<span class="number">0</span>on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>count 参数指定最多能读取的字节数。buffer参数提供用来存放输入数据的内存缓冲区地址。缓冲区至少有count个字节。</p><h3 id="1-4数据写入文件：write"><a href="#1-4数据写入文件：write" class="headerlink" title="1.4数据写入文件：write()"></a>1.4数据写入文件：write()</h3><p>write()系统调用将数据写入一个已打开的文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> count);</span><br><span class="line">Returns number of bytes wrttten,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h3 id="1-5关闭文件：close"><a href="#1-5关闭文件：close" class="headerlink" title="1.5关闭文件：close()"></a>1.5关闭文件：close()</h3><p>close()系统调用关闭一个打开的文件描述符，并将其释放回调用进程，供该进程继续使用。当一进程终止时，将自动关闭其已打开的所有文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line">              Returns <span class="number">0</span> on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h3 id="1-6改变文件偏移量：lseek"><a href="#1-6改变文件偏移量：lseek" class="headerlink" title="1.6改变文件偏移量：lseek()"></a>1.6改变文件偏移量：lseek()</h3><p>对于每个打开的文件，系统内核会记录其文件偏移量，有时也将文件偏移量称为读写偏移量或指针。文件偏移量是指执行下一个read()或write()操作的文件起始位置，会以相对于文件头部起始点的文件当前位置脸表示。文件第一个字节的偏移量为0。</p><p>文件打开时，会将文件偏移量设置为指向文件开始，以后每次read()或write()调用将自动对其进行调整，以指向已读或已读数据后的下一字节。因此，连续read()或write()调用将按顺序递进，对文件进行操作。</p><p>针对文件描述符fd参数所指代的已打开文件，lseek()系统调用依照offset和whence参数调整该文件的偏移量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">off_t</span> lseek(<span class="keyword">int</span> fd,<span class="keyword">off_t</span> offset,<span class="keyword">int</span> whence);</span><br><span class="line">Returns <span class="keyword">new</span> file offset <span class="keyword">if</span> successful,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>offset参数指定了一个以字节为单位的数值。whence参数则表明应参照哪个基点来解释offset参数，应为下列其中之一：</p><p><strong>SEEK_SET:</strong> </p><p>​            将文件偏移量设置为从文件头部起始点开始的offset个字节。</p><p><strong>SEEK_CUR：</strong></p><p>​            相对于当前文件偏移量，将文件偏移量调整offset个字节。</p><p><strong>SEEK_END：</strong></p><p>​            将文件偏移量设置为起始于文件尾部的offset个字节。也就是说，offset参数应该从文件最后一个字节之后的下一个字节算起。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/lseek.png" alt=""></p><p>####文件空洞</p><p>如果程序的文件偏移量已然跨越了文件结尾，然后再执行I/O操作，read()会返回0，表示文件结尾。write()函数可以在文件结尾后的任意位置写入数据。</p><p>从文件结尾后到新写入数据间的这段空间被称为文件空洞。从编程角度看，文件空洞中是存在字节的，读取空洞将返回以0（空字节）填充的缓冲区。</p><p>然而，文件空洞不占用任何磁盘空间。直到后续某个时点，在文件空洞中写入了数据，文件系统才会为之分配磁盘块。文件空洞的主要优势在于，与为实际需要的空字节分配磁盘块相比，稀疏填充的文件会占用较少的磁盘空间。 </p><h3 id="1-7通用I-O模型以外的操作：ioctl"><a href="#1-7通用I-O模型以外的操作：ioctl" class="headerlink" title="1.7通用I/O模型以外的操作：ioctl()"></a>1.7通用I/O模型以外的操作：ioctl()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> request,...<span class="comment">/* argp */</span>)</span></span>;</span><br><span class="line"> Value returned on success depends on request,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h2 id="2、深入探究文件I-O"><a href="#2、深入探究文件I-O" class="headerlink" title="2、深入探究文件I/O"></a>2、深入探究文件I/O</h2><h3 id="2-1-原子操作和竞争条件"><a href="#2-1-原子操作和竞争条件" class="headerlink" title="2.1 原子操作和竞争条件"></a>2.1 原子操作和竞争条件</h3><p>所有系统调用都是以原子操作方式执行的。内核保证了某系统调用中的所有步骤会作为独立操作而一次性加以执行，其间不会为其它进程或线程所中断。</p><p>原子性是某些操作得以圆满成功的关键所在。特别是它规避了竞争状态。竞争状态是这样一种情形：操作共享资源的两个进程或线程，其结果取决于一个无法预期的顺序，即这些进程获得CPU使用权的先后相对顺序。</p><p><strong>以独占方式创建一个文件</strong></p><p>当同时指定O_EXCL与O_CREAT作为open()的标志位时，如果要打开的文件已经存在，则open()将返回一个错误。这提供了一种机制，保证进程是打开文件的创建者。对文件是否存在的检查和创建文件属于同一原子操作。而当代码中没有使用O_EXCL标志时。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/Atom.png" alt=""></p><p>如果两个进程如上图所示流程运行，两个进程都会声称自己以独占方式创建了文件。</p><p>由于第一个进程在检查文件是否存在和创建文件之间发生了中断，造成两个进程都声称自己是文件的创建者。结合O_CREAT和O_EXCL标志来一次性调用open()可以防止这种情况，因为这确保了检查文件和创建文件的步骤属于一个单一的原子(不可中断的)操作。</p><h3 id="2-2-文件控制操作：fcntl"><a href="#2-2-文件控制操作：fcntl" class="headerlink" title="2.2 文件控制操作：fcntl()"></a>2.2 文件控制操作：fcntl()</h3><p>fcntl()系统调用对一个打开的文件描述符执行一系列控制操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> cmd,...)</span></span>;</span><br><span class="line">Return on success depends on cmd,<span class="keyword">or</span> <span class="number">-1</span> onn error</span><br></pre></td></tr></table></figure><p>cmd参数所支持的操作范围很广，下面会加以研讨。</p><h3 id="2-3-打开文件的状态标志"><a href="#2-3-打开文件的状态标志" class="headerlink" title="2.3 打开文件的状态标志"></a>2.3 打开文件的状态标志</h3><p>fcntl()的用途之一是针对一个打开的文件，获取或修改其访问模式和状态标志(这些值是通过指定open()调用的flag参数来设置的)。要获取这些设置，应将fcntl()的cmd参数设置为F_GETFL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flags，accessMode;</span><br><span class="line">flags = fcntl(fd,F_GETFL);</span><br><span class="line"><span class="keyword">if</span>(flage == <span class="number">-1</span>)</span><br><span class="line">   errRxit(<span class="string">"fcntl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flags &amp; O_SYNC)  <span class="comment">// 测试文件是否以同步写方式打开</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"writes are synchronized\n"</span>);</span><br></pre></td></tr></table></figure><p>判定文件的访问模式有一点复杂，这是因为O_RDONLY(0)、O_WRONLY(1)和O_RDWR(2)这3个常量并不与打开文件状态标志中的单个比特位对应。因此，要判定访问模式，需使用掩码O_ACCMODE与flag相与，将结果与3个常量进行比对，示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accessMode = flags &amp; O_ACCMODE;</span><br><span class="line"><span class="keyword">if</span>(accessMode == O_WRONLY || accessMode == O_RDWR)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"file is writable\n"</span>);</span><br></pre></td></tr></table></figure><p>可以使用fcntl()的F_SETFL 命令来修改打开文件的某些状态标志。允许更改的标志有O_APPEND、O_NONBLOCK、O_NOATIME、O_ASYNC和O_DIRECT。</p><p>使用fcntl()修改文件状态标志，尤其适用如下场景。</p><ul><li>文件不是有调用程序打开的，所以程序也无法使用open()调用来控制文件的状态标志。</li><li>文件描述符的获取是通过open()之外的系统调用。比如pipe()调用，该调用创建一个管道，并返回两个文件描述符分别对应管道的两端。再比如socket()调用，该调用创建一个套接字并返回指向该套机诶字的文件描述符。</li></ul><p>例如，为了添加O_APPEND标志：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">flags  = fnctl(fd,F_GETFL);</span><br><span class="line"><span class="keyword">if</span>(flags == <span class="number">-1</span>)</span><br><span class="line"> errExit(<span class="string">"fcntl"</span>);</span><br><span class="line">flags |= O_APPEND;</span><br><span class="line"><span class="keyword">if</span>(fcntl(fd,F_SETFL,flags) == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"fcntl"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-4-文件描述符和打开文件之间的关系"><a href="#2-4-文件描述符和打开文件之间的关系" class="headerlink" title="2.4 文件描述符和打开文件之间的关系"></a>2.4 文件描述符和打开文件之间的关系</h3><p>到目前为止，文件描述符和打开文件之前似乎呈现出一一对应的关系。然而，实际并非如此。多个文件描述符指向同一打开文件，这既有可能，也属必要。这些文件描述符可在相同或不同的进程中打开。</p><p>要理解具体情况如何，需要查看由内核维护的3个数据结构。</p><ul><li>进程级的文件描述符表。</li><li>系统级的打开文件表。</li><li>文件系统的i-node表。</li></ul><p>针对每个进程，内核为其维护打开文件的描述符(open file descriptor)表。该表的每一条目都记录了单个文件描述符的相关信息。</p><p>内核对所有打开的文件维护有一个系统级的描述表格(opeb file description table)。也可称为打开文件表(open file table)，并将表中各条目称为打开文件句柄(open file handle)。一个打开文件句柄存储了与一个打开文件相关的全部信息.</p><ul><li>当前文件偏移量</li><li>打开文件时所使用的状态标志</li><li>文件访问模式</li><li>与信号驱动I/O相关的设置</li><li>对该文件i-node 对象的引用</li></ul><p>每个文件系统都会为驻留其上的所有文件建立一个i-node表。每个文件的i-node信息</p><ul><li>文件类型和访问权限</li><li>一个指针，指向该文件所持有的锁的列表</li><li>文件的各种属性，包括文件大小以及不同类型操作相关的时间戳</li></ul><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/2_4.png" alt=""></p><h3 id="2-5复制文件描述符"><a href="#2-5复制文件描述符" class="headerlink" title="2.5复制文件描述符"></a>2.5复制文件描述符</h3><p>Bourne shell的I/O重定向语法 2&gt;&amp;1，意在通知shell把标准错误(文件描述符2)重定向到标准输入(文件描述符1)。</p><p>dup()调用复制一个打开的文件描述符oldfd，并返回一个新描述符，二者都指向同一个打开的文件句柄。系统会保证新描述符一定是编号值最低的未用文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>例如：</p><p><code>newfd= dup(1);</code></p><p>在假定正常情况下，shell已经代表程序打开了文件描述符0，1和2，且没有其它描述符在用，dup()调用会创建文件描述符1的副本，返回的文件描述符编号值为3。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd，<span class="keyword">int</span> newfd)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>dup2()系统调用会为oldfd参数所指定的文件描述符创建副本，其编号由newfd参数指定。如果由newfd参数所指定的文件描述符之前已经打开，那么dup2()会先将其关闭。</p><p>fcntl()的F_DUPFD操作是复制文件描述符的另一接口，更具灵活性。</p><p><code>newfd = fcntl(oldfd,F_DUPFD,startfd);</code></p><p>该调用为oldfd创建一个副本，且将使用大于等于startfd的最小未用值作为描述符编号。</p><p>dup3()系统调用完成的工作与dup2()相同，只是增加了一个附加参数flag，这是一个可以修改系统调用行为的位掩码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GUN_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup3</span><span class="params">(<span class="keyword">int</span> oldfd，<span class="keyword">int</span> newfd,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>目前，dup3()只支持一个标志O_CLOEXEC,这将促使内核为新文件描述符设置close-on-exec标志(FD_CLOEXEC)。</p><h3 id="2-6-在文件特定偏移量处的I-O：pread-和pwrite"><a href="#2-6-在文件特定偏移量处的I-O：pread-和pwrite" class="headerlink" title="2.6 在文件特定偏移量处的I/O：pread()和pwrite()"></a>2.6 在文件特定偏移量处的I/O：pread()和pwrite()</h3><p>系统调用pread()和pwrite()完成与read()和write()相类似的工作，只是前两者会在offset参数所指定的位置进行文件I/O操作，而非始于文件的当前偏移量处，且它们不会改变文件的当前偏移量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> pread(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buf,<span class="keyword">size_t</span> count,<span class="keyword">off_t</span> offset);</span><br><span class="line"> Returns number of bytes read,<span class="number">0</span> on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br><span class="line"><span class="keyword">ssize_t</span> pwrite(<span class="keyword">int</span> fd,<span class="keyword">const</span> <span class="keyword">void</span> *buf,<span class="keyword">size_t</span> count,<span class="keyword">off_t</span> offset);</span><br><span class="line">       Returns number of bytes written,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>pread()调用等于将如下调用纳入同一原子操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">off_t</span> orig;</span><br><span class="line"></span><br><span class="line">orig = lseek(fd,<span class="number">0</span>,SEEK_CUR);  <span class="comment">//保存当前偏移量</span></span><br><span class="line">lseek(fd,offset,SEEK_SET);</span><br><span class="line">s= read(fd,buf,len);</span><br><span class="line">lseek(fd,orig,SEEK_SET); <span class="comment">//恢复原本的偏移量</span></span><br></pre></td></tr></table></figure><h3 id="2-7-分散输入和集中输出-Scatter-Gather-I-O-readv-和writev"><a href="#2-7-分散输入和集中输出-Scatter-Gather-I-O-readv-和writev" class="headerlink" title="2.7 分散输入和集中输出(Scatter-Gather I/O):readv()和writev()"></a>2.7 分散输入和集中输出(Scatter-Gather I/O):readv()和writev()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> readv(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec *iov,<span class="keyword">int</span> iovcnt);</span><br><span class="line">Returns number of bytes read,<span class="number">0</span> on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> writev(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec *iov,<span class="keyword">int</span> iovcnt);</span><br><span class="line">Returns number of bytes written,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>readv()实现了分散输入的功能：从文件描述符fd所指代的文件中读取一片连续的字节，然后将其分散放置于iov指定的缓冲区中。这一散置动作从iov[0]开始，一次填满每个缓冲区。</p><p>writev()将iov所指定的所有缓冲区中的数据拼接起来，然后以连续的字节序列写入文件描述符fd所指代的文件中。</p><h3 id="2-8截断文件：truncate-和ftruncate-系统调用"><a href="#2-8截断文件：truncate-和ftruncate-系统调用" class="headerlink" title="2.8截断文件：truncate()和ftruncate()系统调用"></a>2.8截断文件：truncate()和ftruncate()系统调用</h3><p>truncate()和ftruncate()将文件大小设置为length参数指定的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">truncate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname,<span class="keyword">off_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ftruncate</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">off_t</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">Both <span class="keyword">return</span> <span class="number">0</span> on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>若文件当前长度大于参数length，调用将丢弃超出部分，若小于参数length，调用将在文件尾部添加一系列空字节或是一个文件空洞。</p><h3 id="2-9-创建临时文件"><a href="#2-9-创建临时文件" class="headerlink" title="2.9 创建临时文件"></a>2.9 创建临时文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkstemp</span><span class="params">(<span class="keyword">char</span> *tempplate)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>基于调用者提供的模版，mkstemp()函数声称一个唯一文件名并打开该文件，返回一个可用于I/O调用的文件描述符。</p><p>模版参数采用路径名形式，其中最后6个字符必须为XXXXXX。这6个字符将被替换，以保证文件名的唯一性，且修改后的字符串将通过template参数传回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">FILE *<span class="title">tmpfile</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file pointer on success,<span class="keyword">or</span> <span class="literal">NULL</span> on error</span><br></pre></td></tr></table></figure><p>tmpfile()函数执行成功，将返回一个文件流供stdio库函数使用。文件流关闭后将自动删除临时文件。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="3-1进程号和父进程号"><a href="#3-1进程号和父进程号" class="headerlink" title="3.1进程号和父进程号"></a>3.1进程号和父进程号</h3><p>返回调用进程的进程号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpid(<span class="keyword">void</span>);</span><br><span class="line">     </span><br><span class="line">     Always successfully returns peocess ID of caller</span><br></pre></td></tr></table></figure><p>每个进程都有一个创建自己的父进程，getppid()可以获取父进程的进程号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pit_t</span> getppid(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">Always successfully returns peocess ID of parent of caller</span><br></pre></td></tr></table></figure><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统调用&quot;&gt;&lt;a href=&quot;#系统调用&quot; class=&quot;headerlink&quot; title=&quot;系统调用&quot;&gt;&lt;/a&gt;系统调用&lt;/h2&gt;&lt;p&gt;系统调用是受控的内核入口，借助这一机制，进程可以请求内核以自己的名义去执行某些操作。以应用程序编程接口（API）的形式，内核
      
    
    </summary>
    
      <category term="Linux系统" scheme="http://yoursite.com/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI学习-函数动态注册</title>
    <link href="http://yoursite.com/2020/11/09/Android-JNI%E5%87%BD%E6%95%B0%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/"/>
    <id>http://yoursite.com/2020/11/09/Android-JNI函数动态注册/</id>
    <published>2020-11-09T01:46:15.000Z</published>
    <updated>2020-11-10T05:55:31.287Z</updated>
    
    <content type="html"><![CDATA[<p>前面JNI开发相关的也写了几篇博客，对java中native关键字定义的方法进行注册时，都是使用Javah命令生成对应的<code>Java _ 包名 _ 类名 _ 方法名</code>，现在完全可以通过编译器帮我们生成，我们去填对应的逻辑代码即可，这种方式被称为<strong>静态注册</strong>。今天来看一下新的方式：<strong>动态注册</strong></p><p>不同于静态注册中在Java类中定义好native方法后由编译器生成JNI方法，动态注册基本思想是在JNI_Onload()函数中通过JNI中提供的RegisterNatives()方法来将C/C++方法和java方法对应起来, JNI_OnLoad ()函数会在我们调用 System.loadLibrary的时候回调，注册整体流程如下:</p><ol><li>定义Java类中的native方法</li><li>编写C/C++代码, 实现JNI_Onload()方法</li><li>将Java 方法和 C/C++方法通过签名信息对应起来</li><li>通过JavaVM获取JNIEnv, JNIEnv主要用于获取Java类和调用一些JNI提供的方法</li><li>使用类名和对应起来的方法作为参数, 调用JNI提供的函数RegisterNatives()注册方法</li></ol><h3 id="1、Java-Native方法"><a href="#1、Java-Native方法" class="headerlink" title="1、Java Native方法"></a>1、Java Native方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntFromC</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2、C-C-方法"><a href="#2、C-C-方法" class="headerlink" title="2、C/C++方法"></a>2、C/C++方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring <span class="title">returnString</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"I come from C＋＋"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">returnInt</span><span class="params">(JNIEnv *env, jobject instance, jint index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、JNINativeMethod"><a href="#3、JNINativeMethod" class="headerlink" title="3、JNINativeMethod"></a>3、JNINativeMethod</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">"getStringFromC"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span> *) returnString&#125;,</span><br><span class="line">        &#123;<span class="string">"getIntFromC"</span>,    <span class="string">"(I)I"</span>,                 (<span class="keyword">void</span> *) returnInt&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第一个参数对应的native方法名</li><li>第二个参数对应 native方法的描述</li><li>第三个参数对应的c++代码里对应的实现</li></ul><p>通过这个数组将Java层函数和C/C++层代码对应起来</p><h3 id="4、JNI-Onload"><a href="#4、JNI-Onload" class="headerlink" title="4、JNI_Onload"></a>4、JNI_Onload</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *re)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span> **) &amp;env, JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jclass javaClass = env-&gt;FindClass(<span class="string">"com/david/jnitestdemo/MainActivity"</span>);</span><br><span class="line">    <span class="keyword">if</span> (javaClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;RegisterNatives(javaClass, gMethods, <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env-&gt;RegisterNatives(javaClass, gMethods, sizeof(gMethods) / sizeof(gMethods[0])</code></p><p>第一个表示对应jclass，第二个表示JNINativeMethod的数组，第三个是函数的数量</p><p>这样就完成了简单的JNI动态注册Demo</p><p>对比下之前的静态注册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态注册</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_david_jnitestdemo_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line"><span class="function">jstring <span class="title">returnString</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较来说动态注册的代码会清爽一些，虽然多了JNI_OnLoad和JNINativeMethod，但是JNI_OnLoad基本可以只写一次，JNINativeMethod每次有新增函数时才修改，所以个人感觉动态注册写代码会更舒服些，也看个人习惯 ,好了就到这里了。 ^-^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面JNI开发相关的也写了几篇博客，对java中native关键字定义的方法进行注册时，都是使用Javah命令生成对应的&lt;code&gt;Java _ 包名 _ 类名 _ 方法名&lt;/code&gt;，现在完全可以通过编译器帮我们生成，我们去填对应的逻辑代码即可，这种方式被称为&lt;stro
      
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android 理解Context</title>
    <link href="http://yoursite.com/2020/09/03/Android-%E7%90%86%E8%A7%A3Context/"/>
    <id>http://yoursite.com/2020/09/03/Android-理解Context/</id>
    <published>2020-09-03T02:07:17.000Z</published>
    <updated>2020-09-03T10:52:57.797Z</updated>
    
    <content type="html"><![CDATA[<p>接触过Android的小伙伴, 一定不会对Context感到陌生, 有大量的场景使用都离不开Context, 下面列举部分常见场景:</p><ul><li>启动Activity (startActivity)</li><li>启动服务 (startService)</li><li>发送广播 (sendBroadcast), 注册广播接收者 (registerReceiver)</li><li>获取ContentResolver (getContentResolver)</li><li>获取类加载器 (getClassLoader)</li><li>打开或创建数据库 (openOrCreateDatabase)</li><li>获取资源 (getResources)</li><li>…</li></ul><h3 id="Context是什么"><a href="#Context是什么" class="headerlink" title="Context是什么"></a>Context是什么</h3><p>Context一般会被翻译为“上下文”，在Android中应该被翻译为“场景”。</p><p>一个Context意味着一个场景，一个场景就是用户和操作系统交互的一种过程。比如打电话时，场景包括电话程序对应的界面，以及隐藏在界面后的数据。</p><p>从代码来看，Activity类确实是基于Context，Service类也是基于Context。Activity除了基于Context外，还实现了一些其他重要接口，从设计角度上来说，interface仅仅是某些功能，extends才是类的本质，所以Activity和Service的本质就是一个Context。</p><p>Android Context本身是一个抽象类. ContextImpl, Activity, Service, Application这些都是Context的直接或间接子类, 下面通过看看这些类的关系,如下:(图片来源：<a href="http://gityuan.com/2017/04/09/android_context/" target="_blank" rel="noopener">Gityuan</a>)</p><p><img src="/2020/09/03/Android-理解Context/context.jpg" alt=""></p><h3 id="一个应用程序包含多少个Context"><a href="#一个应用程序包含多少个Context" class="headerlink" title="一个应用程序包含多少个Context"></a>一个应用程序包含多少个Context</h3><p>在程序开发中，经常会调用Context的一些方法，这些方法会返回一个全局对象，而不是某个Activity，那一个程序到底有多少个Context对象？比如，Context.getResource()返回该应用程序的Resource对象，无论从哪个Activity中获取，都会返回同一个Resource对象。</p><p>这里可以明确：</p><ul><li>一个Activity就是一个场景(Context)，一个Service也是一个场景，所以，一个程序有多少个Activity和Service，就有多少个Context对象 。</li><li>getResource()等方法确实返回的是同一个全局对象。</li></ul><h3 id="创建Context"><a href="#创建Context" class="headerlink" title="创建Context"></a>创建Context</h3><p>要理解Context, 需要依次来看看四大组件的初始化过程.</p><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><p><code>frameworks/base/core/java/android/app/ActivityThread.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">     ActivityInfo aInfo = r.activityInfo;</span><br><span class="line">     <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">         r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">                 Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//component初始化过程</span></span><br><span class="line">     ComponentName component = r.intent.getComponent();</span><br><span class="line">     <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</span><br><span class="line">         component = r.intent.resolveActivity(</span><br><span class="line">             mInitialApplication.getPackageManager());</span><br><span class="line">         r.intent.setComponent(component);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">         component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</span><br><span class="line">                 r.activityInfo.targetActivity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Activity activity = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</span><br><span class="line">         <span class="comment">//step 2: 创建Activity对象</span></span><br><span class="line">         activity = mInstrumentation.newActivity(</span><br><span class="line">                 cl, component.getClassName(), r.intent);</span><br><span class="line">         StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">         r.intent.setExtrasClassLoader(cl);</span><br><span class="line">         r.intent.prepareToEnterProcess();</span><br><span class="line">         <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">             r.state.setClassLoader(cl);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                 <span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">                 + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//step 3: 创建Application对象</span></span><br><span class="line">         Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</span><br><span class="line">         <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">                 TAG, r + <span class="string">": app="</span> + app</span><br><span class="line">                 + <span class="string">", appName="</span> + app.getPackageName()</span><br><span class="line">                 + <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</span><br><span class="line">                 + <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</span><br><span class="line">                 + <span class="string">", dir="</span> + r.packageInfo.getAppDir());</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//step 4: 创建ContextImpl对象</span></span><br><span class="line">             Context appContext = createBaseContextForActivity(r, activity);</span><br><span class="line">             CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">             Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</span><br><span class="line">             <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 config.updateFrom(r.overrideConfig);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></span><br><span class="line">                     + r.activityInfo.name + <span class="string">" with config "</span> + config);</span><br><span class="line">             Window window = <span class="keyword">null</span>;</span><br><span class="line">             <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                 window = r.mPendingRemoveWindow;</span><br><span class="line">                 r.mPendingRemoveWindow = <span class="keyword">null</span>;</span><br><span class="line">                 r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//step5: 将Application/ContextImpl都attach到Activity对象 [下文详解]</span></span><br><span class="line">             activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                     r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                     r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                     r.referrer, r.voiceInteractor, window);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 activity.mIntent = customIntent;</span><br><span class="line">             &#125;</span><br><span class="line">             r.lastNonConfigurationInstances = <span class="keyword">null</span>;</span><br><span class="line">             activity.mStartedActivity = <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</span><br><span class="line">             <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</span><br><span class="line">                 activity.setTheme(theme);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                 <span class="comment">//step 6: 执行回调onCreate</span></span><br><span class="line">                 mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                     <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                     <span class="string">" did not call through to super.onCreate()"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             r.activity = activity;</span><br><span class="line">             r.stopped = <span class="keyword">true</span>;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 <span class="comment">//执行回调onStart</span></span><br><span class="line">                 activity.performStart();</span><br><span class="line">                 r.stopped = <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="comment">//执行回调onRestoreInstanceState</span></span><br><span class="line">                         mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">                                 r.persistentState);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">                 <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnPostCreate(activity, r.state,</span><br><span class="line">                             r.persistentState);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnPostCreate(activity, r.state);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                         <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                         <span class="string">" did not call through to super.onPostCreate()"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         r.paused = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">         mActivities.put(r.token, r);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                 <span class="string">"Unable to start activity "</span> + component</span><br><span class="line">                 + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> activity;</span><br></pre></td></tr></table></figure><p>startActivity的过程最终会在目标进程执行performLaunchActivity()方法, 该方法主要功能:</p><ol><li>创建对象LoadedApk;</li><li>创建对象Activity;</li><li>创建对象Application;</li><li>创建对象ContextImpl;</li><li>Application/ContextImpl都attach到Activity对象;</li><li>执行onCreate()等回调;</li></ol><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step 1: 创建LoadedApk</span></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line">        Service service = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">             <span class="comment">//step 2: 创建Service对象</span></span><br><span class="line">            service = (Service) cl.loadClass(data.info.name).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//step 3: 创建ContextImpl对象</span></span><br><span class="line">            ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</span><br><span class="line">            context.setOuterContext(service);</span><br><span class="line">          </span><br><span class="line">            <span class="comment">//step 4: 创建Application对象</span></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            <span class="comment">//step 5: 将Application/ContextImpl都attach到Activity对象</span></span><br><span class="line">            service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</span><br><span class="line">                    ActivityManagerNative.getDefault());</span><br><span class="line">            <span class="comment">//step 6: 执行onCreate回调</span></span><br><span class="line">            service.onCreate();</span><br><span class="line">            mServices.put(data.token, service);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManagerNative.getDefault().serviceDoneExecuting(</span><br><span class="line">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程:</p><ol><li>创建对象LoadedApk;</li><li>创建对象Service;</li><li>创建对象ContextImpl;</li><li>创建对象Application;</li><li>Application/ContextImpl分别attach到Service对象;</li><li>执行onCreate()回调;</li></ol><h4 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleReceiver</span><span class="params">(ReceiverData data)</span> </span>&#123;</span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        String component = data.intent.getComponent().getClassName();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line"></span><br><span class="line">        IActivityManager mgr = ActivityManagerNative.getDefault();</span><br><span class="line"></span><br><span class="line">        BroadcastReceiver receiver;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">            data.intent.setExtrasClassLoader(cl);</span><br><span class="line">            data.intent.prepareToEnterProcess();</span><br><span class="line">            data.setExtrasClassLoader(cl);</span><br><span class="line">            <span class="comment">//step 2: 创建BroadcastReceiver对象</span></span><br><span class="line">            receiver = (BroadcastReceiver)cl.loadClass(component).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.i(TAG,</span><br><span class="line">                    <span class="string">"Finishing failed broadcast to "</span> + data.intent.getComponent());</span><br><span class="line">            data.sendFinished(mgr);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Unable to instantiate receiver "</span> + component</span><br><span class="line">                + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//step 3: 创建Application对象</span></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            <span class="comment">//step 4: 创建ContextImpl对象</span></span><br><span class="line">            ContextImpl context = (ContextImpl)app.getBaseContext();</span><br><span class="line">            sCurrentBroadcastIntent.set(data.intent);</span><br><span class="line">            receiver.setPendingResult(data);</span><br><span class="line">            <span class="comment">//step 5: 执行onReceive回调</span></span><br><span class="line">            receiver.onReceive(context.getReceiverRestrictedContext(),</span><br><span class="line">                    data.intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sCurrentBroadcastIntent.set(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (receiver.getPendingResult() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            data.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程:</p><ol><li>创建对象LoadedApk;</li><li>创建对象BroadcastReceiver;</li><li>创建对象Application;</li><li>创建对象ContextImpl;</li><li>执行onReceive()回调;</li></ol><p>说明:</p><ul><li>以上过程是静态广播接收者, 即通过AndroidManifest.xml的标签来申明的BroadcastReceiver;</li><li>如果是动态广播接收者,则不需要再创建那么多对象, 因为动态广播的注册时进程已创建, 基本对象已创建完成. 那么只需要回调BroadcastReceiver的onReceive()方法即可.</li></ul><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IActivityManager.<span class="function">ContentProviderHolder <span class="title">installProvider</span><span class="params">(Context context, IActivityManager.ContentProviderHolder holder, ProviderInfo info, <span class="keyword">boolean</span> noisy, <span class="keyword">boolean</span> noReleaseNeeded, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    ContentProvider localProvider = <span class="keyword">null</span>;</span><br><span class="line">    IContentProvider provider;</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span> || holder.provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context c = <span class="keyword">null</span>;</span><br><span class="line">        ApplicationInfo ai = info.applicationInfo;</span><br><span class="line">        <span class="keyword">if</span> (context.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = context;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInitialApplication != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                mInitialApplication.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = mInitialApplication;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//step 1 &amp;&amp; 2: 创建LoadedApk和ContextImpl对象</span></span><br><span class="line">            c = context.createPackageContext(ai.packageName,Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> java.lang.ClassLoader cl = c.getClassLoader();</span><br><span class="line">        <span class="comment">//step 3: 创建ContentProvider对象</span></span><br><span class="line">        localProvider = (ContentProvider)cl.loadClass(info.name).newInstance();</span><br><span class="line">        provider = localProvider.getIContentProvider();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step 4: ContextImpl都attach到ContentProvider对象 [见小节4.4]</span></span><br><span class="line">        <span class="comment">//step 5: 并执行回调onCreate</span></span><br><span class="line">        localProvider.attachInfo(c, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> retHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ol><li>创建对象LoadedApk;</li><li>创建对象ContextImpl;</li><li>创建对象ContentProvider;</li><li>ContextImpl都attach到ContentProvider对象;</li><li>执行onCreate回调;</li></ol><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//step 2: 创建ContextImpl对象;</span></span><br><span class="line">    <span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 3: 创建Instrumentation</span></span><br><span class="line">    mInstrumentation = <span class="keyword">new</span> Instrumentation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 4: 创建Application对象; </span></span><br><span class="line">    Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</span><br><span class="line">    mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 5: 安装providers</span></span><br><span class="line">    List&lt;ProviderInfo&gt; providers = data.providers;</span><br><span class="line">    installContentProviders(app, providers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 6: 执行Application.Create回调</span></span><br><span class="line">    mInstrumentation.callApplicationOnCreate(app);</span><br></pre></td></tr></table></figure><p>该过程主要功能:</p><ol><li>创建对象LoadedApk</li><li>创建对象ContextImpl;</li><li>创建对象Instrumentation;</li><li>创建对象Application;</li><li>安装providers;</li><li>执行Create回调;</li></ol><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><h4 id="LoadedApk"><a href="#LoadedApk" class="headerlink" title="LoadedApk"></a>LoadedApk</h4><p><code>frameworks/base/core/java/android/app/LoadedApk.java</code></p><ul><li>是ActivityThread中进行四大组件等启动过程中的重要中间变量</li><li><strong>LoadedApk对象是APK文件在内存中的表示</strong>。 Apk文件的相关信息，诸如Apk文件的代码和资源，甚至代码里面的Activity，Service等组件的信息我们都可以通过此对象获取。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadedApk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LoadedApk"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityThread mActivityThread;</span><br><span class="line">    <span class="keyword">final</span> String mPackageName;</span><br><span class="line">    <span class="keyword">private</span> ApplicationInfo mApplicationInfo;</span><br><span class="line">    <span class="keyword">private</span> String mAppDir;</span><br><span class="line">    <span class="keyword">private</span> String mResDir;</span><br><span class="line">    <span class="keyword">private</span> String[] mSplitAppDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mSplitResDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mOverlayDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mSharedLibraries;</span><br><span class="line">    <span class="keyword">private</span> String mDataDir;</span><br><span class="line">    <span class="keyword">private</span> String mLibDir;</span><br><span class="line">    <span class="keyword">private</span> File mDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> File mDeviceProtectedDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> File mCredentialProtectedDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader mBaseClassLoader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mSecurityViolation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mIncludeCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mRegisterPackage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DisplayAdjustments mDisplayAdjustments = <span class="keyword">new</span> DisplayAdjustments();</span><br><span class="line">    <span class="comment">/** WARNING: This may change. Don't hold external references to it. */</span></span><br><span class="line">    Resources mResources;</span><br><span class="line">    <span class="keyword">private</span> ClassLoader mClassLoader;</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, ReceiverDispatcher&gt;&gt; mReceivers</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt; mUnregisteredReceivers</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mServices</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mUnboundServices</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mClientCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create information about a new .apk</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">NOTE:</span> This constructor is called with ActivityThread's lock held,</span></span><br><span class="line"><span class="comment">     * so MUST NOT call back out to the activity manager.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadedApk</span><span class="params">(ActivityThread activityThread, ApplicationInfo aInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">            CompatibilityInfo compatInfo, ClassLoader baseLoader,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> securityViolation, <span class="keyword">boolean</span> includeCode, <span class="keyword">boolean</span> registerPackage)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mActivityThread = activityThread;</span><br><span class="line">        setApplicationInfo(aInfo);</span><br><span class="line">        mPackageName = aInfo.packageName;</span><br><span class="line">        mBaseClassLoader = baseLoader;</span><br><span class="line">        mSecurityViolation = securityViolation;</span><br><span class="line">        mIncludeCode = includeCode;</span><br><span class="line">        mRegisterPackage = registerPackage;</span><br><span class="line">        mDisplayAdjustments.setCompatibilityInfo(compatInfo);</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重要的成员变量<ul><li>ActivityThread mActivityThread</li><li>ApplicationInfo mApplicationInfo;</li><li>String mPackageName;</li><li>ClassLoader mBaseClassLoader;</li><li>以及各种资源路径地址</li></ul></li><li>重要方法<ul><li>生成Application<ul><li>Application makeApplication(boolean forceDefaultAppClass, Instrumentation instrumentation)</li></ul></li><li>生成Resource<ul><li>getResources(ActivityThread mainThread)</li><li>实质上，最后是委托ResourceManager去生成的</li></ul></li></ul></li></ul><h4 id="创建Application"><a href="#创建Application" class="headerlink" title="创建Application"></a>创建Application</h4><p><strong><code>LoadedApk.makeApplication</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Application <span class="title">makeApplication</span><span class="params">(<span class="keyword">boolean</span> forceDefaultAppClass, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保证一个LoadedApk对象只创建一个对应的Application对象</span></span><br><span class="line">    <span class="keyword">if</span> (mApplication != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String appClass = mApplicationInfo.className;</span><br><span class="line">    <span class="keyword">if</span> (forceDefaultAppClass || (appClass == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        appClass = <span class="string">"android.app.Application"</span>; <span class="comment">//设置应用类名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    java.lang.ClassLoader cl = getClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (!mPackageName.equals(<span class="string">"android"</span>)) &#123;</span><br><span class="line">        initializeJavaContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建ContextImpl对象</span></span><br><span class="line">    ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//创建Application对象, 并将appContext attach到新创建的Application</span></span><br><span class="line">    Application app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);</span><br><span class="line">    appContext.setOuterContext(app);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    mActivityThread.mAllApplications.add(app);</span><br><span class="line">    mApplication = app; <span class="comment">//将刚创建的app赋值给mApplication</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Application <span class="title">newApplication</span><span class="params">(Class&lt;?&gt; clazz, Context context)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Application app = (Application)clazz.newInstance(); <span class="comment">//创建Application</span></span><br><span class="line">    app.attach(context); <span class="comment">//执行attach操作</span></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建ContextImpl"><a href="#创建ContextImpl" class="headerlink" title="创建ContextImpl"></a>创建ContextImpl</h4><p>创建ContextImpl的方式有多种, 不同的组件初始化调用不同的方法,如下:</p><ul><li>Activity: 调用createBaseContextForActivity初始化;</li><li>Service/Application: 调用createAppContext初始化;</li><li>Provider: 调用createPackageContext初始化;</li><li>BroadcastReceiver: 直接从Application.getBaseContext()来获取ContextImpl对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextImpl</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ActivityThread mMainThread;</span><br><span class="line">    <span class="keyword">final</span> LoadedApk mPackageInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder mActivityToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mBasePackageName;</span><br><span class="line">    <span class="keyword">private</span> Context mOuterContext;</span><br><span class="line">    <span class="comment">//缓存Binder服务</span></span><br><span class="line">    <span class="keyword">final</span> Object[] mServiceCache = SystemServiceRegistry.createServiceCache();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContextImpl</span><span class="params">(ContextImpl container, ActivityThread mainThread, LoadedApk packageInfo, IBinder activityToken, UserHandle user, <span class="keyword">boolean</span> restricted, Display display, Configuration overrideConfiguration, <span class="keyword">int</span> createDisplayWithId)</span> </span>&#123;</span><br><span class="line">        mOuterContext = <span class="keyword">this</span>; <span class="comment">//ContextImpl对象</span></span><br><span class="line">        mMainThread = mainThread; <span class="comment">// ActivityThread赋值</span></span><br><span class="line">        mPackageInfo = packageInfo; <span class="comment">// LoadedApk赋值</span></span><br><span class="line">        mBasePackageName = packageInfo.mPackageName; <span class="comment">//mBasePackageName等于“android”</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context-attach"><a href="#Context-attach" class="headerlink" title="Context attach"></a>Context attach</h3><h4 id="Activity-1"><a href="#Activity-1" class="headerlink" title="Activity"></a>Activity</h4><p><code>frameworks/base/core/java/android/app/Activity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread, Instrumentation instr, IBinder token, <span class="keyword">int</span> ident, Application application, Intent intent, ActivityInfo info, CharSequence title, Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances, Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//调用父类方法设置mBase.</span></span><br><span class="line">    mUiThread = Thread.currentThread();</span><br><span class="line">    mMainThread = aThread;</span><br><span class="line">    mApplication = application;</span><br><span class="line">    mIntent = intent;</span><br><span class="line">    mComponent = intent.getComponent();</span><br><span class="line">    mActivityInfo = info;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将新创建的ContextImpl赋值到父类ContextWrapper.mBase变量。mApplication赋值。</p><p><code>frameworks/base/core/java/android/view/ContextThemeWrapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context newBase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(newBase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frameworks/base/core/java/android/content/ContextWrapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextWrapper</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    Context mBase;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextWrapper</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        mBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the base context for this ContextWrapper.  All calls will then be</span></span><br><span class="line"><span class="comment">     * delegated to the base context.  Throws</span></span><br><span class="line"><span class="comment">     * IllegalStateException if a base context has already been set.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> base The new base context for this wrapper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBase != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base context already set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base context as set by the constructor or setBaseContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getBaseContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">( Context context, ActivityThread thread, String className, IBinder token, Application application, Object activityManager)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//调用父类方法设置mBase.</span></span><br><span class="line">    mClassName = className;</span><br><span class="line">    mToken = token;</span><br><span class="line">    mApplication = application;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将新创建的ContextImpl赋值到父类ContextWrapper.mBase变量.</p><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Context <span class="title">getReceiverRestrictedContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mReceiverRestrictedContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mReceiverRestrictedContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mReceiverRestrictedContext = <span class="keyword">new</span> ReceiverRestrictedContext(getOuterContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于广播来说Context的传递过程, 跟其他组件完全不同. 广播是在onCreate过程通过参数将ReceiverRestrictedContext传递过去的. 此处getOuterContext()返回的是ContextImpl对象.</p><h4 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    attachInfo(context, info, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info, <span class="keyword">boolean</span> testing)</span> </span>&#123;</span><br><span class="line">    mNoPerms = testing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//将新创建ContextImpl对象保存到ContentProvider对象的成员变量mContext</span></span><br><span class="line">        mContext = context;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setReadPermission(info.readPermission);</span><br><span class="line">            setWritePermission(info.writePermission);</span><br><span class="line">            setPathPermissions(info.pathPermissions);</span><br><span class="line">            mExported = info.exported;</span><br><span class="line">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class="number">0</span>;</span><br><span class="line">            setAuthorities(info.authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行onCreate回调;</span></span><br><span class="line">        ContentProvider.<span class="keyword">this</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ul><li>将新创建ContextImpl对象保存到ContentProvider对象的成员变量mContext;<ul><li>可通过getContext()获取该ContextImpl;</li></ul></li><li>执行onCreate回调;</li></ul><h4 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//Application的mBase</span></span><br><span class="line">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ol><li>将新创建的ContextImpl对象保存到Application的父类成员变量mBase;</li><li>将当前所在的LoadedApk对象保存到Application的父员变量mLoadedApk;</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>每个Apk都对应唯一的application对象和LoadedApk对象, 当Apk中任意组件的创建过程中, 当其所对应的的LoadedApk和Application没有初始化则会创建, 且只会创建一次.</p><h3 id="Context-attach过程"><a href="#Context-attach过程" class="headerlink" title="Context attach过程"></a>Context attach过程</h3><ol><li>Application:<ul><li>调用attachBaseContext()将新创建ContextImpl赋值到父类ContextWrapper.mBase变量;</li><li>可通过getBaseContext()获取该ContextImpl;</li></ul></li><li>Activity/Service:<ul><li>调用attachBaseContext() 将新创建ContextImpl赋值到父类ContextWrapper.mBase变量;</li><li>可通过getBaseContext()获取该ContextImpl;</li><li>可通过getApplication()获取其所在的Application对象;</li></ul></li><li>ContentProvider:<ul><li>调用attachInfo()将新创建ContextImpl保存到ContentProvider.mContext变量;</li><li>可通过getContext()获取该ContextImpl;</li></ul></li><li>BroadcastReceiver:<ul><li>在onCreate过程通过参数将ReceiverRestrictedContext传递过去的.</li></ul></li><li>ContextImpl:<ul><li>可通过getApplicationContext()获取Application;</li></ul></li></ol><h4 id="Context使用场景"><a href="#Context使用场景" class="headerlink" title="Context使用场景"></a>Context使用场景</h4><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">startActivity</th><th style="text-align:left">startService</th><th style="text-align:left">bindService</th><th style="text-align:left">sendBroadcast</th><th style="text-align:left">registerReceiver</th><th style="text-align:left">getContentResolver</th></tr></thead><tbody><tr><td style="text-align:left">Activity</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Service</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Receiver</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">×</td><td style="text-align:left">√</td><td style="text-align:left">-</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Provider</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Application</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr></tbody></table><p>说明: (图中第一列代表不同的Context, √代表允许在该Context执行相应的操作; ×代表不允许; -代表分情况讨论)</p><ol><li>当Context为Receiver的情况下:<ul><li>不允许执行bindService()操作, 由于限制性上下文(ReceiverRestrictedContext)所决定的,会直接抛出异常.</li><li>registerReceiver是否允许取决于receiver;<ul><li>当receiver == null用于获取sticky广播, 允许使用;</li><li>否则不允许使用registerReceiver;</li></ul></li></ul></li><li>纵向来看startActivity操作<ul><li>当为Activity Context则可直接使用;</li><li>当为其他Context, 则必须带上FLAG_ACTIVITY_NEW_TASK flags才能使用;</li><li>另外UI相关要Activity中使用.</li></ul></li><li>除了以上情况, 其他的操作都是被允许执行.</li></ol><h4 id="getApplicationContext"><a href="#getApplicationContext" class="headerlink" title="getApplicationContext"></a>getApplicationContext</h4><p>绝大多数情况下, <code>getApplication()</code>和<code>getApplicationContext()</code>这两个方法完全一致, 返回值也相同; 那么两者到底有什么区别呢? 真正理解这个问题的人非常少. 接下来彻底地回答下这个问题:</p><p>getApplicationContext()这个的存在是Android历史原因. 我们都知道getApplication()只存在于Activity和Service对象; 那么对于BroadcastReceiver和ContentProvider却无法获取Application, 这时就需要一个能在Context上下文直接使用的方法, 那便是getApplicationContext().</p><p>两者对比:</p><ol><li>对于Activity/Service来说, getApplication()和getApplicationContext()的返回值完全相同; 除非厂商修改过接口;</li><li>BroadcastReceiver在onReceive的过程, 能使用getBaseContext().getApplicationContext获取所在Application, 而无法使用getApplication;</li><li>ContentProvider能使用getContext().getApplicationContext()获取所在Application. 绝大多数情况下没有问题, 但是有可能会出现空指针的问题, 情况如下:</li></ol><p>当同一个进程有多个apk的情况下, 对于第二个apk是由provider方式拉起的, 前面介绍过provider创建过程并不会初始化所在application, 此时执行 getContext().getApplicationContext()返回的结果便是NULL. 所以对于这种情况要做好判空.</p><p>本博客为学习笔记，主要摘抄自 Gityuan <a href="http://gityuan.com/2017/04/09/android_context/" target="_blank" rel="noopener">理解Android Context</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接触过Android的小伙伴, 一定不会对Context感到陌生, 有大量的场景使用都离不开Context, 下面列举部分常见场景:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动Activity (startActivity)&lt;/li&gt;
&lt;li&gt;启动服务 (startService)&lt;/
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Context" scheme="http://yoursite.com/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg将H264封装为MP4文件</title>
    <link href="http://yoursite.com/2020/08/20/FFmpeg%E5%B0%86H264%E5%B0%81%E8%A3%85%E4%B8%BAMP4%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/08/20/FFmpeg将H264封装为MP4文件/</id>
    <published>2020-08-20T09:10:41.000Z</published>
    <updated>2020-08-20T09:10:41.332Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FFmpeg编码yuv转H264</title>
    <link href="http://yoursite.com/2020/08/18/FFmpeg%E7%BC%96%E7%A0%81yuv%E8%BD%ACH264/"/>
    <id>http://yoursite.com/2020/08/18/FFmpeg编码yuv转H264/</id>
    <published>2020-08-18T07:10:57.000Z</published>
    <updated>2020-08-20T08:58:56.370Z</updated>
    
    <content type="html"><![CDATA[<p>紧接上一章内容，将视频文件添加一个红色方框后文件转成了YUV数据，这一节就再处理下YUV数据，编码成H.264文件。整体流程也比较简单，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    AVFormatContext *pFormatCtx;</span><br><span class="line">    AVOutputFormat *fmt;</span><br><span class="line">    AVStream *video_st;</span><br><span class="line">    AVCodecContext *pCodecCtx;</span><br><span class="line">    AVCodec *pCodec;</span><br><span class="line">    AVPacket pkt;</span><br><span class="line">    <span class="keyword">uint8_t</span> *picture_buf;</span><br><span class="line">    AVFrame *pFrame;</span><br><span class="line">    <span class="keyword">int</span> picture_size;</span><br><span class="line">    <span class="keyword">int</span> y_size;</span><br><span class="line">    <span class="keyword">int</span> framecnt = <span class="number">0</span>;</span><br><span class="line">    FILE *in_file = fopen(<span class="string">"/Users/liuwei/Desktop/new_test.yuv"</span>, <span class="string">"rb"</span>);   <span class="comment">//Input raw YUV data</span></span><br><span class="line">    <span class="keyword">int</span> in_w = <span class="number">568</span>, in_h = <span class="number">320</span>;        <span class="comment">//new_test.yuv的宽高</span></span><br><span class="line">    <span class="keyword">int</span> framenum = <span class="number">259</span>;       <span class="comment">//Frames to encode,这个值是我将原本的视频文件test.mp4解码为YUV文件时得到的数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *out_file = <span class="string">"/Users/liuwei/Desktop/new_test.h264"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Method1.</span></span><br><span class="line">    pFormatCtx = avformat_alloc_context();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Guess Format根据输出文件后缀获取已注册输出格式列表中的输出格式，如果没有匹配的，则返回NULL。</span></span><br><span class="line">    fmt = av_guess_format(<span class="literal">NULL</span>, out_file, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (fmt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pFormatCtx-&gt;oformat = fmt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开输出文件</span></span><br><span class="line">    <span class="keyword">if</span> (avio_open(&amp;pFormatCtx-&gt;pb, out_file, AVIO_FLAG_READ_WRITE) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to open output file! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流</span></span><br><span class="line">    video_st = avformat_new_stream(pFormatCtx, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (video_st == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据视频编解码器获取对应的编码器</span></span><br><span class="line">    pCodec = avcodec_find_encoder(fmt-&gt;video_codec);</span><br><span class="line">    <span class="keyword">if</span> (!pCodec) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Can not find encoder! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    pCodecCtx = avcodec_alloc_context3(pCodec);</span><br><span class="line">    <span class="keyword">if</span> (!pCodecCtx) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video codec context\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    pCodecCtx-&gt;codec_id = fmt-&gt;video_codec;</span><br><span class="line">    pCodecCtx-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">    pCodecCtx-&gt;pix_fmt = AV_PIX_FMT_YUV420P;</span><br><span class="line">    pCodecCtx-&gt;width = in_w;</span><br><span class="line">    pCodecCtx-&gt;height = in_h;</span><br><span class="line">    pCodecCtx-&gt;bit_rate = <span class="number">400000</span>; <span class="comment">// 码率</span></span><br><span class="line">    pCodecCtx-&gt;gop_size = <span class="number">250</span>; <span class="comment">// 每250帧产生一个关键帧，new_test.yuv只有259帧，表示最后只有2个I帧</span></span><br><span class="line"></span><br><span class="line">    pCodecCtx-&gt;time_base.num = <span class="number">1</span>;</span><br><span class="line">    pCodecCtx-&gt;time_base.den = <span class="number">25</span>; <span class="comment">//时间基</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//H264</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;me_range = 16;</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;max_qdiff = 4;</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;qcompress = 0.6;</span></span><br><span class="line">    pCodecCtx-&gt;qmin = <span class="number">10</span>;</span><br><span class="line">    pCodecCtx-&gt;qmax = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional Param</span></span><br><span class="line">    pCodecCtx-&gt;max_b_frames = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set Option</span></span><br><span class="line">    AVDictionary *param = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//H.264</span></span><br><span class="line">    <span class="keyword">if</span> (pCodecCtx-&gt;codec_id == AV_CODEC_ID_H264) &#123;</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"preset"</span>, <span class="string">"slow"</span>, <span class="number">0</span>); <span class="comment">//压缩速度慢，保证视频质量</span></span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"tune"</span>, <span class="string">"zerolatency"</span>, <span class="number">0</span>);<span class="comment">//零延迟</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//H.265</span></span><br><span class="line">    <span class="keyword">if</span> (pCodecCtx-&gt;codec_id == AV_CODEC_ID_H265) &#123;</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"preset"</span>, <span class="string">"ultrafast"</span>, <span class="number">0</span>);</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"tune"</span>, <span class="string">"zero-latency"</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Show some Information</span></span><br><span class="line">    av_dump_format(pFormatCtx, <span class="number">0</span>, out_file, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, &amp;param) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to open encoder! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pFrame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//返回使用给定参数存储图像所需的数据量的大小</span></span><br><span class="line">    picture_size = av_image_get_buffer_size(pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">4</span>);</span><br><span class="line">    picture_buf = (<span class="keyword">uint8_t</span> *) av_malloc(picture_size);</span><br><span class="line">    <span class="comment">//分配内存 </span></span><br><span class="line">    av_image_fill_arrays(pFrame-&gt;data, pFrame-&gt;linesize, picture_buf, pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width,</span><br><span class="line">                         pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Write File Header</span></span><br><span class="line">    avformat_write_header(pFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    av_new_packet(&amp;pkt, picture_size);</span><br><span class="line"></span><br><span class="line">    y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; framenum; i++) &#123;</span><br><span class="line">        <span class="comment">//从文件中读取YUV数据</span></span><br><span class="line">        <span class="keyword">if</span> (fread(picture_buf, <span class="number">1</span>, y_size * <span class="number">3</span> / <span class="number">2</span>, in_file) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to read raw data! \n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (feof(in_file)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pFrame-&gt;data[<span class="number">0</span>] = picture_buf;              <span class="comment">// Y</span></span><br><span class="line">        pFrame-&gt;data[<span class="number">1</span>] = picture_buf + y_size;      <span class="comment">// U</span></span><br><span class="line">        pFrame-&gt;data[<span class="number">2</span>] = picture_buf + y_size * <span class="number">5</span> / <span class="number">4</span>;  <span class="comment">// V</span></span><br><span class="line">        <span class="comment">//PTS</span></span><br><span class="line">        pFrame-&gt;pts = i * (video_st-&gt;time_base.den) / ((video_st-&gt;time_base.num) * <span class="number">25</span>);</span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        avcodec_send_frame(pCodecCtx, pFrame);</span><br><span class="line">        <span class="keyword">int</span> ret = avcodec_receive_packet(pCodecCtx, &amp;pkt);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Succeed to encode frame: %5d\tsize:%5d\n"</span>, framecnt, pkt.size);</span><br><span class="line">            framecnt++;</span><br><span class="line">            pkt.stream_index = video_st-&gt;index;</span><br><span class="line">            av_write_frame(pFormatCtx, &amp;pkt);</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(&amp;pkt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Write file trailer</span></span><br><span class="line">    av_write_trailer(pFormatCtx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Clean</span></span><br><span class="line">    avcodec_free_context(&amp;pCodecCtx);</span><br><span class="line">    av_free(pFrame);</span><br><span class="line">    av_free(picture_buf);</span><br><span class="line">    avio_close(pFormatCtx-&gt;pb);</span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line"></span><br><span class="line">    fclose(in_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩效果非常明显，84M的YUV视频压缩成H264后只有492KB。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;紧接上一章内容，将视频文件添加一个红色方框后文件转成了YUV数据，这一节就再处理下YUV数据，编码成H.264文件。整体流程也比较简单，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="FFmpeg" scheme="http://yoursite.com/categories/FFmpeg/"/>
    
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
</feed>
