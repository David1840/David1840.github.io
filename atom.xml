<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Programmer Liu</title>
  
  <subtitle>精彩生活，不惧挑战，做一只有理想的的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-08T02:56:51.057Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-观察者模式(ListView notifyDataSetChanged)</title>
    <link href="http://yoursite.com/2021/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/04/设计模式-观察者模式/</id>
    <published>2021-03-04T06:20:16.000Z</published>
    <updated>2021-03-08T02:56:51.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合关系”</li><li>事件多级触发场景</li><li>跨系统的消息交换场景，如消息队列、事件总线的处理机制</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="/2021/03/04/设计模式-观察者模式/observer_uml.png" alt=""></p><ul><li>Subject：抽象对象，也是被观察(Observable)的角色，抽象主题角色把所有观察者对象的引用保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有注册过的观察者发出通知，具体主题角色有叫做具体被观察者(ConcreteObservable)角色。</li><li>Observer：抽象观察者，该角色是观察者的抽象类，它定义了一个更新接口，使得在得到猪头的更改通知时更新自己。</li><li>ConcreteObserver：具体的观察者，该角色实现抽象观察者角色所定义的更新接口，以便在主题的状态发生改变时更新自己的状态。</li></ul><h2 id="Android源码"><a href="#Android源码" class="headerlink" title="Android源码"></a>Android源码</h2><p>Android中使用观察者模式的地方很多，在这里以我们常用的RecyclerView为例。当我们往RecyclerView中添加数据后，都会调用Adapter的notifyDataSetChanged方法，其中就使用观察者模式的方式，接下来研究它的实现源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> AdapterDataObservable mObservable = <span class="keyword">new</span> AdapterDataObservable();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">boolean</span> mHasStableIds = <span class="keyword">false</span>;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">          mObservable.registerObserver(observer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">          mObservable.unregisterObserver(observer);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mObservable.notifyChanged();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObservable</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">AdapterDataObserver</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !mObservers.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// since onChanged() is implemented by the app, it could do anything, including</span></span><br><span class="line">            <span class="comment">// removing itself from &#123;@link mObservers&#125; - and that could cause problems if</span></span><br><span class="line">            <span class="comment">// an iterator is used on the ArrayList &#123;@link mObservers&#125;.</span></span><br><span class="line">            <span class="comment">// to avoid such problems, just march thru the list in the reverse order.</span></span><br><span class="line">          <span class="comment">//调用每个观察者的onChanged方法通知它们被观察者发生了改变</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = mObservers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                mObservers.get(i).onChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这些观察者从哪里来的？这些观察者是在RecyclerView通过setAdapter方法设置的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(@Nullable Adapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bail out if layout is frozen</span></span><br><span class="line">        setLayoutFrozen(<span class="keyword">false</span>);</span><br><span class="line">        setAdapterInternal(adapter, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        processDataSetCompletelyChanged(<span class="keyword">false</span>);</span><br><span class="line">        requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapterInternal</span><span class="params">(@Nullable Adapter adapter, <span class="keyword">boolean</span> compatibleWithPrevious,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> removeAndRecycleViews)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果已经有了Adapter，那么先注销该Adapter对应的观察者</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAdapter.unregisterAdapterDataObserver(mObserver);</span><br><span class="line">            mAdapter.onDetachedFromRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!compatibleWithPrevious || removeAndRecycleViews) &#123;</span><br><span class="line">            removeAndRecycleViews();</span><br><span class="line">        &#125;</span><br><span class="line">        mAdapterHelper.reset();</span><br><span class="line">        <span class="keyword">final</span> Adapter oldAdapter = mAdapter;</span><br><span class="line">        mAdapter = adapter;</span><br><span class="line">        <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//将观察者注册到Adapter中，实际注册到mObservable(见上面)</span></span><br><span class="line">            adapter.registerAdapterDataObserver(mObserver);</span><br><span class="line">            adapter.onAttachedToRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLayout.onAdapterChanged(oldAdapter, mAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        mRecycler.onAdapterChanged(oldAdapter, mAdapter, compatibleWithPrevious);</span><br><span class="line">        mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样注册也就完成了，只要我们调用notifyDataSetChanged，就会调用AdapterDataObservable的notifyChanged方法，这个函数会调用所有观察者（AdapterDataObserver）的onChanged方法。</p><p>onChanged实际调用的RecyclerViewDataObserver中的onChanged方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewDataObserver</span> <span class="keyword">extends</span> <span class="title">AdapterDataObserver</span> </span>&#123;</span><br><span class="line">        RecyclerViewDataObserver() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertNotInLayoutOrScroll(<span class="keyword">null</span>);</span><br><span class="line">            mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            processDataSetCompletelyChanged(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mAdapterHelper.hasPendingUpdates()) &#123;</span><br><span class="line">                requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onChanged方法中调用requestLayout方法重新布局，更新用户界面。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>观察者和被观察者之间是抽象耦合，应对业务变化；</li><li>增强系统灵活性、可扩展性。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>在应用观察者模式时需要考虑开发效率和运行效率，程序包括一个被观察者、多个观察者，开发和调试会比较复杂，而且在Java中消息的通知默认是顺序执行，一个观察者卡顿，会影响整体执行效率，在这种情况下，一般采用异步的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="http://yoursite.com/2021/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/02/设计模式-策略模式/</id>
    <published>2021-03-02T01:08:42.000Z</published>
    <updated>2021-03-03T03:32:31.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们可以互相替换。策略模式让算法独立于使用它的客户而独立变化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。</li><li>需要安全地封装多种同一类型的操作时。</li><li>出现同一抽象类有多个子类，而又需要使用if-else或switch-case来选择具体子类时。</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>Context：用来操作策略的上下文环境</p><p>Stragety：策略的抽象</p><p>ConcreteStragetyA、ConcreteStragetyB：具体的策略实现</p><p><img src="/2021/03/02/设计模式-策略模式/1.png" alt=""></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以乘坐公共交通为例，公共交通采用分段计费，乘坐距离越远，价格越高。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算接口</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">     <span class="comment">//按照距离来计算价格</span></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">BusStrategy</span> : <span class="type">CalculateStrategy &#123;</span></span></span><br><span class="line">     <span class="comment">//十公里1元，超过10公里每加1元乘5公里</span></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">         <span class="comment">//超过10公里的总距离</span></span><br><span class="line">         <span class="keyword">val</span> extraTotal = km - <span class="number">10</span></span><br><span class="line">         <span class="comment">//超过的距离是5公里的倍数</span></span><br><span class="line">         <span class="keyword">val</span> extraFactor = extraTotal / <span class="number">5</span></span><br><span class="line">         <span class="comment">//超过的距离对5公里取余</span></span><br><span class="line">         <span class="keyword">val</span> fraction = extraTotal % <span class="number">5</span></span><br><span class="line">         <span class="comment">//计算价格</span></span><br><span class="line">         <span class="keyword">var</span> price = <span class="number">1</span> + extraFactor * <span class="number">1</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">if</span> (fraction &gt; <span class="number">0</span>)</span><br><span class="line">             ++price</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             price</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SubwayStrategy</span> : <span class="type">CalculateStrategy &#123;</span></span></span><br><span class="line">     <span class="comment">//6公里内3元，6-12公里4元，12-22公里5元，22-32公里6元</span></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">if</span> (km &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">             <span class="number">3</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">6</span> &amp;&amp; km &lt; <span class="number">12</span>) &#123;</span><br><span class="line">             <span class="number">4</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">12</span> &amp;&amp; km &lt; <span class="number">22</span>) &#123;</span><br><span class="line">             <span class="number">5</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (km &gt; <span class="number">22</span> &amp;&amp; km &lt; <span class="number">32</span>) &#123;</span><br><span class="line">             <span class="number">6</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="number">7</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">TranficCalculate</span> </span>&#123;</span><br><span class="line">     <span class="keyword">lateinit</span> <span class="keyword">var</span> mStrategy: CalculateStrategy</span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">setStrategy</span><span class="params">(strategy: <span class="type">CalculateStrategy</span>)</span></span> &#123;</span><br><span class="line">         mStrategy = strategy</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">calculatePrice</span><span class="params">(km: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">         mStrategy.calculatePrice(km)</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">val</span> calculate = TranficCalculate()</span><br><span class="line">         calculate.setStrategy(BusStrategy())</span><br><span class="line">         <span class="comment">//计算乘坐公交16公里的价格</span></span><br><span class="line">         calculate.calculatePrice(<span class="number">15</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这种方案在隐藏实现的同时，可扩展性变得很强，当我们想增加计算出租车的计算策略的时候，只需要增加出租车计算策略类，然后将该策略设置给TranficCalculate即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。这个模式很好的演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>结构清晰明了、使用简单直观</li><li>耦合度相对而言较低，扩展方便</li><li>操作封装也更为彻底，数据更为安全</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>随着策略的增多，子类也会变得繁多</li></ul><blockquote><p>《Android源码设计模式解析与实战》学习笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们可以互相替换。策略模式让算法独立于使用它的客户而独立变化。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android WIFI源码分析-WifiStateMachine</title>
    <link href="http://yoursite.com/2021/03/01/Android-WIFI%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-WifiStateMachine/"/>
    <id>http://yoursite.com/2021/03/01/Android-WIFI源码分析-WifiStateMachine/</id>
    <published>2021-03-01T08:32:14.000Z</published>
    <updated>2021-03-02T02:47:36.113Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="WIFI" scheme="http://yoursite.com/tags/WIFI/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="http://yoursite.com/2021/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/01/设计模式-状态模式/</id>
    <published>2021-03-01T08:31:01.000Z</published>
    <updated>2021-03-02T03:06:33.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式和策略模式的结构几乎完全一样，但它们的目的、本质完全不一样。状态模式的行为是平行的、不可替换的，策略模式的行为是彼此独立的、可相互替换的。用一句话表述，状态模式把对象的行为包装在不同的状态对象里，每一个状态对象都有一个共同的抽象状态基类。状态模式的意图是让一个对象在其内部状态改变时，其行为也随之改变。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</li><li>代码中包含大量与对象状态有关的条件语句，例如，一个操作中包含庞大的多分支语句（if-else或switch-case），且这些分支依赖于该对象的状态。</li></ol><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="/2021/03/01/设计模式-状态模式/state_uml.png" alt=""></p><ul><li>Context：环境类，定义客户感兴趣的接口，维护一个State子类的实例，这个实例定义了对象的当前状态。</li><li>State：抽象状态类或状态接口，定义一个或一组接口，表示该状态下的行为。</li><li>Concerte StateA 、Concerte StateB：具体状态类，每一个具体的状态类实现抽象State中定义的接口，从而达到不同状态下的不同行为。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以电视遥控器为例演示状态模式的实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电视操作接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TVState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关机状态，此时只有开机状态是有效的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerOffState</span> : <span class="type">TVState &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"已经关机啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开机状态，此时触发开机功能不做操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerOnState</span> : <span class="type">TVState &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"下一频道"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"上一频道"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"调高音量"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"调低音量"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PowerController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">powerOn</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">powerOff</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电视遥控器，相当于上面UML图中的Context</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVController</span> : <span class="type">PowerController &#123;</span></span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mTVState: TVState</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTVState</span><span class="params">(tvState: <span class="type">TVState</span>)</span></span> &#123;</span><br><span class="line">        mTVState = tvState</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">powerOn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setTVState(PowerOnState())</span><br><span class="line">        Log.d(TAG, <span class="string">"开机啦！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">powerOff</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setTVState(PowerOffState())</span><br><span class="line">        Log.d(TAG, <span class="string">"关机啦！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.nextChannel()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">prevChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.prevChannel()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.turnUp()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mTVState.turnDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tvController = TVController()</span><br><span class="line">    tvController.powerOn()</span><br><span class="line">    tvController.nextChannel()</span><br><span class="line">    tvController.prevChannel()</span><br><span class="line">    tvController.turnDown()</span><br><span class="line">    tvController.turnUp()</span><br><span class="line">    tvController.powerOff()</span><br><span class="line">    tvController.turnUp() <span class="comment">// 不会生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开机啦！</span><br><span class="line">下一频道</span><br><span class="line">上一频道</span><br><span class="line">调低音量</span><br><span class="line">调高音量</span><br><span class="line">关机啦！</span><br><span class="line">已经关机啦</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式的关键点在于不同的状态下对于同一个行为有不同的相应，这其实就是一个将if-else用多态来实现的一个具体示例。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>State模式将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同事也保证可可扩展性和可维护性。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>状态模式的使用必然会增加系统类和对象的个数。</p><blockquote><p>《Android源码设计模式解析与实战》学习笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式和策略模式的结构几乎完全一样，但它们的目的、本质完全不一样。状态模式的行
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="状态机" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux等待队列</title>
    <link href="http://yoursite.com/2021/02/26/Linux%E7%AD%89%E5%BE%85%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2021/02/26/Linux等待队列/</id>
    <published>2021-02-26T01:39:26.000Z</published>
    <updated>2021-02-26T06:19:02.600Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。Linux中提供了等待队列的机制，该机制在内核中应用很广泛。</p><p>它是以双循环链表为基础数据结构，与进程的休眠唤醒机制紧密相联，是实现异步事件通知、跨进程通信、同步资源访问等技术的底层技术支撑。</p><p>它有两种数据结构：等待队列头 （wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为”连接件”。它通过一个双链表和把等待task的头，和等待的进程列表链接起来。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>等待队列结构如下，因为每个等待队列都可以再中断时被修改，因此，在操作等待队列之前必须获得一个自旋锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> &#123;</span></span><br><span class="line">   <span class="keyword">spinlock_t</span>      lock;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span>;</span></span><br></pre></td></tr></table></figure><p>可通过宏<code>DECLARE_WAIT_QUEUE_HEAD(name)</code>来创建类型为wait_queue_head_t的等待队列头name。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_WAIT_QUEUE_HEAD(name) \</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> <span class="title">name</span> = __<span class="title">WAIT_QUEUE_HEAD_INITIALIZER</span>(<span class="title">name</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">#<span class="title">define</span> __<span class="title">WAIT_QUEUE_HEAD_INITIALIZER</span>(<span class="title">name</span>) &#123;</span>                    \</span><br><span class="line">    .lock        = __SPIN_LOCK_UNLOCKED(name.lock),            \</span><br><span class="line">    .head        = &#123; &amp;(name).head, &amp;(name).head &#125; &#125;</span><br></pre></td></tr></table></figure><p>等待队列是通过task_list双链表来实现，其数据成员是如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flags;</span><br><span class="line"><span class="keyword">void</span>*<span class="keyword">private</span>;  <span class="comment">//指向等待队列的进程task_struct</span></span><br><span class="line"><span class="keyword">wait_queue_func_t</span>func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue</span> <span class="title">wait_queue_t</span>;</span></span><br></pre></td></tr></table></figure><p>可通过宏<code>DECLARE_WAITQUEUE(name, tsk)</code>来创建类型为wait_queue_t的等待队列项name，并将tsk赋值给成员变量private， default_wake_function赋值给成员变量func。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_WAITQUEUE(name, tsk)                        \</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_entry</span> <span class="title">name</span> = __<span class="title">WAITQUEUE_INITIALIZER</span>(<span class="title">name</span>, <span class="title">tsk</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">define</span> __<span class="title">WAITQUEUE_INITIALIZER</span>(<span class="title">name</span>, <span class="title">tsk</span>) &#123;</span>                    \</span><br><span class="line">    .<span class="keyword">private</span>    = tsk,                            \</span><br><span class="line">    .func        = default_wake_function,                \</span><br><span class="line">    .entry        = &#123; <span class="literal">NULL</span>, <span class="literal">NULL</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>示意图：</p><p><img src="/2021/02/26/Linux等待队列/wait_queue.png" alt=""></p><h2 id="初始化等待队列元素"><a href="#初始化等待队列元素" class="headerlink" title="初始化等待队列元素"></a>初始化等待队列元素</h2><ol><li><p>静态初始化</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define DEFINE_WAIT_FUNC(<span class="keyword">name</span>, <span class="function"><span class="keyword">function</span></span>)\</span><br><span class="line">wait_queue_t <span class="keyword">name</span> = &#123;\</span><br><span class="line">.<span class="keyword">private</span>= current,\</span><br><span class="line">.func= <span class="function"><span class="keyword">function</span></span>,\</span><br><span class="line">.task_list= LIST_HEAD_INIT((<span class="keyword">name</span>).task_list),\</span><br><span class="line">&#125;</span><br><span class="line">#define DEFINE_WAIT(<span class="keyword">name</span>) DEFINE_WAIT_FUNC(<span class="keyword">name</span>, autoremove_wake_function)</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_waitqueue_entry</span><span class="params">(<span class="keyword">wait_queue_t</span> *q, struct task_struct *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q-&gt;flags= <span class="number">0</span>;</span><br><span class="line">q-&gt;<span class="keyword">private</span>= p;</span><br><span class="line">q-&gt;func= default_wake_function;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="增加删除"><a href="#增加删除" class="headerlink" title="增加删除"></a>增加删除</h2><h3 id="add-wait-queue"><a href="#add-wait-queue" class="headerlink" title="add_wait_queue"></a>add_wait_queue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_wait_queue</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    wait-&gt;flags &amp;= ~WQ_FLAG_EXCLUSIVE;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    __add_wait_queue(q, wait);  <span class="comment">//挂到队列头</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __add_wait_queue(<span class="keyword">wait_queue_head_t</span> *head, <span class="keyword">wait_queue_t</span> *<span class="keyword">new</span>)</span><br><span class="line">&#123;</span><br><span class="line">    list_add(&amp;<span class="keyword">new</span>-&gt;task_list, &amp;head-&gt;task_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的功能是将wait等待队列项 挂到等待队列头q中。</p><h3 id="remove-wait-queue"><a href="#remove-wait-queue" class="headerlink" title="remove_wait_queue"></a>remove_wait_queue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_wait_queue</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    __remove_wait_queue(q, wait);</span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __remove_wait_queue(<span class="keyword">wait_queue_head_t</span> *head, <span class="keyword">wait_queue_t</span> *old)</span><br><span class="line">&#123;</span><br><span class="line">    list_del(&amp;old-&gt;task_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能是将wait等待队列项 从等待队列头q中移除。</p><h2 id="休眠唤醒"><a href="#休眠唤醒" class="headerlink" title="休眠唤醒"></a>休眠唤醒</h2><h3 id="wait-event-（进程休眠）"><a href="#wait-event-（进程休眠）" class="headerlink" title="wait_event （进程休眠）"></a>wait_event （进程休眠）</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//condition ： a C expression for the event to wait for</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wait_event(wq, condition)                    \</span></span><br><span class="line"><span class="keyword">do</span> &#123;                                    \</span><br><span class="line">    <span class="keyword">if</span> (condition)                            \</span><br><span class="line">        <span class="keyword">break</span>;                            \</span><br><span class="line">    __wait_event(wq, condition);                    \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __wait_event(wq, condition)                    \</span></span><br><span class="line">    (<span class="keyword">void</span>)___wait_event(wq, condition, TASK_UNINTERRUPTIBLE, <span class="number">0</span>, <span class="number">0</span>, schedule())</span><br></pre></td></tr></table></figure><p>####___wait_event</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">___wait_event(wq, condition, state, exclusive, ret, cmd)&#123;  </span><br><span class="line">    <span class="keyword">wait_queue_t</span> __wait;                    </span><br><span class="line">    INIT_LIST_HEAD(&amp;__wait.task_list);                </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//当检测进程是否有待处理信号则返回值__int不为0,见下面解析</span></span><br><span class="line">        <span class="keyword">long</span> __int = prepare_to_wait_event(&amp;wq, &amp;__wait, state);</span><br><span class="line">        <span class="keyword">if</span> (condition)  <span class="comment">//当满足条件，则跳出循环                    </span></span><br><span class="line">            <span class="keyword">break</span>;                        </span><br><span class="line">                                    </span><br><span class="line">        <span class="comment">//当有待处理信号且进程处于可中断状态(TASK_INTERRUPTIBLE或TASK_KILLABLE))，则跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (___wait_is_interruptible(state) &amp;&amp; __int) &#123;        </span><br><span class="line">            __ret = __int;                    </span><br><span class="line">            <span class="keyword">break</span>;                      </span><br><span class="line">        &#125;                            </span><br><span class="line">        cmd; <span class="comment">//schedule()，进入睡眠，从进程就绪队列选择一个高优先级进程来代替当前进程运行                       </span></span><br><span class="line">    &#125;                                </span><br><span class="line">    finish_wait(&amp;wq, &amp;__wait);  <span class="comment">//调用函数finish_wait()将进程状态设置为TASK_RUNNING，并从等待队列的链表中移除对应的成员             </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prepare-to-wait-event"><a href="#prepare-to-wait-event" class="headerlink" title="prepare_to_wait_event"></a>prepare_to_wait_event</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">prepare_to_wait_event</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait, <span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">if</span> (signal_pending_state(state, current)) <span class="comment">//信号检测</span></span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line"></span><br><span class="line">    wait-&gt;<span class="keyword">private</span> = current;</span><br><span class="line">    wait-&gt;func = autoremove_wake_function; <span class="comment">//设置func唤醒函数</span></span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    <span class="keyword">if</span> (list_empty(&amp;wait-&gt;task_list)) &#123;  <span class="comment">//当wait不在队列q，则加入其中，防止无法唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (wait-&gt;flags &amp; WQ_FLAG_EXCLUSIVE)</span><br><span class="line">            __add_wait_queue_tail(q, wait);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            __add_wait_queue(q, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    set_current_state(state);  <span class="comment">//设置进程状态</span></span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">autoremove_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = default_wake_function(wait, mode, sync, key); <span class="comment">//唤醒函数</span></span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        list_del_init(&amp;wait-&gt;task_list); <span class="comment">//从列表中移除wait</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait_event(wq, condition)：进入睡眠状态直到condition为true，在等待期进程状态为TASK_UNINTERRUPTIBLE。对应的唤醒方法是wake_up()，当等待队列wq被唤醒时会执行如下两个检测：</p><ul><li>检查condition是否为true，满足条件，则跳出循环。</li><li>检测该进程task的成员thread_info-&gt;flags是否被设置TIF_SIGPENDING，被设置则说明有待处理的信号，则跳出循环。</li></ul><h3 id="wake-up-（进程唤醒）"><a href="#wake-up-（进程唤醒）" class="headerlink" title="wake_up （进程唤醒）"></a>wake_up （进程唤醒）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up(x)            __wake_up(x, TASK_NORMAL, 1, NULL)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __wake_up(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</span><br><span class="line">            <span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    <span class="comment">//核心方法</span></span><br><span class="line">    __wake_up_common(q, mode, nr_exclusive, <span class="number">0</span>, key);</span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __wake_up_common(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</span><br><span class="line">            <span class="keyword">int</span> nr_exclusive, <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">wait_queue_t</span> *curr, *next;</span><br><span class="line"></span><br><span class="line">    list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> flags = curr-&gt;flags;</span><br><span class="line">        <span class="comment">//调用prepare_to_wait_event中设置的唤醒函数</span></span><br><span class="line">        <span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp;</span><br><span class="line">                (flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：q是等待队列，mode指定进程的状态，用于控制唤醒进程的条件，nr_exclusive表示将要唤醒的设置了WQ_FLAG_EXCLUSIVE标志的进程的数目。 </p><p>然后扫描链表，调用func唤醒函数，直至没有更多的进程被唤醒，或者被唤醒的的独占进程数目已经达到规定数目。</p><p>从上面可知，真正调用的唤醒函数为default_wake_function</p><h4 id="default-wake-function"><a href="#default-wake-function" class="headerlink" title="default_wake_function"></a>default_wake_function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *curr, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> wake_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">void</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> try_to_wake_up(curr-&gt;<span class="keyword">private</span>, mode, wake_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="try-to-wake-up"><a href="#try-to-wake-up" class="headerlink" title="try_to_wake_up"></a>try_to_wake_up</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">try_to_wake_up</span><span class="params">(struct task_struct *p, <span class="keyword">unsigned</span> <span class="keyword">int</span> state, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> cpu, src_cpu, success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> freq_notif_allowed = !(wake_flags &amp; WF_NO_NOTIFIER);</span><br><span class="line">    <span class="keyword">bool</span> check_group = <span class="literal">false</span>;</span><br><span class="line">    wake_flags &amp;= ~WF_NO_NOTIFIER;</span><br><span class="line"></span><br><span class="line">    smp_mb__before_spinlock();</span><br><span class="line">    raw_spin_lock_irqsave(&amp;p-&gt;pi_lock, flags); <span class="comment">//关闭本地中断</span></span><br><span class="line">    src_cpu = cpu = task_cpu(p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前进程状态不属于可唤醒状态集，则无法唤醒该进程</span></span><br><span class="line">    <span class="comment">//wake_up()传递过来的TASK_NORMAL等于(TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)</span></span><br><span class="line">    <span class="keyword">if</span> (!(p-&gt;state &amp; state)) </span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    success = <span class="number">1</span>; </span><br><span class="line">    smp_rmb();</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;on_rq &amp;&amp; ttwu_remote(p, wake_flags)) <span class="comment">//当前进程已处于rq运行队列，则无需唤醒</span></span><br><span class="line">        <span class="keyword">goto</span> stat;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    ttwu_queue(p, cpu); </span><br><span class="line">stat:</span><br><span class="line">    ttwu_stat(p, cpu, wake_flags);</span><br><span class="line">out:</span><br><span class="line">    raw_spin_unlock_irqrestore(&amp;p-&gt;pi_lock, flags); <span class="comment">//恢复本地中断</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ttwu-queue"><a href="#ttwu-queue" class="headerlink" title="ttwu_queue"></a>ttwu_queue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_queue</span><span class="params">(struct task_struct *p, <span class="keyword">int</span> cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span> = <span class="title">cpu_rq</span>(<span class="title">cpu</span>);</span> <span class="comment">// 获取当前进程的运行队列</span></span><br><span class="line">raw_spin_lock(&amp;rq-&gt;lock);</span><br><span class="line">lockdep_pin_lock(&amp;rq-&gt;lock);</span><br><span class="line">ttwu_do_activate(rq, p, <span class="number">0</span>); <span class="comment">//</span></span><br><span class="line">lockdep_unpin_lock(&amp;rq-&gt;lock);</span><br><span class="line">raw_spin_unlock(&amp;rq-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ttwu ： try to wake up 缩写</span></span><br></pre></td></tr></table></figure><h4 id="ttwu-do-activate"><a href="#ttwu-do-activate" class="headerlink" title="ttwu_do_activate"></a>ttwu_do_activate</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_do_activate</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ttwu_activate(rq, p, ENQUEUE_WAKEUP | ENQUEUE_WAKING);</span><br><span class="line">ttwu_do_wakeup(rq, p, wake_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ttwu_activate</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> en_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">activate_task(rq, p, en_flags); <span class="comment">//将进程task加入rq队列</span></span><br><span class="line">p-&gt;on_rq = TASK_ON_RQ_QUEUED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; PF_WQ_WORKER)</span><br><span class="line">wq_worker_waking_up(p, cpu_of(rq)); <span class="comment">//worker正在唤醒中，则通知工作队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ttwu_do_wakeup</span><span class="params">(struct rq *rq, struct task_struct *p, <span class="keyword">int</span> wake_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">check_preempt_curr(rq, p, wake_flags);</span><br><span class="line">p-&gt;state = TASK_RUNNING; <span class="comment">//标记该进程为TASK_RUNNING状态</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>休眠与唤醒流程：</strong></p><ol><li>进程A调用wait_event(wq, condition)就是向等待队列头中添加等待队列项wait_queue_t，该该等待队列项中的成员变量private记录当前进程，其成员变量func记录唤醒回调函数，然后调用schedule()使当前进程进入休眠状态。</li><li>进程B调用wake_up(wq)会遍历整个等待列表wq中的每一项wait_queue_t，依次调用每一项的唤醒函数try_to_wake_up()。这个过程会将private记录的进程加入rq运行队列，并设置进程状态为TASK_RUNNING。</li><li>进程A被唤醒后只执行如下检测：<ul><li>检查condition是否为true，满足条件则跳出循环，再把wait_queue_t从wq队列中移除；</li><li>检测该进程task的成员thread_info-&gt;flags是否被设置TIF_SIGPENDING，被设置则说明有待处理的信号，则跳出循环，再把wait_queue_t从wq队列中移除；</li><li>否则，继续调用schedule()再次进入休眠等待状态，如果wait_queue_t不在wq队列，则再次加入wq队列。</li></ul></li></ol><p>参考：</p><p><a href="http://gityuan.com/2018/12/02/linux-wait-queue/" target="_blank" rel="noopener">http://gityuan.com/2018/12/02/linux-wait-queue/</a></p><p><a href="https://blog.csdn.net/younger_china/article/details/7176851" target="_blank" rel="noopener">https://blog.csdn.net/younger_china/article/details/7176851</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。Linux中提供了等待队列的机制，该机制在内核中应用很广泛。&lt;/p&gt;
&lt;p&gt;它是以双循环链表为基础数据结构，与进程的休眠唤醒
      
    
    </summary>
    
      <category term="Linux系统" scheme="http://yoursite.com/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android智能指针</title>
    <link href="http://yoursite.com/2020/12/01/Android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2020/12/01/Android智能指针/</id>
    <published>2020-12-01T11:33:57.000Z</published>
    <updated>2021-02-23T08:50:23.008Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中通常会使用引用计数来维护对象的生命周期。</p><p>每当有一个指针指向了一个new出来的对象时，就对这个对象的引用计数增加1，每当有一个指针不再使用这个对象时，就对这个对象的引用计数减少1，每次减1之后，如果发现引用计数值为0时，那么，就要delete这个对象了，这样就避免了忘记delete对象或者这个对象被delete之后其它地方还在使用的问题了。</p><p>那如何实现这个对象的引用计数呢？如果由开发人员维护，显然既不可靠，易出错，又不方便编写和维护。因此Android使用智能指针技术—能自动维护对象引用计数的技术。需要注意的是，智能指针是一个对象，而不是一个指针。这个对象代表的是另外一个真实使用的对象，当智能指针指向实际对象的时候，就是智能指针对象创建的时候，当智能指针不再指向实际对象的时候，就是智能指针对象销毁的时候</p><p>考虑这样的一个场景，系统中有两个对象A和B，在对象A的内部引用了对象B，而在对象B的内部也引用了对象A。当两个对象A和B都不再使用时，垃圾收集系统会发现无法回收这两个对象的所占据的内存的，因为系统一次只能收集一个对象，而无论系统决定要收回对象A还是要收回对象B时，都会发现这个对象被其它的对象所引用，因而就都回收不了，这样就造成了内存泄漏。这样，就要采取另外的一种引用计数技术了，即对象的引用计数同时存在强引用和弱引用两种计数，当父对象要引用子对象时，就对子对象使用强引用计数技术，而当子对象要引用父对象时，就对父对象使用弱引用计数技术，而当垃圾收集系统执行对象回收工作时，只要发现对象的强引用计数为0，而不管它的弱引用计数是否为0，都可以回收这个对象，但是，如果我们只对一个对象持有弱引用计数，当我们要使用这个对象时，就不直接使用了，必须要把这个弱引用升级成为强引用时，才能使用这个对象，在转换的过程中，如果对象已经不存在，那么转换就失败了，这时候就说明这个对象已经被销毁了，不能再使用了。</p><p>Android系统提供了强大的智能指针技术供我们使用，这些智能指针实现方案既包括简单的引用计数技术，也包括了复杂的引用计数技术，即对象既有强引用计数，也有弱引用计数，对应地，这三种智能指针分别就称为轻量级指针（Light Pointer）、强指针（Strong Pointer）和弱指针（Weak Pointer）。</p><p>无论是轻量级指针，还是强指针和弱指针，它们的实现框架都是一致的，即由对象本身来提供引用计数器，但是它不会去维护这个引用计数器的值，而是由智能指针来维护。</p><p>##轻量级指针</p><p><code>/system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LightRefBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    inline LightRefBase() : mCount(0) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">incStrong</span><span class="params">(__attribute__((unused)) <span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        mCount.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">decStrong</span><span class="params">(__attribute__((unused)) <span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="comment">//fetch_sub将原子对象的封装值减 val，并返回原子对象的旧值，整个过程是原子的</span></span><br><span class="line">        <span class="keyword">if</span> (mCount.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> T*&gt;(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//! DEBUGGING ONLY: Get current strong ref count.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> int32_t <span class="title">getStrongCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> LightRefBase&lt;T&gt; basetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">inline</span> ~LightRefBase() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceMover</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefs</span><span class="params">(<span class="keyword">size_t</span> n, <span class="keyword">const</span> ReferenceRenamer&amp; renamer)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(T* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt; mCount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先它是一个模板类，拥有一个atomic&lt;int32_t&gt; 类型的计数器（atomic是一个原子操作类，在c++11中新定义的）提供了desString 和 incString的计数器增减方案，还有一个getStringCount的获取计数器数量的方法。</p><p>在decStrong方法中，如果强引用全部删除之后，我们会delete本对象。</p><p>轻量级指针的实现类为sp，它不仅仅是LightRefBase计数器的智能指针，同时也是强指针引用计数器的智能指针。</p><p><code>system/core/include/utils/StrongPointer.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    inline sp() : m_ptr(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    sp(T* other);</span><br><span class="line">    sp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    sp(sp&lt;T&gt;&amp;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp(sp&lt;U&gt;&amp;&amp; other);</span><br><span class="line"></span><br><span class="line">    ~sp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line"></span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (T* other);</span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    sp&amp; <span class="keyword">operator</span> = (sp&lt;T&gt;&amp;&amp; other);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (sp&lt;U&gt;&amp;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; sp&amp; <span class="keyword">operator</span> = (U* other);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Special optimization for use by ProcessState (and nobody else).</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">force_set</span><span class="params">(T* other)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Accessors</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span>  T&amp;      <span class="keyword">operator</span>* () <span class="keyword">const</span>  &#123; <span class="keyword">return</span> *m_ptr; &#125;</span><br><span class="line">    <span class="keyword">inline</span>  T*      <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_ptr;  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  T*      <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span>         </span>&#123; <span class="keyword">return</span> m_ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Operators</span></span><br><span class="line"></span><br><span class="line">    COMPARE(==)</span><br><span class="line">    COMPARE(!=)</span><br><span class="line">    COMPARE(&gt;)</span><br><span class="line">    COMPARE(&lt;)</span><br><span class="line">    COMPARE(&lt;=)</span><br><span class="line">    COMPARE(&gt;=)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">sp</span>;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">wp</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_pointer</span><span class="params">(T* ptr)</span></span>;</span><br><span class="line">    T* m_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sp类也是一个模版类，T表示对象的实际类型，它也是必须继承了LightRefBase的。成员变量m_ptr是一个指针，它是在构造函数里初始化的，指向实际引用的对象。所以下面这两个构造函数实际就是调用了LightRefBase的成员函数incStrong来增加引用计数。</p><p>构造函数</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::sp(T* other)</span><br><span class="line">        : m_ptr(other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (other)</span><br><span class="line">        other-&gt;incStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::sp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other)</span><br><span class="line">        : m_ptr(other.m_ptr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr)</span><br><span class="line">        m_ptr-&gt;incStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>析构函数</p><p>调用了LightRefBase的成员函数decStrong来减少引用计数</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt;::~sp() &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr)</span><br><span class="line">        m_ptr-&gt;decStrong(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><code>external/lightpointer/lightpointer.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/RefBase.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightClass</span> :</span> <span class="keyword">public</span> LightRefBase&lt;LightClass&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LightClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Construce LightClass Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~LightClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Destory LightClass Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LightClass *pLightClass = <span class="keyword">new</span> LightClass();</span><br><span class="line">    sp&lt;LightClass&gt; lpOut = pLightClass;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">//作用域</span></span><br><span class="line">        sp&lt;LightClass&gt; lpInner = lpOut;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line">       <span class="comment">//作用域结束，lpInner析构</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Light Ref Count:%d \n"</span>, pLightClass-&gt;getStrongCount());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>external/lightpointer/Android.mk</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_MODULE := lightpointer</span><br><span class="line">LOCAL_SRC_FILES := lightpointer.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">libcutils \</span><br><span class="line">libutils</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure><p>编译打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mmm ./external/lightpointer/</span><br><span class="line">make snod</span><br></pre></td></tr></table></figure><p>烧录新镜像后：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span></span><br><span class="line"><span class="keyword">cd</span> <span class="built_in">system</span>/bin/</span><br><span class="line">./lightpointer</span><br><span class="line"></span><br><span class="line">Construce LightClass Object</span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">1</span></span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">2</span></span><br><span class="line">Light Ref Coun<span class="variable">t:</span> <span class="number">1</span> </span><br><span class="line">Destory LightClass Object</span><br></pre></td></tr></table></figure><p>可以看到pLightClass对象赋值给lpOut智能指针后，引用计数加1，然后在局部作用域中，定义一个智能指针lpInner，并且指向了原来的对象，引用计数再次加1，当局部作用域结束时，lpInner析构，引用计数减1。</p><h2 id="强指针"><a href="#强指针" class="headerlink" title="强指针"></a>强指针</h2><p><code>system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">incStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">decStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    </span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">forceIncStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Get current strong ref count.</span></span><br><span class="line">            <span class="keyword">int32_t</span>         getStrongCount() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">weakref_type</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">RefBase*            <span class="title">refBase</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">incWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">decWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// acquires a strong reference if there is already one.</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span>                <span class="title">attemptIncStrong</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// acquires a weak reference if there is already one.</span></span><br><span class="line">        <span class="comment">// This is not always safe. see ProcessState.cpp and BpBinder.cpp</span></span><br><span class="line">        <span class="comment">// for proper use.</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span>                <span class="title">attemptIncWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Get current weak ref count.</span></span><br><span class="line">        <span class="keyword">int32_t</span>             getWeakCount() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Print references held on object.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//! DEBUGGING ONLY: Enable tracking for this object.</span></span><br><span class="line">        <span class="comment">// enable -- enable/disable tracking</span></span><br><span class="line">        <span class="comment">// retain -- when tracking is enable, if true, then we save a stack trace</span></span><br><span class="line">        <span class="comment">//           for each reference and dereference; when retain == false, we</span></span><br><span class="line">        <span class="comment">//           match up references and dereferences and keep only the </span></span><br><span class="line">        <span class="comment">//           outstanding ones.</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span>                <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span> enable, <span class="keyword">bool</span> retain)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">            <span class="function">weakref_type*   <span class="title">createWeak</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span> <span class="keyword">const</span></span>;</span><br><span class="line">            </span><br><span class="line">            <span class="function">weakref_type*   <span class="title">getWeakRefs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Print references held on object.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  <span class="keyword">void</span>            <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; getWeakRefs()-&gt;printRefs(); &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//! DEBUGGING ONLY: Enable tracking of object.</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  <span class="keyword">void</span>            <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span> enable, <span class="keyword">bool</span> retain)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        getWeakRefs()-&gt;trackMe(enable, retain); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> RefBase basetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">                            RefBase();</span><br><span class="line">    <span class="keyword">virtual</span>                 ~RefBase();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//! Flags for extendObjectLifetime()</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        OBJECT_LIFETIME_STRONG  = <span class="number">0x0000</span>,</span><br><span class="line">        OBJECT_LIFETIME_WEAK    = <span class="number">0x0001</span>,</span><br><span class="line">        OBJECT_LIFETIME_MASK    = <span class="number">0x0001</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">            <span class="function"><span class="keyword">void</span>            <span class="title">extendObjectLifetime</span><span class="params">(<span class="keyword">int32_t</span> mode)</span></span>;</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//! Flags for onIncStrongAttempted()</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        FIRST_INC_STRONG = <span class="number">0x0001</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onFirstRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onLastStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span>            <span class="title">onIncStrongAttempted</span><span class="params">(<span class="keyword">uint32_t</span> flags, <span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>            <span class="title">onLastWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">weakref_type</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">weakref_impl</span>;</span></span><br><span class="line">    </span><br><span class="line">                            RefBase(<span class="keyword">const</span> RefBase&amp; o);</span><br><span class="line">            RefBase&amp;        <span class="keyword">operator</span>=(<span class="keyword">const</span> RefBase&amp; o);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceMover</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefs</span><span class="params">(<span class="keyword">size_t</span> n, <span class="keyword">const</span> ReferenceRenamer&amp; renamer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(weakref_type* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameRefId</span><span class="params">(RefBase* ref,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">void</span>* old_id, <span class="keyword">const</span> <span class="keyword">void</span>* new_id)</span></span>;</span><br><span class="line"></span><br><span class="line">        weakref_impl* <span class="keyword">const</span> mRefs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样定义了 incStrong 和decStrong方法，用于增减引用计数（这也是为什么强指针也能使用sp<t>类来控制引用计数的原因）。和轻量级指针引用计数不同的是，我们的引用计数量不再是一个int类型来记录引用数量，而是使用了一个weakref_impl指针类型的变量mRefs。</t></p><p>weakref_impl继承自上面的weakref_type</p><p><code>system/core/libutils/RefBase.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefBase</span>:</span>:weakref_impl : <span class="keyword">public</span> RefBase::weakref_type</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mStrong;</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mWeak;</span><br><span class="line">    RefBase* <span class="keyword">const</span>          mBase;</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">int32_t</span>&gt;    mFlags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !DEBUG_REFS</span></span><br><span class="line"></span><br><span class="line">    weakref_impl(RefBase* base)</span><br><span class="line">        : mStrong(INITIAL_STRONG_VALUE)</span><br><span class="line">        , mWeak(<span class="number">0</span>)</span><br><span class="line">        , mBase(base)</span><br><span class="line">        , mFlags(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeStrongRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">renameStrongRefId</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*old_id*/</span>, <span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*new_id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeWeakRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">renameWeakRefId</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*old_id*/</span>, <span class="keyword">const</span> <span class="keyword">void</span>* <span class="comment">/*new_id*/</span>)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printRefs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trackMe</span><span class="params">(<span class="keyword">bool</span>, <span class="keyword">bool</span>)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个里面实际有用的就是最上面定义的4个成员变量，mStrong 和 mWeak分别用来做强引用和弱引用的计数，mBase指向实现引用计数的对象本身，mFlags是标志位，默认值是0。</p><p>强指针的实现类依然为sp，上面我们知道sp中实际是调用了RefBase类的incStrong和decStrong来增加和减少引用计数的。我们先来看一下incStrong。</p><p><code>system/core/libutils/RefBase.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::incStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    refs-&gt;incWeak(id);</span><br><span class="line">    </span><br><span class="line">    refs-&gt;addStrongRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = refs-&gt;mStrong.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    ALOG_ASSERT(c &gt; <span class="number">0</span>, <span class="string">"incStrong() called on %p after last strong ref"</span>, refs);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"incStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, c);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (c != INITIAL_STRONG_VALUE)  &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> old = refs-&gt;mStrong.fetch_sub(INITIAL_STRONG_VALUE,</span><br><span class="line">            <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    <span class="comment">// A decStrong() must still happen after us.</span></span><br><span class="line">    ALOG_ASSERT(old &gt; INITIAL_STRONG_VALUE, <span class="string">"0x%x too small"</span>, old);</span><br><span class="line">    refs-&gt;mBase-&gt;onFirstRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用incWeak，弱引用加1。（<strong>从这里可以看到增加对象的强引用，也会增加对象的弱引用计数，即一个对象的弱引用计数一定大于等于它的强引用计数</strong>）</p><p>然后调用addStrongRef，这个函数为空实现。</p><p>关键是mStrong.fetch_add，在强引用上加1，返回值c为增加前原值，如果c等于INITIAL_STRONG_VALUE，表明是第一次调用，就会调用fetch_sub，将mStrong归1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITIAL_STRONG_VALUE (1&lt;&lt;28)</span></span><br></pre></td></tr></table></figure><p>因为mStrong的初始值不为0，而是INITIAL_STRONG_VALUE，也就是1&lt;&lt;28，fetch_add后就成了1&lt;&lt;28+1，所以后面调用fetch_sub减掉INITIAL_STRONG_VALUE初始值，才会把mStrong值置为1。可以把这个操作看为一个判断是否第一次被强引用，相比使用boolean去标记优雅很多，后面refs-&gt;mBase-&gt;onFirstRef()调用是个空实现，由开发者自己定义。</p><p>然后看decStrong</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::decStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    refs-&gt;removeStrongRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = refs-&gt;mStrong.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"decStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, c);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ALOG_ASSERT(c &gt;= <span class="number">1</span>, <span class="string">"decStrong() called on %p too many times"</span>, refs);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line">        refs-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">        <span class="keyword">int32_t</span> flags = refs-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// Since mStrong had been incremented, the destructor did not</span></span><br><span class="line">            <span class="comment">// delete refs.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note that even with only strong reference operations, the thread</span></span><br><span class="line">    <span class="comment">// deallocating this may not be the same as the thread deallocating refs.</span></span><br><span class="line">    <span class="comment">// That's OK: all accesses to this happen before its deletion here,</span></span><br><span class="line">    <span class="comment">// and all accesses to refs happen before its deletion in the final decWeak.</span></span><br><span class="line">    <span class="comment">// The destructor can safely access mRefs because either it's deleting</span></span><br><span class="line">    <span class="comment">// mRefs itself, or it's running entirely before the final mWeak decrement.</span></span><br><span class="line">    refs-&gt;decWeak(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>removeStrongRef()也是一个空实现。</p><p>fetch_sub对对象的计数减1，如果c == 1，即没有其它引用了，先调用onLastStrongRef，与onFirstRef对应，也可以自定义。</p><p>接下来先看一个枚举：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Flags for extendObjectLifetime()</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        OBJECT_LIFETIME_STRONG  = <span class="number">0</span>x0000,</span><br><span class="line">        OBJECT_LIFETIME_WEAK    = <span class="number">0</span>x0001,</span><br><span class="line">        OBJECT_LIFETIME_MASK    = <span class="number">0</span>x0001</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p> 这个枚举量是用来控制对象生命周期的，如果设置为OBJECT_LIFETIME_STRONG表示，对象如果强引用计数器为0，就表示生命周期终止，需要delete，如果设置为OBJECT_LIFETIME_WEAK,表示，只有当弱引用和强引用计数器都为0时，才会delete对象。</p><p><code>if ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG)</code> 判断对象的生命周期类型，如果是OBJECT_LIFETIME_STRONG,那么会直接delete自己。delete会调用析构函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RefBase::~RefBase()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRefs-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed)</span><br><span class="line">            == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we never acquired a strong (and/or weak) reference on this object.</span></span><br><span class="line">        <span class="keyword">delete</span> mRefs;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// life-time of this object is extended to WEAK, in</span></span><br><span class="line">        <span class="comment">// which case weakref_impl doesn't out-live the object and we</span></span><br><span class="line">        <span class="comment">// can free it now.</span></span><br><span class="line">        <span class="keyword">int32_t</span> flags = mRefs-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; OBJECT_LIFETIME_MASK) != OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="comment">// It's possible that the weak count is not 0 if the object</span></span><br><span class="line">            <span class="comment">// re-acquired a weak reference in its destructor</span></span><br><span class="line">            <span class="keyword">if</span> (mRefs-&gt;mWeak.load(<span class="built_in">std</span>::memory_order_relaxed) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> mRefs;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for debugging purposes, clear this.</span></span><br><span class="line">    <span class="keyword">const_cast</span>&lt;weakref_impl*&amp;&gt;(mRefs) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该对象从没有过强引用，释放mRefs，如果当前对象生命周期是受弱引用控制的，那么只有在弱引用计数为0的时候，才会去销毁mRefs。</p><p>然后析构函数中做了一件很重要的事情，释放mRefs计数对象（我们在构造函数的时候new的，所以需要确保释放）。</p><p>回到decStrong中，最后调用了refs-&gt;decWeak(id),将弱引用-1。</p><p>mWeak.fetch_sub将弱引用减1，如果c != 1，说明还有弱引用，不用再进一步处理。如果等于1，就说明已经没有弱引用了，也说明了没有强引用了（一个对象的弱引用计数一定大于等于它的强引用计数），然后就需要判断是否需要释放该对象了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::weakref_type::decWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    impl-&gt;removeWeakRef(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = impl-&gt;mWeak.fetch_sub(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_release);</span><br><span class="line">    ALOG_ASSERT(c &gt;= <span class="number">1</span>, <span class="string">"decWeak called on %p too many times"</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> flags = impl-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    <span class="comment">// 1、生命周期受强引用计数控制</span></span><br><span class="line">    <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">        <span class="comment">// This is the regular lifetime case. The object is destroyed</span></span><br><span class="line">        <span class="comment">// when the last strong reference goes away. Since weakref_impl</span></span><br><span class="line">        <span class="comment">// outlive the object, it is not destroyed in the dtor, and</span></span><br><span class="line">        <span class="comment">// we'll have to do it here.</span></span><br><span class="line">        <span class="comment">//2、没有被强引用引用过</span></span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed)</span><br><span class="line">                == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">            <span class="comment">// Special case: we never had a strong reference, so we need to</span></span><br><span class="line">            <span class="comment">// destroy the object now.</span></span><br><span class="line">            <span class="comment">// 释放对象</span></span><br><span class="line">            <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ALOGV("Freeing refs %p of old RefBase %p\n", this, impl-&gt;mBase);</span></span><br><span class="line">            <span class="comment">// 只释放内部的引用计数器对象</span></span><br><span class="line">            <span class="keyword">delete</span> impl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This is the OBJECT_LIFETIME_WEAK case. The last weak-reference</span></span><br><span class="line">        <span class="comment">// is gone, we can destroy the object.</span></span><br><span class="line">        <span class="comment">// 如果对象生命周期受到弱引用控制，那么当弱引用为0时，delete impl-&gt;mBase</span></span><br><span class="line">        impl-&gt;mBase-&gt;onLastWeakRef(id);</span><br><span class="line">        <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弱指针"><a href="#弱指针" class="headerlink" title="弱指针"></a>弱指针</h2><p>弱指针使用的引用计数类同样是RefBase类，实现类是wp<t></t></p><p><code>system/core/include/utils/RefBase.h</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> RefBase::weakref_type weakref_type;</span><br><span class="line">    </span><br><span class="line">    inline wp() : m_ptr(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    wp(T* other);</span><br><span class="line">    wp(<span class="keyword">const</span> wp&lt;T&gt;&amp; other);</span><br><span class="line">    wp(<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp(<span class="keyword">const</span> wp&lt;U&gt;&amp; other);</span><br><span class="line"></span><br><span class="line">    ~wp();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line"></span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (T* other);</span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> wp&lt;T&gt;&amp; other);</span><br><span class="line">    wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;T&gt;&amp; other);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (U* other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> wp&lt;U&gt;&amp; other);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; wp&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> sp&lt;U&gt;&amp; other);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_object_and_refs</span><span class="params">(T* other, weakref_type* refs)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// promotion to sp</span></span><br><span class="line">    </span><br><span class="line">    sp&lt;T&gt; promote() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Accessors</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  weakref_type* <span class="title">get_refs</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_refs; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  T* <span class="title">unsafe_get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Operators</span></span><br><span class="line"></span><br><span class="line">    COMPARE_WEAK(==)</span><br><span class="line">    COMPARE_WEAK(!=)</span><br><span class="line">    COMPARE_WEAK(&gt;)</span><br><span class="line">    COMPARE_WEAK(&lt;)</span><br><span class="line">    COMPARE_WEAK(&lt;=)</span><br><span class="line">    COMPARE_WEAK(&gt;=)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) &amp;&amp; (m_refs == o.m_refs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_ptr == o.m_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &gt; o.m_refs) : (m_ptr &gt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &gt; o.m_refs) : (m_ptr &gt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &lt; o.m_refs) : (m_ptr &lt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (m_ptr == o.m_ptr) ? (m_refs &lt; o.m_refs) : (m_ptr &lt; o.m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_refs != o.m_refs; &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> == (o); &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &gt; (o); &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &gt; (o); &#125;</span><br><span class="line">                         <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> wp&lt;T&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &lt; (o); &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> wp&lt;U&gt;&amp; o) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !<span class="keyword">operator</span> &lt; (o); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">sp</span>;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">wp</span>;</span></span><br><span class="line"></span><br><span class="line">    T*              m_ptr;</span><br><span class="line">    weakref_type*   m_refs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>wp<t>类的定义和sp<t>其实是比较接近的，最大的区别在于wp<t> 不仅保存了 T的指针 m_ptr，而且保存了T中引用计数的指针m_refs。</t></t></t></p><p>弱指针和强指针有一个很大的区别，弱指针不可以直接操作它所引用的对象，因为它所引用的对象可能是不受弱引用计数器控制的，即它所引用的对象有可能是一个无效的对象。实现方式就在于弱指针类没有重载*和-&gt;操作符号，而强指针重载了这两个操作符号。如果需要操作一个弱指针所引用的对象，就需要将弱指针升级为强指针。</p><p>在wp的构造函数中，会调用createWeak方法，createWeak调用incWeak增加弱引用计数，返回mRefs对象指针，构造函数中将mRefs存入m_refs中。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">wp&lt;T&gt;::wp(T* other)</span><br><span class="line">    : m_ptr(other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (other) m_refs = other-&gt;createWeak(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//system/core/libutils/RefBase.cpp</span></span><br><span class="line">RefBase::weakref_type* RefBase::createWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    mRefs-&gt;incWeak(id);</span><br><span class="line">    <span class="keyword">return</span> mRefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wp的析构函数则调用decWeak减少引用计数，具体上面已经讲过。</p><p>接下来就是弱指针的重点，如何将弱指针升级为强指针。该过程通过调用成员函数promote实现。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">sp&lt;T&gt; wp&lt;T&gt;::promote() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;T&gt; result;</span><br><span class="line">    <span class="keyword">if</span> (m_ptr &amp;&amp; m_refs-&gt;attemptIncStrong(&amp;result)) &#123;</span><br><span class="line">        result.set_pointer(m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看下attemptIncStrong方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> RefBase::weakref_type::attemptIncStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    incWeak(id); <span class="comment">//增加弱引用计数一次</span></span><br><span class="line">    </span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">int32_t</span> curCount = impl-&gt;mStrong.load(<span class="built_in">std</span>::memory_order_relaxed); <span class="comment">//获取当前强引用计数器的值</span></span><br><span class="line"></span><br><span class="line">    ALOG_ASSERT(curCount &gt;= <span class="number">0</span>,</span><br><span class="line">            <span class="string">"attemptIncStrong called on %p after underflow"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前已经有其他强引用，那么对象一定存在，所以就试着将强引用引用计数+1</span></span><br><span class="line">    <span class="keyword">while</span> (curCount &gt; <span class="number">0</span> &amp;&amp; curCount != INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we're in the easy/common case of promoting a weak-reference</span></span><br><span class="line">        <span class="comment">// from an existing strong reference.</span></span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;mStrong.compare_exchange_weak(curCount, curCount+<span class="number">1</span>,</span><br><span class="line">                <span class="built_in">std</span>::memory_order_relaxed)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the strong count has changed on us, we need to re-assert our</span></span><br><span class="line">        <span class="comment">// situation. curCount was updated by compare_exchange_weak.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果当前没有强引用的</span></span><br><span class="line">    <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span> || curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we're now in the harder case of either:</span></span><br><span class="line">        <span class="comment">// - there never was a strong reference on us</span></span><br><span class="line">        <span class="comment">// - or, all strong references have been released</span></span><br><span class="line">        <span class="keyword">int32_t</span> flags = impl-&gt;mFlags.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="comment">//对象生命周期受强引用控制</span></span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="comment">// this object has a "normal" life-time, i.e.: it gets destroyed</span></span><br><span class="line">            <span class="comment">// when the last strong reference goes away</span></span><br><span class="line">            <span class="comment">//有过强引用</span></span><br><span class="line">            <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// the last strong-reference got released, the object cannot</span></span><br><span class="line">                <span class="comment">// be revived.</span></span><br><span class="line">                <span class="comment">//弱引用-1作回退</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// here, curCount == INITIAL_STRONG_VALUE, which means</span></span><br><span class="line">            <span class="comment">// there never was a strong-reference, so we can try to</span></span><br><span class="line">            <span class="comment">// promote this object; we need to do that atomically.</span></span><br><span class="line">            <span class="comment">// 强引用计数等于初始值，表示对象还没有强引用，自然也没有被销毁，可以转换，所以强引用+1，这里+1之后的值并不是1，而是     1&lt;&lt;28，所以在最后fetch_sub减掉了INITIAL_STRONG_VALUE</span></span><br><span class="line">            <span class="keyword">while</span> (curCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (impl-&gt;mStrong.compare_exchange_weak(curCount, curCount+<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">std</span>::memory_order_relaxed)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// the strong count has changed on us, we need to re-assert our</span></span><br><span class="line">                <span class="comment">// situation (e.g.: another thread has inc/decStrong'ed us)</span></span><br><span class="line">                <span class="comment">// curCount has been updated.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// promote() failed, some other thread destroyed us in the</span></span><br><span class="line">                <span class="comment">// meantime (i.e.: strong count reached zero).</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// this object has an "extended" life-time, i.e.: it can be</span></span><br><span class="line">            <span class="comment">// revived from a weak-reference only.</span></span><br><span class="line">            <span class="comment">// Ask the object's implementation if it agrees to be revived</span></span><br><span class="line">            <span class="comment">// 询问是否允许升级到强指针，默认返回true表示允许，但是部分对象可能不允许做弱引用升级（重写该方法，返回false即可），如果不允许，那么久弱引用-1（回退第一步操作），直接然后返回false。如果允许弱引用升级，那么就强引用+1。</span></span><br><span class="line">            <span class="keyword">if</span> (!impl-&gt;mBase-&gt;onIncStrongAttempted(FIRST_INC_STRONG, id)) &#123;</span><br><span class="line">                <span class="comment">// it didn't so give-up.</span></span><br><span class="line">                decWeak(id);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// grab a strong-reference, which is always safe due to the</span></span><br><span class="line">            <span class="comment">// extended life-time.</span></span><br><span class="line">            curCount = impl-&gt;mStrong.fetch_add(<span class="number">1</span>, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">            <span class="comment">// If the strong reference count has already been incremented by</span></span><br><span class="line">            <span class="comment">// someone else, the implementor of onIncStrongAttempted() is holding</span></span><br><span class="line">            <span class="comment">// an unneeded reference.  So call onLastStrongRef() here to remove it.</span></span><br><span class="line">            <span class="comment">// (No, this is not pretty.)  Note that we MUST NOT do this if we</span></span><br><span class="line">            <span class="comment">// are in fact acquiring the first reference.</span></span><br><span class="line">            <span class="keyword">if</span> (curCount != <span class="number">0</span> &amp;&amp; curCount != INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">                impl-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">    impl-&gt;addStrongRef(id);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PRINT_REFS</span></span><br><span class="line">    ALOGD(<span class="string">"attemptIncStrong of %p from %p: cnt=%d\n"</span>, <span class="keyword">this</span>, id, curCount);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// curCount is the value of mStrong before we incremented it.</span></span><br><span class="line">    <span class="comment">// Now we need to fix-up the count if it was INITIAL_STRONG_VALUE.</span></span><br><span class="line">    <span class="comment">// This must be done safely, i.e.: handle the case where several threads</span></span><br><span class="line">    <span class="comment">// were here in attemptIncStrong().</span></span><br><span class="line">    <span class="comment">// curCount &gt; INITIAL_STRONG_VALUE is OK, and can happen if we're doing</span></span><br><span class="line">    <span class="comment">// this in the middle of another incStrong.  The subtraction is handled</span></span><br><span class="line">    <span class="comment">// by the thread that started with INITIAL_STRONG_VALUE.</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果之前没有过强引用，这里需要在强引用计数上减去1&lt;&lt;28。</span></span><br><span class="line">    <span class="keyword">if</span> (curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        impl-&gt;mStrong.fetch_sub(INITIAL_STRONG_VALUE,</span><br><span class="line">                <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中通常会使用引用计数来维护对象的生命周期。&lt;/p&gt;
&lt;p&gt;每当有一个指针指向了一个new出来的对象时，就对这个对象的引用计数增加1，每当有一个指针不再使用这个对象时，就对这个对象的引用计数减少1，每次减1之后，如果发现引用计数值为0时，那么，就要delete这个对象了
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++ 引用</title>
    <link href="http://yoursite.com/2020/11/30/C-%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/30/C-引用/</id>
    <published>2020-11-30T02:31:48.000Z</published>
    <updated>2020-11-30T02:55:50.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-引用"><a href="#C-引用" class="headerlink" title="C++ 引用"></a>C++ 引用</h1><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><h3 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h3><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><h3 id="创建引用"><a href="#创建引用" class="headerlink" title="创建引用"></a>创建引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明引用变量</span></span><br><span class="line">    <span class="keyword">int</span> &amp;c = a;</span><br><span class="line">    <span class="keyword">double</span> &amp;d = b;</span><br><span class="line"></span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b = <span class="number">30.0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"d = "</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">c = <span class="number">20</span></span><br><span class="line">d = <span class="number">30</span></span><br></pre></td></tr></table></figure><p>在这些声明中，&amp; 读作<strong>引用</strong>。因此，第一个声明可以读作 “c 是一个初始化为 a 的整型引用”，第二个声明可以读作 “d 是一个初始化为 b 的 double 型引用”。</p><h3 id="把引用作为参数（引用传递）"><a href="#把引用作为参数（引用传递）" class="headerlink" title="把引用作为参数（引用传递）"></a>把引用作为参数（引用传递）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">    swap(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">    x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">    y = temp; <span class="comment">/* 把 x 赋值给 y  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">交换前，a 的值：<span class="number">100</span>交换前，b 的值：<span class="number">200</span></span><br><span class="line">交换后，a 的值：<span class="number">200</span>交换后，b 的值：<span class="number">100</span></span><br></pre></td></tr></table></figure><p>被调函数的形参虽然也作为局部变量在栈中开辟了内存空间，但在栈中放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被间接寻址，即通过栈中的存放的地址访问主调函数中的中的实参变量（相当于一个人有两个名字），因此形参在任意改动都直接影响到实参。</p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换前，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">    swap(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，a 的值："</span> &lt;&lt; a &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"交换后，b 的值："</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = x; <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">    x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">    y = temp; <span class="comment">/* 把 x 赋值给 y  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">交换前，a 的值：<span class="number">100</span>交换前，b 的值：<span class="number">200</span></span><br><span class="line">交换后，a 的值：<span class="number">100</span>交换后，b 的值：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>形参时实参的拷贝，改变函数形参并不影响函数外部的实参，这是最常用的一种传递方式，也是最简单的一种传递方式。只需要传递参数，返回值是return考虑的；使用值传递这种方式，调用函数不对实参进行操作，也就是说，即使形参的值发生改变，实参的值也完全不受影响。</p><h3 id="把引用作为返回值"><a href="#把引用作为返回值" class="headerlink" title="把引用作为返回值"></a>把引用作为返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> vals[] = &#123;<span class="number">10.1</span>, <span class="number">12.6</span>, <span class="number">33.1</span>, <span class="number">24.1</span>, <span class="number">50.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> &amp;<span class="title">setValues</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> vals[i];   <span class="comment">// 返回第 i 个元素的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要调用上面定义函数的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"改变前的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"vals["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vals[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setValues(<span class="number">1</span>) = <span class="number">20.23</span>; <span class="comment">// 改变第 2 个元素</span></span><br><span class="line">    setValues(<span class="number">3</span>) = <span class="number">70.8</span>;  <span class="comment">// 改变第 4 个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"改变后的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"vals["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vals[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">改变前的值</span><br><span class="line">vals[<span class="number">0</span>] = <span class="number">10.1</span></span><br><span class="line">vals[<span class="number">1</span>] = <span class="number">12.6</span></span><br><span class="line">vals[<span class="number">2</span>] = <span class="number">33.1</span></span><br><span class="line">vals[<span class="number">3</span>] = <span class="number">24.1</span></span><br><span class="line">vals[<span class="number">4</span>] = <span class="number">50</span></span><br><span class="line">改变后的值</span><br><span class="line">vals[<span class="number">0</span>] = <span class="number">10.1</span></span><br><span class="line">vals[<span class="number">1</span>] = <span class="number">20.23</span></span><br><span class="line">vals[<span class="number">2</span>] = <span class="number">33.1</span></span><br><span class="line">vals[<span class="number">3</span>] = <span class="number">70.8</span></span><br><span class="line">vals[<span class="number">4</span>] = <span class="number">50</span></span><br></pre></td></tr></table></figure><p>setValues(1)和setValues(3)得到的是实际上的实参变量地址，所以setValues(1) = 20.23就是对实际的变量进行修改。</p><p>用引用作函数的返回值的最大的好处是在内存中不产生返回值的副本，会使 C++ 程序更容易阅读和维护。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-引用&quot;&gt;&lt;a href=&quot;#C-引用&quot; class=&quot;headerlink&quot; title=&quot;C++ 引用&quot;&gt;&lt;/a&gt;C++ 引用&lt;/h1&gt;&lt;p&gt;引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量
      
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux_UNIX系统编程手册</title>
    <link href="http://yoursite.com/2020/11/11/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/11/11/Linux-UNIX系统编程手册读书笔记/</id>
    <published>2020-11-11T03:27:30.000Z</published>
    <updated>2020-11-26T01:15:29.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>系统调用是受控的内核入口，借助这一机制，进程可以请求内核以自己的名义去执行某些操作。以应用程序编程接口（API）的形式，内核提供有一系列服务供程序访问。</p><blockquote><ul><li>系统调用将处理器从用户态切换到核心态，以便CPU访问受到保护的内核内存</li><li>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。(程序通过名称来标识系统调用，对这一编号方案往往一无所知)</li><li>每个系统调用可辅之以一套参数，对用户空间(亦即进程的寻你地址空间)与内核空间之间传递的信息加以规范。</li></ul></blockquote><p>从编程角度来看，系统调用和C语言函数的调用很相似。然而，在执行系统调用时，其幕后会经历诸多步骤。以一个具体的硬件平台-x86-32为例，按事件发生的顺序对这些步骤加以分析。</p><ol><li>应用程序调用C语言函数库中的外壳（wrapper）函数，来发起系统调用。</li><li>对系统调用中断处理例程来说，外壳函数必须保证所有的系统调用参数可用，通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。因此，外壳函数会讲上述参数复制到寄存器。</li><li>由于所有系统调用进入内核的方式相同，内核需要去区分每个系统调用。为此外壳函数会讲系统调用编号复制到一个特殊的CPU寄存器（%eax）中。</li><li>外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行系统中断0x80的中断矢量所指向的代码。</li><li>为响应中断0x80，内核会调用system_call()例程来处理这次中断，具体如下：<ul><li>在内核栈中保存寄存器值</li><li>审核系统嗲用编号的有效性</li><li>以系统调用编号对存放所有调用服务例程的列表（内核变量sys_call_table）进行索引，发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。最后，该服务例程会将结果状态放回给system_call()例程</li><li>从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中</li><li>返回至外壳函数，同时将处理器切换回用户态</li></ul></li><li>若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量errno。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统调用是否成功。</li></ol><p>下图以系统调用execve()为例</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/sys_call.png" alt="系统调用"></p><h2 id="1、文件I-O"><a href="#1、文件I-O" class="headerlink" title="1、文件I/O"></a>1、文件I/O</h2><p>所有执行I/O操作的系统嗲用都以文件描述符，一个非负整数(通常是小整数)，来指代打开的文件。文件描述符用以表示所有类型的已打开文件，包括管道(pipe)、FIFO、socket、终端、设备和普通文件。针对每个进程，文件描述符都自成一套。</p><h3 id="1-1通用I-O"><a href="#1-1通用I-O" class="headerlink" title="1.1通用I/O"></a>1.1通用I/O</h3><p>UNIX I/O模型的显著特点之一是其输入/输出的通用性概念。这就意味着使用4个同样的系统调用open()、read()、wrtie()和close()可以对所有类型的文件执行I/O操作，包括终端之类的设备。</p><h3 id="1-2打开一个文件：open"><a href="#1-2打开一个文件：open" class="headerlink" title="1.2打开一个文件：open()"></a>1.2打开一个文件：open()</h3><p>open()调用既能打开一个已存在的文件，也能创建并打开一个新文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname,<span class="keyword">int</span> flags,...<span class="comment">/* mode_t mode*/</span>)</span></span>;</span><br><span class="line">             </span><br><span class="line">                                              Return file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>参数flags为位掩码，用于制定文件的访问模式，可选下表所示的常量之一。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/UNIX_IO_mode.png" alt="系统调用"></p><p>open函数使用的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只读方式打开已存在的文件</span></span><br><span class="line">fd = open(<span class="string">"startup"</span>,o_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写方式打开或创建文件，清空文件内容</span></span><br><span class="line">fd = open(<span class="string">"myfile"</span>,O_RD_WD | O_CREAT | O_TRUNNC, S_IRUSR | S_IWUSR);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开或创建只写的文件，清空文件内容，总在文件尾部追加数据</span></span><br><span class="line">fd = open(<span class="string">"w.log"</span>,O_WRONLY | O_CREAT | O_TRUNNC | O_APPEND, S_IRUSR | S_IWUSR);</span><br><span class="line"><span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"open"</span>);</span><br></pre></td></tr></table></figure><p><strong>open()中flags参数</strong></p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/flags1.png" alt=""></p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/flags2.png" alt=""></p><h3 id="1-3读取文件内容：read"><a href="#1-3读取文件内容：read" class="headerlink" title="1.3读取文件内容：read()"></a>1.3读取文件内容：read()</h3><p>read()系统调用从文件描述符fd所指代的打开文件中读取数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> count);</span><br><span class="line">Returns number of bytes read,<span class="number">0</span>on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>count 参数指定最多能读取的字节数。buffer参数提供用来存放输入数据的内存缓冲区地址。缓冲区至少有count个字节。</p><h3 id="1-4数据写入文件：write"><a href="#1-4数据写入文件：write" class="headerlink" title="1.4数据写入文件：write()"></a>1.4数据写入文件：write()</h3><p>write()系统调用将数据写入一个已打开的文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> count);</span><br><span class="line">Returns number of bytes wrttten,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h3 id="1-5关闭文件：close"><a href="#1-5关闭文件：close" class="headerlink" title="1.5关闭文件：close()"></a>1.5关闭文件：close()</h3><p>close()系统调用关闭一个打开的文件描述符，并将其释放回调用进程，供该进程继续使用。当一进程终止时，将自动关闭其已打开的所有文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line">              Returns <span class="number">0</span> on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h3 id="1-6改变文件偏移量：lseek"><a href="#1-6改变文件偏移量：lseek" class="headerlink" title="1.6改变文件偏移量：lseek()"></a>1.6改变文件偏移量：lseek()</h3><p>对于每个打开的文件，系统内核会记录其文件偏移量，有时也将文件偏移量称为读写偏移量或指针。文件偏移量是指执行下一个read()或write()操作的文件起始位置，会以相对于文件头部起始点的文件当前位置脸表示。文件第一个字节的偏移量为0。</p><p>文件打开时，会将文件偏移量设置为指向文件开始，以后每次read()或write()调用将自动对其进行调整，以指向已读或已读数据后的下一字节。因此，连续read()或write()调用将按顺序递进，对文件进行操作。</p><p>针对文件描述符fd参数所指代的已打开文件，lseek()系统调用依照offset和whence参数调整该文件的偏移量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">off_t</span> lseek(<span class="keyword">int</span> fd,<span class="keyword">off_t</span> offset,<span class="keyword">int</span> whence);</span><br><span class="line">Returns <span class="keyword">new</span> file offset <span class="keyword">if</span> successful,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>offset参数指定了一个以字节为单位的数值。whence参数则表明应参照哪个基点来解释offset参数，应为下列其中之一：</p><p><strong>SEEK_SET:</strong> </p><p>​            将文件偏移量设置为从文件头部起始点开始的offset个字节。</p><p><strong>SEEK_CUR：</strong></p><p>​            相对于当前文件偏移量，将文件偏移量调整offset个字节。</p><p><strong>SEEK_END：</strong></p><p>​            将文件偏移量设置为起始于文件尾部的offset个字节。也就是说，offset参数应该从文件最后一个字节之后的下一个字节算起。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/lseek.png" alt=""></p><p>####文件空洞</p><p>如果程序的文件偏移量已然跨越了文件结尾，然后再执行I/O操作，read()会返回0，表示文件结尾。write()函数可以在文件结尾后的任意位置写入数据。</p><p>从文件结尾后到新写入数据间的这段空间被称为文件空洞。从编程角度看，文件空洞中是存在字节的，读取空洞将返回以0（空字节）填充的缓冲区。</p><p>然而，文件空洞不占用任何磁盘空间。直到后续某个时点，在文件空洞中写入了数据，文件系统才会为之分配磁盘块。文件空洞的主要优势在于，与为实际需要的空字节分配磁盘块相比，稀疏填充的文件会占用较少的磁盘空间。 </p><h3 id="1-7通用I-O模型以外的操作：ioctl"><a href="#1-7通用I-O模型以外的操作：ioctl" class="headerlink" title="1.7通用I/O模型以外的操作：ioctl()"></a>1.7通用I/O模型以外的操作：ioctl()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> request,...<span class="comment">/* argp */</span>)</span></span>;</span><br><span class="line"> Value returned on success depends on request,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><h2 id="2、深入探究文件I-O"><a href="#2、深入探究文件I-O" class="headerlink" title="2、深入探究文件I/O"></a>2、深入探究文件I/O</h2><h3 id="2-1-原子操作和竞争条件"><a href="#2-1-原子操作和竞争条件" class="headerlink" title="2.1 原子操作和竞争条件"></a>2.1 原子操作和竞争条件</h3><p>所有系统调用都是以原子操作方式执行的。内核保证了某系统调用中的所有步骤会作为独立操作而一次性加以执行，其间不会为其它进程或线程所中断。</p><p>原子性是某些操作得以圆满成功的关键所在。特别是它规避了竞争状态。竞争状态是这样一种情形：操作共享资源的两个进程或线程，其结果取决于一个无法预期的顺序，即这些进程获得CPU使用权的先后相对顺序。</p><p><strong>以独占方式创建一个文件</strong></p><p>当同时指定O_EXCL与O_CREAT作为open()的标志位时，如果要打开的文件已经存在，则open()将返回一个错误。这提供了一种机制，保证进程是打开文件的创建者。对文件是否存在的检查和创建文件属于同一原子操作。而当代码中没有使用O_EXCL标志时。</p><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/Atom.png" alt=""></p><p>如果两个进程如上图所示流程运行，两个进程都会声称自己以独占方式创建了文件。</p><p>由于第一个进程在检查文件是否存在和创建文件之间发生了中断，造成两个进程都声称自己是文件的创建者。结合O_CREAT和O_EXCL标志来一次性调用open()可以防止这种情况，因为这确保了检查文件和创建文件的步骤属于一个单一的原子(不可中断的)操作。</p><h3 id="2-2-文件控制操作：fcntl"><a href="#2-2-文件控制操作：fcntl" class="headerlink" title="2.2 文件控制操作：fcntl()"></a>2.2 文件控制操作：fcntl()</h3><p>fcntl()系统调用对一个打开的文件描述符执行一系列控制操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> cmd,...)</span></span>;</span><br><span class="line">Return on success depends on cmd,<span class="keyword">or</span> <span class="number">-1</span> onn error</span><br></pre></td></tr></table></figure><p>cmd参数所支持的操作范围很广，下面会加以研讨。</p><h3 id="2-3-打开文件的状态标志"><a href="#2-3-打开文件的状态标志" class="headerlink" title="2.3 打开文件的状态标志"></a>2.3 打开文件的状态标志</h3><p>fcntl()的用途之一是针对一个打开的文件，获取或修改其访问模式和状态标志(这些值是通过指定open()调用的flag参数来设置的)。要获取这些设置，应将fcntl()的cmd参数设置为F_GETFL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flags，accessMode;</span><br><span class="line">flags = fcntl(fd,F_GETFL);</span><br><span class="line"><span class="keyword">if</span>(flage == <span class="number">-1</span>)</span><br><span class="line">   errRxit(<span class="string">"fcntl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flags &amp; O_SYNC)  <span class="comment">// 测试文件是否以同步写方式打开</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"writes are synchronized\n"</span>);</span><br></pre></td></tr></table></figure><p>判定文件的访问模式有一点复杂，这是因为O_RDONLY(0)、O_WRONLY(1)和O_RDWR(2)这3个常量并不与打开文件状态标志中的单个比特位对应。因此，要判定访问模式，需使用掩码O_ACCMODE与flag相与，将结果与3个常量进行比对，示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accessMode = flags &amp; O_ACCMODE;</span><br><span class="line"><span class="keyword">if</span>(accessMode == O_WRONLY || accessMode == O_RDWR)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"file is writable\n"</span>);</span><br></pre></td></tr></table></figure><p>可以使用fcntl()的F_SETFL 命令来修改打开文件的某些状态标志。允许更改的标志有O_APPEND、O_NONBLOCK、O_NOATIME、O_ASYNC和O_DIRECT。</p><p>使用fcntl()修改文件状态标志，尤其适用如下场景。</p><ul><li>文件不是有调用程序打开的，所以程序也无法使用open()调用来控制文件的状态标志。</li><li>文件描述符的获取是通过open()之外的系统调用。比如pipe()调用，该调用创建一个管道，并返回两个文件描述符分别对应管道的两端。再比如socket()调用，该调用创建一个套接字并返回指向该套机诶字的文件描述符。</li></ul><p>例如，为了添加O_APPEND标志：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">flags  = fnctl(fd,F_GETFL);</span><br><span class="line"><span class="keyword">if</span>(flags == <span class="number">-1</span>)</span><br><span class="line"> errExit(<span class="string">"fcntl"</span>);</span><br><span class="line">flags |= O_APPEND;</span><br><span class="line"><span class="keyword">if</span>(fcntl(fd,F_SETFL,flags) == <span class="number">-1</span>)</span><br><span class="line">   errExit(<span class="string">"fcntl"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-4-文件描述符和打开文件之间的关系"><a href="#2-4-文件描述符和打开文件之间的关系" class="headerlink" title="2.4 文件描述符和打开文件之间的关系"></a>2.4 文件描述符和打开文件之间的关系</h3><p>到目前为止，文件描述符和打开文件之前似乎呈现出一一对应的关系。然而，实际并非如此。多个文件描述符指向同一打开文件，这既有可能，也属必要。这些文件描述符可在相同或不同的进程中打开。</p><p>要理解具体情况如何，需要查看由内核维护的3个数据结构。</p><ul><li>进程级的文件描述符表。</li><li>系统级的打开文件表。</li><li>文件系统的i-node表。</li></ul><p>针对每个进程，内核为其维护打开文件的描述符(open file descriptor)表。该表的每一条目都记录了单个文件描述符的相关信息。</p><p>内核对所有打开的文件维护有一个系统级的描述表格(opeb file description table)。也可称为打开文件表(open file table)，并将表中各条目称为打开文件句柄(open file handle)。一个打开文件句柄存储了与一个打开文件相关的全部信息.</p><ul><li>当前文件偏移量</li><li>打开文件时所使用的状态标志</li><li>文件访问模式</li><li>与信号驱动I/O相关的设置</li><li>对该文件i-node 对象的引用</li></ul><p>每个文件系统都会为驻留其上的所有文件建立一个i-node表。每个文件的i-node信息</p><ul><li>文件类型和访问权限</li><li>一个指针，指向该文件所持有的锁的列表</li><li>文件的各种属性，包括文件大小以及不同类型操作相关的时间戳</li></ul><p><img src="/2020/11/11/Linux-UNIX系统编程手册读书笔记/2_4.png" alt=""></p><h3 id="2-5复制文件描述符"><a href="#2-5复制文件描述符" class="headerlink" title="2.5复制文件描述符"></a>2.5复制文件描述符</h3><p>Bourne shell的I/O重定向语法 2&gt;&amp;1，意在通知shell把标准错误(文件描述符2)重定向到标准输入(文件描述符1)。</p><p>dup()调用复制一个打开的文件描述符oldfd，并返回一个新描述符，二者都指向同一个打开的文件句柄。系统会保证新描述符一定是编号值最低的未用文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>例如：</p><p><code>newfd= dup(1);</code></p><p>在假定正常情况下，shell已经代表程序打开了文件描述符0，1和2，且没有其它描述符在用，dup()调用会创建文件描述符1的副本，返回的文件描述符编号值为3。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd，<span class="keyword">int</span> newfd)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>dup2()系统调用会为oldfd参数所指定的文件描述符创建副本，其编号由newfd参数指定。如果由newfd参数所指定的文件描述符之前已经打开，那么dup2()会先将其关闭。</p><p>fcntl()的F_DUPFD操作是复制文件描述符的另一接口，更具灵活性。</p><p><code>newfd = fcntl(oldfd,F_DUPFD,startfd);</code></p><p>该调用为oldfd创建一个副本，且将使用大于等于startfd的最小未用值作为描述符编号。</p><p>dup3()系统调用完成的工作与dup2()相同，只是增加了一个附加参数flag，这是一个可以修改系统调用行为的位掩码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GUN_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup3</span><span class="params">(<span class="keyword">int</span> oldfd，<span class="keyword">int</span> newfd,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns(<span class="keyword">new</span>)file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>目前，dup3()只支持一个标志O_CLOEXEC,这将促使内核为新文件描述符设置close-on-exec标志(FD_CLOEXEC)。</p><h3 id="2-6-在文件特定偏移量处的I-O：pread-和pwrite"><a href="#2-6-在文件特定偏移量处的I-O：pread-和pwrite" class="headerlink" title="2.6 在文件特定偏移量处的I/O：pread()和pwrite()"></a>2.6 在文件特定偏移量处的I/O：pread()和pwrite()</h3><p>系统调用pread()和pwrite()完成与read()和write()相类似的工作，只是前两者会在offset参数所指定的位置进行文件I/O操作，而非始于文件的当前偏移量处，且它们不会改变文件的当前偏移量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> pread(<span class="keyword">int</span> fd,<span class="keyword">void</span> *buf,<span class="keyword">size_t</span> count,<span class="keyword">off_t</span> offset);</span><br><span class="line"> Returns number of bytes read,<span class="number">0</span> on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br><span class="line"><span class="keyword">ssize_t</span> pwrite(<span class="keyword">int</span> fd,<span class="keyword">const</span> <span class="keyword">void</span> *buf,<span class="keyword">size_t</span> count,<span class="keyword">off_t</span> offset);</span><br><span class="line">       Returns number of bytes written,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>pread()调用等于将如下调用纳入同一原子操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">off_t</span> orig;</span><br><span class="line"></span><br><span class="line">orig = lseek(fd,<span class="number">0</span>,SEEK_CUR);  <span class="comment">//保存当前偏移量</span></span><br><span class="line">lseek(fd,offset,SEEK_SET);</span><br><span class="line">s= read(fd,buf,len);</span><br><span class="line">lseek(fd,orig,SEEK_SET); <span class="comment">//恢复原本的偏移量</span></span><br></pre></td></tr></table></figure><h3 id="2-7-分散输入和集中输出-Scatter-Gather-I-O-readv-和writev"><a href="#2-7-分散输入和集中输出-Scatter-Gather-I-O-readv-和writev" class="headerlink" title="2.7 分散输入和集中输出(Scatter-Gather I/O):readv()和writev()"></a>2.7 分散输入和集中输出(Scatter-Gather I/O):readv()和writev()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> readv(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec *iov,<span class="keyword">int</span> iovcnt);</span><br><span class="line">Returns number of bytes read,<span class="number">0</span> on EOF,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> writev(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec *iov,<span class="keyword">int</span> iovcnt);</span><br><span class="line">Returns number of bytes written,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>readv()实现了分散输入的功能：从文件描述符fd所指代的文件中读取一片连续的字节，然后将其分散放置于iov指定的缓冲区中。这一散置动作从iov[0]开始，一次填满每个缓冲区。</p><p>writev()将iov所指定的所有缓冲区中的数据拼接起来，然后以连续的字节序列写入文件描述符fd所指代的文件中。</p><h3 id="2-8截断文件：truncate-和ftruncate-系统调用"><a href="#2-8截断文件：truncate-和ftruncate-系统调用" class="headerlink" title="2.8截断文件：truncate()和ftruncate()系统调用"></a>2.8截断文件：truncate()和ftruncate()系统调用</h3><p>truncate()和ftruncate()将文件大小设置为length参数指定的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">truncate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname,<span class="keyword">off_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ftruncate</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">off_t</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">Both <span class="keyword">return</span> <span class="number">0</span> on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>若文件当前长度大于参数length，调用将丢弃超出部分，若小于参数length，调用将在文件尾部添加一系列空字节或是一个文件空洞。</p><h3 id="2-9-创建临时文件"><a href="#2-9-创建临时文件" class="headerlink" title="2.9 创建临时文件"></a>2.9 创建临时文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkstemp</span><span class="params">(<span class="keyword">char</span> *tempplate)</span></span>;</span><br><span class="line"></span><br><span class="line">Returns file descriptor on success,<span class="keyword">or</span> <span class="number">-1</span> on error</span><br></pre></td></tr></table></figure><p>基于调用者提供的模版，mkstemp()函数声称一个唯一文件名并打开该文件，返回一个可用于I/O调用的文件描述符。</p><p>模版参数采用路径名形式，其中最后6个字符必须为XXXXXX。这6个字符将被替换，以保证文件名的唯一性，且修改后的字符串将通过template参数传回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">FILE *<span class="title">tmpfile</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file pointer on success,<span class="keyword">or</span> <span class="literal">NULL</span> on error</span><br></pre></td></tr></table></figure><p>tmpfile()函数执行成功，将返回一个文件流供stdio库函数使用。文件流关闭后将自动删除临时文件。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="3-1进程号和父进程号"><a href="#3-1进程号和父进程号" class="headerlink" title="3.1进程号和父进程号"></a>3.1进程号和父进程号</h3><p>返回调用进程的进程号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpid(<span class="keyword">void</span>);</span><br><span class="line">     </span><br><span class="line">     Always successfully returns peocess ID of caller</span><br></pre></td></tr></table></figure><p>每个进程都有一个创建自己的父进程，getppid()可以获取父进程的进程号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pit_t</span> getppid(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">Always successfully returns peocess ID of parent of caller</span><br></pre></td></tr></table></figure><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统调用&quot;&gt;&lt;a href=&quot;#系统调用&quot; class=&quot;headerlink&quot; title=&quot;系统调用&quot;&gt;&lt;/a&gt;系统调用&lt;/h2&gt;&lt;p&gt;系统调用是受控的内核入口，借助这一机制，进程可以请求内核以自己的名义去执行某些操作。以应用程序编程接口（API）的形式，内核
      
    
    </summary>
    
      <category term="Linux系统" scheme="http://yoursite.com/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI学习-函数动态注册</title>
    <link href="http://yoursite.com/2020/11/09/Android-JNI%E5%87%BD%E6%95%B0%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/"/>
    <id>http://yoursite.com/2020/11/09/Android-JNI函数动态注册/</id>
    <published>2020-11-09T01:46:15.000Z</published>
    <updated>2020-11-10T05:55:31.287Z</updated>
    
    <content type="html"><![CDATA[<p>前面JNI开发相关的也写了几篇博客，对java中native关键字定义的方法进行注册时，都是使用Javah命令生成对应的<code>Java _ 包名 _ 类名 _ 方法名</code>，现在完全可以通过编译器帮我们生成，我们去填对应的逻辑代码即可，这种方式被称为<strong>静态注册</strong>。今天来看一下新的方式：<strong>动态注册</strong></p><p>不同于静态注册中在Java类中定义好native方法后由编译器生成JNI方法，动态注册基本思想是在JNI_Onload()函数中通过JNI中提供的RegisterNatives()方法来将C/C++方法和java方法对应起来, JNI_OnLoad ()函数会在我们调用 System.loadLibrary的时候回调，注册整体流程如下:</p><ol><li>定义Java类中的native方法</li><li>编写C/C++代码, 实现JNI_Onload()方法</li><li>将Java 方法和 C/C++方法通过签名信息对应起来</li><li>通过JavaVM获取JNIEnv, JNIEnv主要用于获取Java类和调用一些JNI提供的方法</li><li>使用类名和对应起来的方法作为参数, 调用JNI提供的函数RegisterNatives()注册方法</li></ol><h3 id="1、Java-Native方法"><a href="#1、Java-Native方法" class="headerlink" title="1、Java Native方法"></a>1、Java Native方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntFromC</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2、C-C-方法"><a href="#2、C-C-方法" class="headerlink" title="2、C/C++方法"></a>2、C/C++方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring <span class="title">returnString</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"I come from C＋＋"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">returnInt</span><span class="params">(JNIEnv *env, jobject instance, jint index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、JNINativeMethod"><a href="#3、JNINativeMethod" class="headerlink" title="3、JNINativeMethod"></a>3、JNINativeMethod</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">"getStringFromC"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span> *) returnString&#125;,</span><br><span class="line">        &#123;<span class="string">"getIntFromC"</span>,    <span class="string">"(I)I"</span>,                 (<span class="keyword">void</span> *) returnInt&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第一个参数对应的native方法名</li><li>第二个参数对应 native方法的描述</li><li>第三个参数对应的c++代码里对应的实现</li></ul><p>通过这个数组将Java层函数和C/C++层代码对应起来</p><h3 id="4、JNI-Onload"><a href="#4、JNI-Onload" class="headerlink" title="4、JNI_Onload"></a>4、JNI_Onload</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *re)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span> **) &amp;env, JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jclass javaClass = env-&gt;FindClass(<span class="string">"com/david/jnitestdemo/MainActivity"</span>);</span><br><span class="line">    <span class="keyword">if</span> (javaClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;RegisterNatives(javaClass, gMethods, <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env-&gt;RegisterNatives(javaClass, gMethods, sizeof(gMethods) / sizeof(gMethods[0])</code></p><p>第一个表示对应jclass，第二个表示JNINativeMethod的数组，第三个是函数的数量</p><p>这样就完成了简单的JNI动态注册Demo</p><p>对比下之前的静态注册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态注册</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_david_jnitestdemo_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line"><span class="function">jstring <span class="title">returnString</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较来说动态注册的代码会清爽一些，虽然多了JNI_OnLoad和JNINativeMethod，但是JNI_OnLoad基本可以只写一次，JNINativeMethod每次有新增函数时才修改，所以个人感觉动态注册写代码会更舒服些，也看个人习惯 ,好了就到这里了。 ^-^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面JNI开发相关的也写了几篇博客，对java中native关键字定义的方法进行注册时，都是使用Javah命令生成对应的&lt;code&gt;Java _ 包名 _ 类名 _ 方法名&lt;/code&gt;，现在完全可以通过编译器帮我们生成，我们去填对应的逻辑代码即可，这种方式被称为&lt;stro
      
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android 理解Context</title>
    <link href="http://yoursite.com/2020/09/03/Android-%E7%90%86%E8%A7%A3Context/"/>
    <id>http://yoursite.com/2020/09/03/Android-理解Context/</id>
    <published>2020-09-03T02:07:17.000Z</published>
    <updated>2020-09-03T10:52:57.797Z</updated>
    
    <content type="html"><![CDATA[<p>接触过Android的小伙伴, 一定不会对Context感到陌生, 有大量的场景使用都离不开Context, 下面列举部分常见场景:</p><ul><li>启动Activity (startActivity)</li><li>启动服务 (startService)</li><li>发送广播 (sendBroadcast), 注册广播接收者 (registerReceiver)</li><li>获取ContentResolver (getContentResolver)</li><li>获取类加载器 (getClassLoader)</li><li>打开或创建数据库 (openOrCreateDatabase)</li><li>获取资源 (getResources)</li><li>…</li></ul><h3 id="Context是什么"><a href="#Context是什么" class="headerlink" title="Context是什么"></a>Context是什么</h3><p>Context一般会被翻译为“上下文”，在Android中应该被翻译为“场景”。</p><p>一个Context意味着一个场景，一个场景就是用户和操作系统交互的一种过程。比如打电话时，场景包括电话程序对应的界面，以及隐藏在界面后的数据。</p><p>从代码来看，Activity类确实是基于Context，Service类也是基于Context。Activity除了基于Context外，还实现了一些其他重要接口，从设计角度上来说，interface仅仅是某些功能，extends才是类的本质，所以Activity和Service的本质就是一个Context。</p><p>Android Context本身是一个抽象类. ContextImpl, Activity, Service, Application这些都是Context的直接或间接子类, 下面通过看看这些类的关系,如下:(图片来源：<a href="http://gityuan.com/2017/04/09/android_context/" target="_blank" rel="noopener">Gityuan</a>)</p><p><img src="/2020/09/03/Android-理解Context/context.jpg" alt=""></p><h3 id="一个应用程序包含多少个Context"><a href="#一个应用程序包含多少个Context" class="headerlink" title="一个应用程序包含多少个Context"></a>一个应用程序包含多少个Context</h3><p>在程序开发中，经常会调用Context的一些方法，这些方法会返回一个全局对象，而不是某个Activity，那一个程序到底有多少个Context对象？比如，Context.getResource()返回该应用程序的Resource对象，无论从哪个Activity中获取，都会返回同一个Resource对象。</p><p>这里可以明确：</p><ul><li>一个Activity就是一个场景(Context)，一个Service也是一个场景，所以，一个程序有多少个Activity和Service，就有多少个Context对象 。</li><li>getResource()等方法确实返回的是同一个全局对象。</li></ul><h3 id="创建Context"><a href="#创建Context" class="headerlink" title="创建Context"></a>创建Context</h3><p>要理解Context, 需要依次来看看四大组件的初始化过程.</p><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><p><code>frameworks/base/core/java/android/app/ActivityThread.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">     ActivityInfo aInfo = r.activityInfo;</span><br><span class="line">     <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">         r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">                 Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//component初始化过程</span></span><br><span class="line">     ComponentName component = r.intent.getComponent();</span><br><span class="line">     <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</span><br><span class="line">         component = r.intent.resolveActivity(</span><br><span class="line">             mInitialApplication.getPackageManager());</span><br><span class="line">         r.intent.setComponent(component);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">         component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</span><br><span class="line">                 r.activityInfo.targetActivity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Activity activity = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</span><br><span class="line">         <span class="comment">//step 2: 创建Activity对象</span></span><br><span class="line">         activity = mInstrumentation.newActivity(</span><br><span class="line">                 cl, component.getClassName(), r.intent);</span><br><span class="line">         StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">         r.intent.setExtrasClassLoader(cl);</span><br><span class="line">         r.intent.prepareToEnterProcess();</span><br><span class="line">         <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">             r.state.setClassLoader(cl);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                 <span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">                 + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//step 3: 创建Application对象</span></span><br><span class="line">         Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</span><br><span class="line">         <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">                 TAG, r + <span class="string">": app="</span> + app</span><br><span class="line">                 + <span class="string">", appName="</span> + app.getPackageName()</span><br><span class="line">                 + <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</span><br><span class="line">                 + <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</span><br><span class="line">                 + <span class="string">", dir="</span> + r.packageInfo.getAppDir());</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//step 4: 创建ContextImpl对象</span></span><br><span class="line">             Context appContext = createBaseContextForActivity(r, activity);</span><br><span class="line">             CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">             Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</span><br><span class="line">             <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 config.updateFrom(r.overrideConfig);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></span><br><span class="line">                     + r.activityInfo.name + <span class="string">" with config "</span> + config);</span><br><span class="line">             Window window = <span class="keyword">null</span>;</span><br><span class="line">             <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                 window = r.mPendingRemoveWindow;</span><br><span class="line">                 r.mPendingRemoveWindow = <span class="keyword">null</span>;</span><br><span class="line">                 r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//step5: 将Application/ContextImpl都attach到Activity对象 [下文详解]</span></span><br><span class="line">             activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                     r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                     r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                     r.referrer, r.voiceInteractor, window);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 activity.mIntent = customIntent;</span><br><span class="line">             &#125;</span><br><span class="line">             r.lastNonConfigurationInstances = <span class="keyword">null</span>;</span><br><span class="line">             activity.mStartedActivity = <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</span><br><span class="line">             <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</span><br><span class="line">                 activity.setTheme(theme);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                 <span class="comment">//step 6: 执行回调onCreate</span></span><br><span class="line">                 mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                     <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                     <span class="string">" did not call through to super.onCreate()"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             r.activity = activity;</span><br><span class="line">             r.stopped = <span class="keyword">true</span>;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 <span class="comment">//执行回调onStart</span></span><br><span class="line">                 activity.performStart();</span><br><span class="line">                 r.stopped = <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="comment">//执行回调onRestoreInstanceState</span></span><br><span class="line">                         mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">                                 r.persistentState);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                 activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">                 <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnPostCreate(activity, r.state,</span><br><span class="line">                             r.persistentState);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     mInstrumentation.callActivityOnPostCreate(activity, r.state);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                         <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                         <span class="string">" did not call through to super.onPostCreate()"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         r.paused = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">         mActivities.put(r.token, r);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                 <span class="string">"Unable to start activity "</span> + component</span><br><span class="line">                 + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> activity;</span><br></pre></td></tr></table></figure><p>startActivity的过程最终会在目标进程执行performLaunchActivity()方法, 该方法主要功能:</p><ol><li>创建对象LoadedApk;</li><li>创建对象Activity;</li><li>创建对象Application;</li><li>创建对象ContextImpl;</li><li>Application/ContextImpl都attach到Activity对象;</li><li>执行onCreate()等回调;</li></ol><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step 1: 创建LoadedApk</span></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line">        Service service = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">             <span class="comment">//step 2: 创建Service对象</span></span><br><span class="line">            service = (Service) cl.loadClass(data.info.name).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//step 3: 创建ContextImpl对象</span></span><br><span class="line">            ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</span><br><span class="line">            context.setOuterContext(service);</span><br><span class="line">          </span><br><span class="line">            <span class="comment">//step 4: 创建Application对象</span></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            <span class="comment">//step 5: 将Application/ContextImpl都attach到Activity对象</span></span><br><span class="line">            service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</span><br><span class="line">                    ActivityManagerNative.getDefault());</span><br><span class="line">            <span class="comment">//step 6: 执行onCreate回调</span></span><br><span class="line">            service.onCreate();</span><br><span class="line">            mServices.put(data.token, service);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManagerNative.getDefault().serviceDoneExecuting(</span><br><span class="line">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程:</p><ol><li>创建对象LoadedApk;</li><li>创建对象Service;</li><li>创建对象ContextImpl;</li><li>创建对象Application;</li><li>Application/ContextImpl分别attach到Service对象;</li><li>执行onCreate()回调;</li></ol><h4 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleReceiver</span><span class="params">(ReceiverData data)</span> </span>&#123;</span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        String component = data.intent.getComponent().getClassName();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line"></span><br><span class="line">        IActivityManager mgr = ActivityManagerNative.getDefault();</span><br><span class="line"></span><br><span class="line">        BroadcastReceiver receiver;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">            data.intent.setExtrasClassLoader(cl);</span><br><span class="line">            data.intent.prepareToEnterProcess();</span><br><span class="line">            data.setExtrasClassLoader(cl);</span><br><span class="line">            <span class="comment">//step 2: 创建BroadcastReceiver对象</span></span><br><span class="line">            receiver = (BroadcastReceiver)cl.loadClass(component).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.i(TAG,</span><br><span class="line">                    <span class="string">"Finishing failed broadcast to "</span> + data.intent.getComponent());</span><br><span class="line">            data.sendFinished(mgr);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Unable to instantiate receiver "</span> + component</span><br><span class="line">                + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//step 3: 创建Application对象</span></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            <span class="comment">//step 4: 创建ContextImpl对象</span></span><br><span class="line">            ContextImpl context = (ContextImpl)app.getBaseContext();</span><br><span class="line">            sCurrentBroadcastIntent.set(data.intent);</span><br><span class="line">            receiver.setPendingResult(data);</span><br><span class="line">            <span class="comment">//step 5: 执行onReceive回调</span></span><br><span class="line">            receiver.onReceive(context.getReceiverRestrictedContext(),</span><br><span class="line">                    data.intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sCurrentBroadcastIntent.set(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (receiver.getPendingResult() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            data.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程:</p><ol><li>创建对象LoadedApk;</li><li>创建对象BroadcastReceiver;</li><li>创建对象Application;</li><li>创建对象ContextImpl;</li><li>执行onReceive()回调;</li></ol><p>说明:</p><ul><li>以上过程是静态广播接收者, 即通过AndroidManifest.xml的标签来申明的BroadcastReceiver;</li><li>如果是动态广播接收者,则不需要再创建那么多对象, 因为动态广播的注册时进程已创建, 基本对象已创建完成. 那么只需要回调BroadcastReceiver的onReceive()方法即可.</li></ul><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IActivityManager.<span class="function">ContentProviderHolder <span class="title">installProvider</span><span class="params">(Context context, IActivityManager.ContentProviderHolder holder, ProviderInfo info, <span class="keyword">boolean</span> noisy, <span class="keyword">boolean</span> noReleaseNeeded, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    ContentProvider localProvider = <span class="keyword">null</span>;</span><br><span class="line">    IContentProvider provider;</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span> || holder.provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context c = <span class="keyword">null</span>;</span><br><span class="line">        ApplicationInfo ai = info.applicationInfo;</span><br><span class="line">        <span class="keyword">if</span> (context.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = context;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInitialApplication != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                mInitialApplication.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = mInitialApplication;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//step 1 &amp;&amp; 2: 创建LoadedApk和ContextImpl对象</span></span><br><span class="line">            c = context.createPackageContext(ai.packageName,Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> java.lang.ClassLoader cl = c.getClassLoader();</span><br><span class="line">        <span class="comment">//step 3: 创建ContentProvider对象</span></span><br><span class="line">        localProvider = (ContentProvider)cl.loadClass(info.name).newInstance();</span><br><span class="line">        provider = localProvider.getIContentProvider();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step 4: ContextImpl都attach到ContentProvider对象 [见小节4.4]</span></span><br><span class="line">        <span class="comment">//step 5: 并执行回调onCreate</span></span><br><span class="line">        localProvider.attachInfo(c, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> retHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ol><li>创建对象LoadedApk;</li><li>创建对象ContextImpl;</li><li>创建对象ContentProvider;</li><li>ContextImpl都attach到ContentProvider对象;</li><li>执行onCreate回调;</li></ol><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//step 1: 创建LoadedApk对象</span></span><br><span class="line">    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//step 2: 创建ContextImpl对象;</span></span><br><span class="line">    <span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 3: 创建Instrumentation</span></span><br><span class="line">    mInstrumentation = <span class="keyword">new</span> Instrumentation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 4: 创建Application对象; </span></span><br><span class="line">    Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</span><br><span class="line">    mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 5: 安装providers</span></span><br><span class="line">    List&lt;ProviderInfo&gt; providers = data.providers;</span><br><span class="line">    installContentProviders(app, providers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 6: 执行Application.Create回调</span></span><br><span class="line">    mInstrumentation.callApplicationOnCreate(app);</span><br></pre></td></tr></table></figure><p>该过程主要功能:</p><ol><li>创建对象LoadedApk</li><li>创建对象ContextImpl;</li><li>创建对象Instrumentation;</li><li>创建对象Application;</li><li>安装providers;</li><li>执行Create回调;</li></ol><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><h4 id="LoadedApk"><a href="#LoadedApk" class="headerlink" title="LoadedApk"></a>LoadedApk</h4><p><code>frameworks/base/core/java/android/app/LoadedApk.java</code></p><ul><li>是ActivityThread中进行四大组件等启动过程中的重要中间变量</li><li><strong>LoadedApk对象是APK文件在内存中的表示</strong>。 Apk文件的相关信息，诸如Apk文件的代码和资源，甚至代码里面的Activity，Service等组件的信息我们都可以通过此对象获取。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadedApk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LoadedApk"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityThread mActivityThread;</span><br><span class="line">    <span class="keyword">final</span> String mPackageName;</span><br><span class="line">    <span class="keyword">private</span> ApplicationInfo mApplicationInfo;</span><br><span class="line">    <span class="keyword">private</span> String mAppDir;</span><br><span class="line">    <span class="keyword">private</span> String mResDir;</span><br><span class="line">    <span class="keyword">private</span> String[] mSplitAppDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mSplitResDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mOverlayDirs;</span><br><span class="line">    <span class="keyword">private</span> String[] mSharedLibraries;</span><br><span class="line">    <span class="keyword">private</span> String mDataDir;</span><br><span class="line">    <span class="keyword">private</span> String mLibDir;</span><br><span class="line">    <span class="keyword">private</span> File mDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> File mDeviceProtectedDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> File mCredentialProtectedDataDirFile;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader mBaseClassLoader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mSecurityViolation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mIncludeCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mRegisterPackage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DisplayAdjustments mDisplayAdjustments = <span class="keyword">new</span> DisplayAdjustments();</span><br><span class="line">    <span class="comment">/** WARNING: This may change. Don't hold external references to it. */</span></span><br><span class="line">    Resources mResources;</span><br><span class="line">    <span class="keyword">private</span> ClassLoader mClassLoader;</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, ReceiverDispatcher&gt;&gt; mReceivers</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt; mUnregisteredReceivers</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mServices</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mUnboundServices</span><br><span class="line">        = <span class="keyword">new</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mClientCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create information about a new .apk</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">NOTE:</span> This constructor is called with ActivityThread's lock held,</span></span><br><span class="line"><span class="comment">     * so MUST NOT call back out to the activity manager.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadedApk</span><span class="params">(ActivityThread activityThread, ApplicationInfo aInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">            CompatibilityInfo compatInfo, ClassLoader baseLoader,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> securityViolation, <span class="keyword">boolean</span> includeCode, <span class="keyword">boolean</span> registerPackage)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mActivityThread = activityThread;</span><br><span class="line">        setApplicationInfo(aInfo);</span><br><span class="line">        mPackageName = aInfo.packageName;</span><br><span class="line">        mBaseClassLoader = baseLoader;</span><br><span class="line">        mSecurityViolation = securityViolation;</span><br><span class="line">        mIncludeCode = includeCode;</span><br><span class="line">        mRegisterPackage = registerPackage;</span><br><span class="line">        mDisplayAdjustments.setCompatibilityInfo(compatInfo);</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重要的成员变量<ul><li>ActivityThread mActivityThread</li><li>ApplicationInfo mApplicationInfo;</li><li>String mPackageName;</li><li>ClassLoader mBaseClassLoader;</li><li>以及各种资源路径地址</li></ul></li><li>重要方法<ul><li>生成Application<ul><li>Application makeApplication(boolean forceDefaultAppClass, Instrumentation instrumentation)</li></ul></li><li>生成Resource<ul><li>getResources(ActivityThread mainThread)</li><li>实质上，最后是委托ResourceManager去生成的</li></ul></li></ul></li></ul><h4 id="创建Application"><a href="#创建Application" class="headerlink" title="创建Application"></a>创建Application</h4><p><strong><code>LoadedApk.makeApplication</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Application <span class="title">makeApplication</span><span class="params">(<span class="keyword">boolean</span> forceDefaultAppClass, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保证一个LoadedApk对象只创建一个对应的Application对象</span></span><br><span class="line">    <span class="keyword">if</span> (mApplication != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String appClass = mApplicationInfo.className;</span><br><span class="line">    <span class="keyword">if</span> (forceDefaultAppClass || (appClass == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        appClass = <span class="string">"android.app.Application"</span>; <span class="comment">//设置应用类名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    java.lang.ClassLoader cl = getClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (!mPackageName.equals(<span class="string">"android"</span>)) &#123;</span><br><span class="line">        initializeJavaContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建ContextImpl对象</span></span><br><span class="line">    ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//创建Application对象, 并将appContext attach到新创建的Application</span></span><br><span class="line">    Application app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);</span><br><span class="line">    appContext.setOuterContext(app);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    mActivityThread.mAllApplications.add(app);</span><br><span class="line">    mApplication = app; <span class="comment">//将刚创建的app赋值给mApplication</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Application <span class="title">newApplication</span><span class="params">(Class&lt;?&gt; clazz, Context context)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Application app = (Application)clazz.newInstance(); <span class="comment">//创建Application</span></span><br><span class="line">    app.attach(context); <span class="comment">//执行attach操作</span></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建ContextImpl"><a href="#创建ContextImpl" class="headerlink" title="创建ContextImpl"></a>创建ContextImpl</h4><p>创建ContextImpl的方式有多种, 不同的组件初始化调用不同的方法,如下:</p><ul><li>Activity: 调用createBaseContextForActivity初始化;</li><li>Service/Application: 调用createAppContext初始化;</li><li>Provider: 调用createPackageContext初始化;</li><li>BroadcastReceiver: 直接从Application.getBaseContext()来获取ContextImpl对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextImpl</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ActivityThread mMainThread;</span><br><span class="line">    <span class="keyword">final</span> LoadedApk mPackageInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder mActivityToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mBasePackageName;</span><br><span class="line">    <span class="keyword">private</span> Context mOuterContext;</span><br><span class="line">    <span class="comment">//缓存Binder服务</span></span><br><span class="line">    <span class="keyword">final</span> Object[] mServiceCache = SystemServiceRegistry.createServiceCache();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContextImpl</span><span class="params">(ContextImpl container, ActivityThread mainThread, LoadedApk packageInfo, IBinder activityToken, UserHandle user, <span class="keyword">boolean</span> restricted, Display display, Configuration overrideConfiguration, <span class="keyword">int</span> createDisplayWithId)</span> </span>&#123;</span><br><span class="line">        mOuterContext = <span class="keyword">this</span>; <span class="comment">//ContextImpl对象</span></span><br><span class="line">        mMainThread = mainThread; <span class="comment">// ActivityThread赋值</span></span><br><span class="line">        mPackageInfo = packageInfo; <span class="comment">// LoadedApk赋值</span></span><br><span class="line">        mBasePackageName = packageInfo.mPackageName; <span class="comment">//mBasePackageName等于“android”</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context-attach"><a href="#Context-attach" class="headerlink" title="Context attach"></a>Context attach</h3><h4 id="Activity-1"><a href="#Activity-1" class="headerlink" title="Activity"></a>Activity</h4><p><code>frameworks/base/core/java/android/app/Activity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread, Instrumentation instr, IBinder token, <span class="keyword">int</span> ident, Application application, Intent intent, ActivityInfo info, CharSequence title, Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances, Configuration config, String referrer, IVoiceInteractor voiceInteractor)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//调用父类方法设置mBase.</span></span><br><span class="line">    mUiThread = Thread.currentThread();</span><br><span class="line">    mMainThread = aThread;</span><br><span class="line">    mApplication = application;</span><br><span class="line">    mIntent = intent;</span><br><span class="line">    mComponent = intent.getComponent();</span><br><span class="line">    mActivityInfo = info;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将新创建的ContextImpl赋值到父类ContextWrapper.mBase变量。mApplication赋值。</p><p><code>frameworks/base/core/java/android/view/ContextThemeWrapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context newBase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(newBase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frameworks/base/core/java/android/content/ContextWrapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextWrapper</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    Context mBase;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextWrapper</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        mBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the base context for this ContextWrapper.  All calls will then be</span></span><br><span class="line"><span class="comment">     * delegated to the base context.  Throws</span></span><br><span class="line"><span class="comment">     * IllegalStateException if a base context has already been set.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> base The new base context for this wrapper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBase != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base context already set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the base context as set by the constructor or setBaseContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getBaseContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">( Context context, ActivityThread thread, String className, IBinder token, Application application, Object activityManager)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//调用父类方法设置mBase.</span></span><br><span class="line">    mClassName = className;</span><br><span class="line">    mToken = token;</span><br><span class="line">    mApplication = application;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将新创建的ContextImpl赋值到父类ContextWrapper.mBase变量.</p><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Context <span class="title">getReceiverRestrictedContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mReceiverRestrictedContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mReceiverRestrictedContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mReceiverRestrictedContext = <span class="keyword">new</span> ReceiverRestrictedContext(getOuterContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于广播来说Context的传递过程, 跟其他组件完全不同. 广播是在onCreate过程通过参数将ReceiverRestrictedContext传递过去的. 此处getOuterContext()返回的是ContextImpl对象.</p><h4 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    attachInfo(context, info, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info, <span class="keyword">boolean</span> testing)</span> </span>&#123;</span><br><span class="line">    mNoPerms = testing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//将新创建ContextImpl对象保存到ContentProvider对象的成员变量mContext</span></span><br><span class="line">        mContext = context;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setReadPermission(info.readPermission);</span><br><span class="line">            setWritePermission(info.writePermission);</span><br><span class="line">            setPathPermissions(info.pathPermissions);</span><br><span class="line">            mExported = info.exported;</span><br><span class="line">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class="number">0</span>;</span><br><span class="line">            setAuthorities(info.authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行onCreate回调;</span></span><br><span class="line">        ContentProvider.<span class="keyword">this</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ul><li>将新创建ContextImpl对象保存到ContentProvider对象的成员变量mContext;<ul><li>可通过getContext()获取该ContextImpl;</li></ul></li><li>执行onCreate回调;</li></ul><h4 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context); <span class="comment">//Application的mBase</span></span><br><span class="line">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要功能:</p><ol><li>将新创建的ContextImpl对象保存到Application的父类成员变量mBase;</li><li>将当前所在的LoadedApk对象保存到Application的父员变量mLoadedApk;</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>每个Apk都对应唯一的application对象和LoadedApk对象, 当Apk中任意组件的创建过程中, 当其所对应的的LoadedApk和Application没有初始化则会创建, 且只会创建一次.</p><h3 id="Context-attach过程"><a href="#Context-attach过程" class="headerlink" title="Context attach过程"></a>Context attach过程</h3><ol><li>Application:<ul><li>调用attachBaseContext()将新创建ContextImpl赋值到父类ContextWrapper.mBase变量;</li><li>可通过getBaseContext()获取该ContextImpl;</li></ul></li><li>Activity/Service:<ul><li>调用attachBaseContext() 将新创建ContextImpl赋值到父类ContextWrapper.mBase变量;</li><li>可通过getBaseContext()获取该ContextImpl;</li><li>可通过getApplication()获取其所在的Application对象;</li></ul></li><li>ContentProvider:<ul><li>调用attachInfo()将新创建ContextImpl保存到ContentProvider.mContext变量;</li><li>可通过getContext()获取该ContextImpl;</li></ul></li><li>BroadcastReceiver:<ul><li>在onCreate过程通过参数将ReceiverRestrictedContext传递过去的.</li></ul></li><li>ContextImpl:<ul><li>可通过getApplicationContext()获取Application;</li></ul></li></ol><h4 id="Context使用场景"><a href="#Context使用场景" class="headerlink" title="Context使用场景"></a>Context使用场景</h4><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">startActivity</th><th style="text-align:left">startService</th><th style="text-align:left">bindService</th><th style="text-align:left">sendBroadcast</th><th style="text-align:left">registerReceiver</th><th style="text-align:left">getContentResolver</th></tr></thead><tbody><tr><td style="text-align:left">Activity</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Service</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Receiver</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">×</td><td style="text-align:left">√</td><td style="text-align:left">-</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Provider</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">Application</td><td style="text-align:left">-</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr></tbody></table><p>说明: (图中第一列代表不同的Context, √代表允许在该Context执行相应的操作; ×代表不允许; -代表分情况讨论)</p><ol><li>当Context为Receiver的情况下:<ul><li>不允许执行bindService()操作, 由于限制性上下文(ReceiverRestrictedContext)所决定的,会直接抛出异常.</li><li>registerReceiver是否允许取决于receiver;<ul><li>当receiver == null用于获取sticky广播, 允许使用;</li><li>否则不允许使用registerReceiver;</li></ul></li></ul></li><li>纵向来看startActivity操作<ul><li>当为Activity Context则可直接使用;</li><li>当为其他Context, 则必须带上FLAG_ACTIVITY_NEW_TASK flags才能使用;</li><li>另外UI相关要Activity中使用.</li></ul></li><li>除了以上情况, 其他的操作都是被允许执行.</li></ol><h4 id="getApplicationContext"><a href="#getApplicationContext" class="headerlink" title="getApplicationContext"></a>getApplicationContext</h4><p>绝大多数情况下, <code>getApplication()</code>和<code>getApplicationContext()</code>这两个方法完全一致, 返回值也相同; 那么两者到底有什么区别呢? 真正理解这个问题的人非常少. 接下来彻底地回答下这个问题:</p><p>getApplicationContext()这个的存在是Android历史原因. 我们都知道getApplication()只存在于Activity和Service对象; 那么对于BroadcastReceiver和ContentProvider却无法获取Application, 这时就需要一个能在Context上下文直接使用的方法, 那便是getApplicationContext().</p><p>两者对比:</p><ol><li>对于Activity/Service来说, getApplication()和getApplicationContext()的返回值完全相同; 除非厂商修改过接口;</li><li>BroadcastReceiver在onReceive的过程, 能使用getBaseContext().getApplicationContext获取所在Application, 而无法使用getApplication;</li><li>ContentProvider能使用getContext().getApplicationContext()获取所在Application. 绝大多数情况下没有问题, 但是有可能会出现空指针的问题, 情况如下:</li></ol><p>当同一个进程有多个apk的情况下, 对于第二个apk是由provider方式拉起的, 前面介绍过provider创建过程并不会初始化所在application, 此时执行 getContext().getApplicationContext()返回的结果便是NULL. 所以对于这种情况要做好判空.</p><p>本博客为学习笔记，主要摘抄自 Gityuan <a href="http://gityuan.com/2017/04/09/android_context/" target="_blank" rel="noopener">理解Android Context</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接触过Android的小伙伴, 一定不会对Context感到陌生, 有大量的场景使用都离不开Context, 下面列举部分常见场景:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动Activity (startActivity)&lt;/li&gt;
&lt;li&gt;启动服务 (startService)&lt;/
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Context" scheme="http://yoursite.com/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg将H264封装为MP4文件</title>
    <link href="http://yoursite.com/2020/08/20/FFmpeg%E5%B0%86H264%E5%B0%81%E8%A3%85%E4%B8%BAMP4%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/08/20/FFmpeg将H264封装为MP4文件/</id>
    <published>2020-08-20T09:10:41.000Z</published>
    <updated>2020-08-20T09:10:41.332Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FFmpeg编码yuv转H264</title>
    <link href="http://yoursite.com/2020/08/18/FFmpeg%E7%BC%96%E7%A0%81yuv%E8%BD%ACH264/"/>
    <id>http://yoursite.com/2020/08/18/FFmpeg编码yuv转H264/</id>
    <published>2020-08-18T07:10:57.000Z</published>
    <updated>2020-08-20T08:58:56.370Z</updated>
    
    <content type="html"><![CDATA[<p>紧接上一章内容，将视频文件添加一个红色方框后文件转成了YUV数据，这一节就再处理下YUV数据，编码成H.264文件。整体流程也比较简单，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    AVFormatContext *pFormatCtx;</span><br><span class="line">    AVOutputFormat *fmt;</span><br><span class="line">    AVStream *video_st;</span><br><span class="line">    AVCodecContext *pCodecCtx;</span><br><span class="line">    AVCodec *pCodec;</span><br><span class="line">    AVPacket pkt;</span><br><span class="line">    <span class="keyword">uint8_t</span> *picture_buf;</span><br><span class="line">    AVFrame *pFrame;</span><br><span class="line">    <span class="keyword">int</span> picture_size;</span><br><span class="line">    <span class="keyword">int</span> y_size;</span><br><span class="line">    <span class="keyword">int</span> framecnt = <span class="number">0</span>;</span><br><span class="line">    FILE *in_file = fopen(<span class="string">"/Users/liuwei/Desktop/new_test.yuv"</span>, <span class="string">"rb"</span>);   <span class="comment">//Input raw YUV data</span></span><br><span class="line">    <span class="keyword">int</span> in_w = <span class="number">568</span>, in_h = <span class="number">320</span>;        <span class="comment">//new_test.yuv的宽高</span></span><br><span class="line">    <span class="keyword">int</span> framenum = <span class="number">259</span>;       <span class="comment">//Frames to encode,这个值是我将原本的视频文件test.mp4解码为YUV文件时得到的数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *out_file = <span class="string">"/Users/liuwei/Desktop/new_test.h264"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Method1.</span></span><br><span class="line">    pFormatCtx = avformat_alloc_context();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Guess Format根据输出文件后缀获取已注册输出格式列表中的输出格式，如果没有匹配的，则返回NULL。</span></span><br><span class="line">    fmt = av_guess_format(<span class="literal">NULL</span>, out_file, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (fmt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pFormatCtx-&gt;oformat = fmt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开输出文件</span></span><br><span class="line">    <span class="keyword">if</span> (avio_open(&amp;pFormatCtx-&gt;pb, out_file, AVIO_FLAG_READ_WRITE) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to open output file! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流</span></span><br><span class="line">    video_st = avformat_new_stream(pFormatCtx, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (video_st == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据视频编解码器获取对应的编码器</span></span><br><span class="line">    pCodec = avcodec_find_encoder(fmt-&gt;video_codec);</span><br><span class="line">    <span class="keyword">if</span> (!pCodec) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Can not find encoder! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    pCodecCtx = avcodec_alloc_context3(pCodec);</span><br><span class="line">    <span class="keyword">if</span> (!pCodecCtx) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video codec context\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    pCodecCtx-&gt;codec_id = fmt-&gt;video_codec;</span><br><span class="line">    pCodecCtx-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">    pCodecCtx-&gt;pix_fmt = AV_PIX_FMT_YUV420P;</span><br><span class="line">    pCodecCtx-&gt;width = in_w;</span><br><span class="line">    pCodecCtx-&gt;height = in_h;</span><br><span class="line">    pCodecCtx-&gt;bit_rate = <span class="number">400000</span>; <span class="comment">// 码率</span></span><br><span class="line">    pCodecCtx-&gt;gop_size = <span class="number">250</span>; <span class="comment">// 每250帧产生一个关键帧，new_test.yuv只有259帧，表示最后只有2个I帧</span></span><br><span class="line"></span><br><span class="line">    pCodecCtx-&gt;time_base.num = <span class="number">1</span>;</span><br><span class="line">    pCodecCtx-&gt;time_base.den = <span class="number">25</span>; <span class="comment">//时间基</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//H264</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;me_range = 16;</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;max_qdiff = 4;</span></span><br><span class="line">    <span class="comment">//pCodecCtx-&gt;qcompress = 0.6;</span></span><br><span class="line">    pCodecCtx-&gt;qmin = <span class="number">10</span>;</span><br><span class="line">    pCodecCtx-&gt;qmax = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional Param</span></span><br><span class="line">    pCodecCtx-&gt;max_b_frames = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set Option</span></span><br><span class="line">    AVDictionary *param = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//H.264</span></span><br><span class="line">    <span class="keyword">if</span> (pCodecCtx-&gt;codec_id == AV_CODEC_ID_H264) &#123;</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"preset"</span>, <span class="string">"slow"</span>, <span class="number">0</span>); <span class="comment">//压缩速度慢，保证视频质量</span></span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"tune"</span>, <span class="string">"zerolatency"</span>, <span class="number">0</span>);<span class="comment">//零延迟</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//H.265</span></span><br><span class="line">    <span class="keyword">if</span> (pCodecCtx-&gt;codec_id == AV_CODEC_ID_H265) &#123;</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"preset"</span>, <span class="string">"ultrafast"</span>, <span class="number">0</span>);</span><br><span class="line">        av_dict_set(&amp;param, <span class="string">"tune"</span>, <span class="string">"zero-latency"</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Show some Information</span></span><br><span class="line">    av_dump_format(pFormatCtx, <span class="number">0</span>, out_file, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, &amp;param) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to open encoder! \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pFrame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//返回使用给定参数存储图像所需的数据量的大小</span></span><br><span class="line">    picture_size = av_image_get_buffer_size(pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">4</span>);</span><br><span class="line">    picture_buf = (<span class="keyword">uint8_t</span> *) av_malloc(picture_size);</span><br><span class="line">    <span class="comment">//分配内存 </span></span><br><span class="line">    av_image_fill_arrays(pFrame-&gt;data, pFrame-&gt;linesize, picture_buf, pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width,</span><br><span class="line">                         pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Write File Header</span></span><br><span class="line">    avformat_write_header(pFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    av_new_packet(&amp;pkt, picture_size);</span><br><span class="line"></span><br><span class="line">    y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; framenum; i++) &#123;</span><br><span class="line">        <span class="comment">//从文件中读取YUV数据</span></span><br><span class="line">        <span class="keyword">if</span> (fread(picture_buf, <span class="number">1</span>, y_size * <span class="number">3</span> / <span class="number">2</span>, in_file) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to read raw data! \n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (feof(in_file)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pFrame-&gt;data[<span class="number">0</span>] = picture_buf;              <span class="comment">// Y</span></span><br><span class="line">        pFrame-&gt;data[<span class="number">1</span>] = picture_buf + y_size;      <span class="comment">// U</span></span><br><span class="line">        pFrame-&gt;data[<span class="number">2</span>] = picture_buf + y_size * <span class="number">5</span> / <span class="number">4</span>;  <span class="comment">// V</span></span><br><span class="line">        <span class="comment">//PTS</span></span><br><span class="line">        pFrame-&gt;pts = i * (video_st-&gt;time_base.den) / ((video_st-&gt;time_base.num) * <span class="number">25</span>);</span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        avcodec_send_frame(pCodecCtx, pFrame);</span><br><span class="line">        <span class="keyword">int</span> ret = avcodec_receive_packet(pCodecCtx, &amp;pkt);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Succeed to encode frame: %5d\tsize:%5d\n"</span>, framecnt, pkt.size);</span><br><span class="line">            framecnt++;</span><br><span class="line">            pkt.stream_index = video_st-&gt;index;</span><br><span class="line">            av_write_frame(pFormatCtx, &amp;pkt);</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(&amp;pkt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Write file trailer</span></span><br><span class="line">    av_write_trailer(pFormatCtx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Clean</span></span><br><span class="line">    avcodec_free_context(&amp;pCodecCtx);</span><br><span class="line">    av_free(pFrame);</span><br><span class="line">    av_free(picture_buf);</span><br><span class="line">    avio_close(pFormatCtx-&gt;pb);</span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line"></span><br><span class="line">    fclose(in_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩效果非常明显，84M的YUV视频压缩成H264后只有492KB。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;紧接上一章内容，将视频文件添加一个红色方框后文件转成了YUV数据，这一节就再处理下YUV数据，编码成H.264文件。整体流程也比较简单，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="FFmpeg" scheme="http://yoursite.com/categories/FFmpeg/"/>
    
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>Android7.1 Launcher3去除抽屉</title>
    <link href="http://yoursite.com/2020/08/07/Android7-1-Launcher3%E5%8E%BB%E9%99%A4%E6%8A%BD%E5%B1%89/"/>
    <id>http://yoursite.com/2020/08/07/Android7-1-Launcher3去除抽屉/</id>
    <published>2020-08-07T06:48:54.000Z</published>
    <updated>2020-08-10T07:17:30.604Z</updated>
    
    <content type="html"><![CDATA[<p>最近接了个工作，去除公司设备上Launcher的抽屉，所有应用单层展示。网上也查找了一番，最终摸索着基本完成了工作，在此记录下去除抽屉的所有操作。</p><h3 id="去掉searchBox-bar"><a href="#去掉searchBox-bar" class="headerlink" title="去掉searchBox bar"></a>去掉searchBox bar</h3><ol><li><p><code>packages/apps/Launcher3/res/layout/qsb_default_view.xml</code></p><p>屏蔽掉FrameLayout中的布局</p></li><li><p><code>packages/apps/Launcher3/src/com/android/launcher3/QsbContainerView.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">getDefaultView</span><span class="params">(LayoutInflater inflater, ViewGroup parent, <span class="keyword">boolean</span> showSetup)</span> </span>&#123;</span><br><span class="line">            View v = inflater.inflate(R.layout.qsb_default_view, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// if (showSetup) &#123;</span></span><br><span class="line">            <span class="comment">//     View setupButton = v.findViewById(R.id.btn_qsb_setup);</span></span><br><span class="line">            <span class="comment">//     setupButton.setVisibility(View.VISIBLE);</span></span><br><span class="line">            <span class="comment">//     setupButton.setOnClickListener(this);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// v.findViewById(R.id.btn_qsb_search).setOnClickListener(this);</span></span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// if (view.getId() == R.id.btn_qsb_search) &#123;</span></span><br><span class="line">            <span class="comment">//     getActivity().startSearch("", false, null, true);</span></span><br><span class="line">            <span class="comment">// &#125; else if (view.getId() == R.id.btn_qsb_setup) &#123;</span></span><br><span class="line">            <span class="comment">//     // Allocate a new widget id for QSB</span></span><br><span class="line">            <span class="comment">//     sSavedWidgetId = Launcher.getLauncher(getActivity())</span></span><br><span class="line">            <span class="comment">//             .getAppWidgetHost().allocateAppWidgetId();</span></span><br><span class="line">            <span class="comment">//     // Start intent for bind the widget</span></span><br><span class="line">            <span class="comment">//     Intent intent = new Intent(AppWidgetManager.ACTION_APPWIDGET_BIND);</span></span><br><span class="line">            <span class="comment">//     intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, sSavedWidgetId);</span></span><br><span class="line">            <span class="comment">//     intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, mWidgetInfo.provider);</span></span><br><span class="line">            <span class="comment">//     startActivityForResult(intent, REQUEST_BIND_QSB);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>packages/apps/Launcher3/src/com/android/launcher3/Workspace.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToCustomContentPage</span><span class="params">(View customContent, CustomContentCallbacks callbacks,</span></span></span><br><span class="line"><span class="function"><span class="params">            String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getPageIndexForScreenId(CUSTOM_CONTENT_SCREEN_ID) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Expected custom content screen to exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the custom content to the full screen custom page</span></span><br><span class="line">        CellLayout customScreen = getScreenWithId(CUSTOM_CONTENT_SCREEN_ID);</span><br><span class="line">        <span class="keyword">int</span> spanX = customScreen.getCountX();</span><br><span class="line">        <span class="keyword">int</span> spanY = customScreen.getCountY();</span><br><span class="line">        <span class="comment">// CellLayout.LayoutParams lp = new CellLayout.LayoutParams(0, 0, spanX, spanY);</span></span><br><span class="line">        <span class="comment">// lp.canReorder  = false;</span></span><br><span class="line">        <span class="comment">// lp.isFullscreen = true;</span></span><br><span class="line">        <span class="keyword">if</span> (customContent <span class="keyword">instanceof</span> Insettable) &#123;</span><br><span class="line">            ((Insettable)customContent).setInsets(mInsets);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify that the child is removed from any existing parent.</span></span><br><span class="line">        <span class="keyword">if</span> (customContent.getParent() <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">            ViewGroup parent = (ViewGroup) customContent.getParent();</span><br><span class="line">            parent.removeView(customContent);</span><br><span class="line">        &#125;</span><br><span class="line">        customScreen.removeAllViews();</span><br><span class="line">        customContent.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        customContent.setOnKeyListener(<span class="keyword">new</span> FullscreenKeyEventListener());</span><br><span class="line">        customContent.setOnFocusChangeListener(mLauncher.mFocusHandler</span><br><span class="line">                .getHideIndicatorOnFocusListener());</span><br><span class="line">        <span class="comment">// customScreen.addViewToCellLayout(customContent, 0, 0, lp, true);</span></span><br><span class="line">        mCustomContentDescription = description;</span><br><span class="line"></span><br><span class="line">        mCustomContentCallbacks = callbacks;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="去掉向上滑动的箭头"><a href="#去掉向上滑动的箭头" class="headerlink" title="去掉向上滑动的箭头"></a>去掉向上滑动的箭头</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onFinishInflate();</span><br><span class="line">       mAllAppsHandle = (ImageView) findViewById(R.id.all_apps_handle);</span><br><span class="line">       mAllAppsHandle.setImageDrawable(getCaretDrawable());</span><br><span class="line">       mAllAppsHandle.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());</span><br><span class="line">       mAllAppsHandle.setOnClickListener(mLauncher);</span><br><span class="line">       mAllAppsHandle.setOnLongClickListener(mLauncher);</span><br><span class="line">       mAllAppsHandle.setOnFocusChangeListener(mLauncher.mFocusHandler);</span><br><span class="line">       mAllAppsHandle.setVisibility(<span class="number">8</span>); <span class="comment">// View.GONE</span></span><br><span class="line">       mLauncher.setAllAppsButton(mAllAppsHandle);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="去掉第一屏firstPage"><a href="#去掉第一屏firstPage" class="headerlink" title="去掉第一屏firstPage"></a>去掉第一屏firstPage</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/Workspace.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAllWorkspaceScreens</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Disable all layout transitions before removing all pages to ensure that we don't get the</span></span><br><span class="line">       <span class="comment">// transition animations competing with us changing the scroll when we add pages or the</span></span><br><span class="line">       <span class="comment">// custom content screen</span></span><br><span class="line">       disableLayoutTransitions();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Since we increment the current page when we call addCustomContentPage via bindScreens</span></span><br><span class="line">       <span class="comment">// (and other places), we need to adjust the current page back when we clear the pages</span></span><br><span class="line">       <span class="keyword">if</span> (hasCustomContent()) &#123;</span><br><span class="line">           removeCustomContentPage();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Recycle the QSB widget</span></span><br><span class="line">       View qsb = findViewById(getEmbeddedQsbId());</span><br><span class="line">       <span class="keyword">if</span> (qsb != <span class="keyword">null</span>) &#123;</span><br><span class="line">           ((ViewGroup) qsb.getParent()).removeView(qsb);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Remove the pages and clear the screen models</span></span><br><span class="line">       removeAllViews();</span><br><span class="line">       mScreenOrder.clear();</span><br><span class="line">       mWorkspaceScreens.clear();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Ensure that the first page is always present</span></span><br><span class="line">       <span class="comment">// bindAndInitFirstWorkspaceScreen(qsb); // 删除第一屏</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// Re-enable the layout transitions</span></span><br><span class="line">       enableLayoutTransitions();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="去掉hotseat"><a href="#去掉hotseat" class="headerlink" title="去掉hotseat"></a>去掉hotseat</h3><p>1.<code>packages/apps/Launcher3/res/xml/default_workspace_5x6.xml</code></p><p>   <code>packages/apps/Launcher3/res/xml/default_workspace_5x5.xml</code></p><p>屏蔽Hotseat布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Hotseat --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;include launcher:workspace="@xml/dw_phone_hotseat" /&gt; --&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>packages/apps/Launcher3/src/com/android/launcher3/DeviceProfile.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Layout the page indicators</span></span><br><span class="line">        View pageIndicator = launcher.findViewById(R.id.page_indicator);</span><br><span class="line">        <span class="keyword">if</span> (pageIndicator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();</span><br><span class="line">            <span class="keyword">if</span> (isVerticalBarLayout()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInsets.left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    lp.leftMargin = mInsets.left + pageIndicatorLandGutterLeftNavBarPx -</span><br><span class="line">                            lp.width - pageIndicatorLandWorkspaceOffsetPx;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInsets.right &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    lp.leftMargin = pageIndicatorLandGutterRightNavBarPx - lp.width -</span><br><span class="line">                            pageIndicatorLandWorkspaceOffsetPx;</span><br><span class="line">                &#125;</span><br><span class="line">                lp.bottomMargin = workspacePadding.bottom;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Put the page indicators above the hotseat</span></span><br><span class="line">                lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;</span><br><span class="line">                lp.height = pageIndicatorHeightPx;</span><br><span class="line">                lp.bottomMargin = <span class="number">10</span>; <span class="comment">// 距离底部10dp，占掉Hotseat的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            pageIndicator.setLayoutParams(lp);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>packages/apps/Launcher3/src/com/android/launcher3/Workspace.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mDragController.addDragListener(<span class="keyword">new</span> AccessibileDragListenerAdapter(</span><br><span class="line">                   <span class="keyword">this</span>, CellLayout.WORKSPACE_ACCESSIBILITY_DRAG) &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enableAccessibleDrag</span><span class="params">(<span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">super</span>.enableAccessibleDrag(enable);</span><br><span class="line">                   <span class="comment">// setEnableForLayout(mLauncher.getHotseat().getLayout(),enable);</span></span><br><span class="line">             </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns a list of all the CellLayouts in the workspace.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">ArrayList&lt;CellLayout&gt; <span class="title">getWorkspaceAndHotseatCellLayouts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;CellLayout&gt; layouts = <span class="keyword">new</span> ArrayList&lt;CellLayout&gt;();</span><br><span class="line">       <span class="keyword">int</span> screenCount = getChildCount();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> screen = <span class="number">0</span>; screen &lt; screenCount; screen++) &#123;</span><br><span class="line">           layouts.add(((CellLayout) getChildAt(screen)));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (mLauncher.getHotseat() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// layouts.add(mLauncher.getHotseat().getLayout());</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> layouts;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mLauncher.getHotseat() != <span class="keyword">null</span> &amp;&amp; !isDragWidget(d)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isPointInSelfOverHotseat(d.x, d.y)) &#123;</span><br><span class="line">               <span class="comment">// layout = mLauncher.getHotseat().getLayout();</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadExtractedColorsAndColorItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span> do this in pre-N as well, once the extraction part is complete.</span></span><br><span class="line">       <span class="keyword">if</span> (Utilities.isNycOrAbove()) &#123;</span><br><span class="line">           mExtractedColors.load(<span class="keyword">this</span>);</span><br><span class="line">           <span class="comment">// mHotseat.updateColor(mExtractedColors, !mPaused);</span></span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="去掉向上滑动显示AllApps的动画效果"><a href="#去掉向上滑动显示AllApps的动画效果" class="headerlink" title="去掉向上滑动显示AllApps的动画效果"></a>去掉向上滑动显示AllApps的动画效果</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOverviewMode</span><span class="params">(<span class="keyword">boolean</span> animated)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//showOverviewMode(animated, false);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>packages/apps/Launcher3/src/com/android/launcher3/dragndrop/DragLayer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mDragController.onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">           mActiveController = mDragController;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &amp;&amp; mAllAppsController.onInterceptTouchEvent(ev)) &#123;</span></span><br><span class="line">       <span class="comment">//     mActiveController = mAllAppsController;</span></span><br><span class="line">       <span class="comment">//     return true;</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mPinchListener != <span class="keyword">null</span> &amp;&amp; mPinchListener.onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">           <span class="comment">// Stop listening for scrolling etc. (onTouchEvent() handles the rest of the pinch.)</span></span><br><span class="line">           mActiveController = mPinchListener;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>7.<code>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shows the apps view.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAppsView</span><span class="params">(<span class="keyword">boolean</span> animated, <span class="keyword">boolean</span> updatePredictedApps,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">boolean</span> focusSearchBar)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// markAppsViewShown();</span></span><br><span class="line">       <span class="comment">// if (updatePredictedApps) &#123;</span></span><br><span class="line">       <span class="comment">//     tryAndUpdatePredictedApps();</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="comment">// showAppsOrWidgets(State.APPS, animated, focusSearchBar);</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="当安装新应用时，安装的应用添加在第一层上"><a href="#当安装新应用时，安装的应用添加在第一层上" class="headerlink" title="当安装新应用时，安装的应用添加在第一层上"></a>当安装新应用时，安装的应用添加在第一层上</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> HashMap&lt;ComponentName, AppInfo&gt; addedOrUpdatedApps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (added != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">final</span> ArrayList&lt;ItemInfo&gt; addedInfos = <span class="keyword">new</span> ArrayList&lt;ItemInfo&gt;(added);</span><br><span class="line">               addAndBindAddedWorkspaceItems(context, addedInfos);</span><br><span class="line"></span><br><span class="line">               <span class="comment">// addAppsToAllApps(context, added);</span></span><br><span class="line">               <span class="keyword">for</span> (AppInfo ai : added) &#123;</span><br><span class="line">                   addedOrUpdatedApps.put(ai.componentName, ai);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="去掉长按时的删除选项"><a href="#去掉长按时的删除选项" class="headerlink" title="去掉长按时的删除选项"></a>去掉长按时的删除选项</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/DeleteDropTarget.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@return</span> true for items that should have a "Remove" action in accessibility. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">supportsAccessibleDrop</span><span class="params">(ItemInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// return (info instanceof ShortcutInfo)</span></span><br><span class="line">    <span class="comment">//         || (info instanceof LauncherAppWidgetInfo)</span></span><br><span class="line">    <span class="comment">//         || (info instanceof FolderInfo);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supportsDrop</span><span class="params">(DragSource source, ItemInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去掉桌面长按-、pinch捏动作"><a href="#去掉桌面长按-、pinch捏动作" class="headerlink" title="去掉桌面长按    、pinch捏动作"></a>去掉桌面长按    、pinch捏动作</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shows the overview button.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOverviewMode</span><span class="params">(<span class="keyword">boolean</span> animated)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// showOverviewMode(animated, false);</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>packages/apps/Launcher3/src/com/android/launcher3/PinchAnimationManager.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Animates to the specified progress. This should be called repeatedly throughout the pinch</span></span><br><span class="line"><span class="comment">    * gesture to run animations that interpolate throughout the gesture.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> interpolatedProgress The progress from 0 to 1, where 0 is overview and 1 is workspace.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimationProgress</span><span class="params">(<span class="keyword">float</span> interpolatedProgress)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">float</span> interpolatedScale = interpolatedProgress * (<span class="number">1f</span> - mOverviewScale) + mOverviewScale;</span><br><span class="line">       <span class="keyword">float</span> interpolatedTranslationY = (<span class="number">1f</span> - interpolatedProgress) * mOverviewTranslationY;</span><br><span class="line">       <span class="comment">// mWorkspace.setScaleX(interpolatedScale);</span></span><br><span class="line">       <span class="comment">// mWorkspace.setScaleY(interpolatedScale);</span></span><br><span class="line">       <span class="comment">// mWorkspace.setTranslationY(interpolatedTranslationY);</span></span><br><span class="line">       <span class="comment">// setOverviewPanelsAlpha(1f - interpolatedProgress, 0);</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animateThreshold</span><span class="params">(<span class="keyword">float</span> threshold, Workspace.State startState,</span></span></span><br><span class="line"><span class="function"><span class="params">          Workspace.State goingTowards)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// if (threshold == PinchThresholdManager.THRESHOLD_ONE) &#123;</span></span><br><span class="line">      <span class="comment">//     if (startState == OVERVIEW) &#123;</span></span><br><span class="line">      <span class="comment">//         animateOverviewPanelButtons(goingTowards == OVERVIEW);</span></span><br><span class="line">      <span class="comment">//     &#125; else if (startState == NORMAL) &#123;</span></span><br><span class="line">      <span class="comment">//         animateHotseatAndQsb(goingTowards == NORMAL);</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">// &#125; else </span></span><br><span class="line">      <span class="comment">// if (threshold == PinchThresholdManager.THRESHOLD_TWO) &#123;</span></span><br><span class="line">      <span class="comment">//     if (startState == OVERVIEW) &#123;</span></span><br><span class="line">      <span class="comment">//         animateHotseatAndQsb(goingTowards == NORMAL);</span></span><br><span class="line">      <span class="comment">//         animateScrim(goingTowards == OVERVIEW);</span></span><br><span class="line">      <span class="comment">//     &#125; else if (startState == NORMAL) &#123;</span></span><br><span class="line">      <span class="comment">//         animateOverviewPanelButtons(goingTowards == OVERVIEW);</span></span><br><span class="line">      <span class="comment">//         animateScrim(goingTowards == OVERVIEW);</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">// &#125; else if (threshold == PinchThresholdManager.THRESHOLD_THREE) &#123;</span></span><br><span class="line">      <span class="comment">//     // Passing threshold 3 ends the pinch and snaps to the new state.</span></span><br><span class="line">      <span class="comment">//     if (startState == OVERVIEW &amp;&amp; goingTowards == NORMAL) &#123;</span></span><br><span class="line">      <span class="comment">//         mLauncher.showWorkspace(true);</span></span><br><span class="line">      <span class="comment">//         mWorkspace.snapToPage(mWorkspace.getCurrentPage());</span></span><br><span class="line">      <span class="comment">//     &#125; else if (startState == NORMAL &amp;&amp; goingTowards == OVERVIEW) &#123;</span></span><br><span class="line">      <span class="comment">//         mLauncher.showOverviewMode(true);</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">// &#125; else &#123;</span></span><br><span class="line">          Log.e(TAG, <span class="string">"Received unknown threshold to animate: "</span> + threshold);</span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="修改无抽屉时的异常"><a href="#修改无抽屉时的异常" class="headerlink" title="修改无抽屉时的异常"></a>修改无抽屉时的异常</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/allapps/AllAppsTransitionController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mDiscoBounceAnimation.setTarget(<span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">if</span>(mAppsView != <span class="keyword">null</span>)&#123; <span class="comment">// 增加判断</span></span><br><span class="line">           mAppsView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">if</span> (mDiscoBounceAnimation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   mDiscoBounceAnimation.start();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><code>packages/apps/Launcher3/src/com/android/launcher3/dragndrop/DragController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PointF <span class="title">isFlingingToDelete</span><span class="params">(DragSource source)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">true</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="屏蔽生成文件夹"><a href="#屏蔽生成文件夹" class="headerlink" title="屏蔽生成文件夹"></a>屏蔽生成文件夹</h3><p><code>packages/apps/Launcher3/src/com/android/launcher3/Workspace.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">createUserFolderIfNecessary</span><span class="params">(View newView, <span class="keyword">long</span> container, CellLayout target,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] targetCell, <span class="keyword">float</span> distance, <span class="keyword">boolean</span> external, DragView dragView,</span></span></span><br><span class="line"><span class="function"><span class="params">        Runnable postAnimationRunnable)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(container == -<span class="number">100</span>)&#123; <span class="comment">//禁止形成文件夹</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近接了个工作，去除公司设备上Launcher的抽屉，所有应用单层展示。网上也查找了一番，最终摸索着基本完成了工作，在此记录下去除抽屉的所有操作。&lt;/p&gt;
&lt;h3 id=&quot;去掉searchBox-bar&quot;&gt;&lt;a href=&quot;#去掉searchBox-bar&quot; class=&quot;
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Launcher3" scheme="http://yoursite.com/tags/Launcher3/"/>
    
  </entry>
  
  <entry>
    <title>Android系统 添加自定义系统服务</title>
    <link href="http://yoursite.com/2020/08/07/Android-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/08/07/Android-添加自定义系统服务/</id>
    <published>2020-08-07T06:47:23.000Z</published>
    <updated>2020-08-11T06:34:57.516Z</updated>
    
    <content type="html"><![CDATA[<p>公司准备对设备的Android系统做定制开发，之前都没搞过系统开发，只是了解一些原理性的知识，所以现在就是边做边学习。</p><p>系统服务是Android中非常重要的一部分, 像ActivityManagerService（AMS）, PackageManagerSersvice（PMS）, WindowManagerService（WMS）, 这些系统服务都是Framework层的关键服务。本篇文章就了解一下基于Android源码添加一个系统服务的完整流程。</p><h3 id="编写AIDL文件"><a href="#编写AIDL文件" class="headerlink" title="编写AIDL文件"></a>编写AIDL文件</h3><p>文件位置<code>frameworks/base/core/java/com/myservice/</code></p><p><strong>IMyService.aidl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.myservice;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWhiteList</span><span class="params">(in List&lt;String&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AIDL只支持传输基本java类型数据, 要想传递自定义类, 类需要实现 Parcelable 接口, 另外, 如果传递基本类型数组, 需要指定 in out 关键字, 比如 <code>void test(in byte[] input, out byte[] output)</code> , 用 in 还是 out, 只需要记住:  数组如果作为参数, 通过调用端传给被调端, 则使用 in, 如果数组只是用来接受数据, 实际数据是由被调用端来填充的, 则使用 out。</p><p>文件写完后, 添加到编译的 Android.mk 中 LOCAL_SRC_FILES 后面:</p><p><code>frameworks/base/Android.mk</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">    core<span class="regexp">/java/</span>android<span class="regexp">/accessibilityservice/</span>IAccessibilityServiceConnection.aidl \</span><br><span class="line">core<span class="regexp">/java/</span>android<span class="regexp">/accessibilityservice/</span>IAccessibilityServiceClient.aidl \</span><br><span class="line">core<span class="regexp">/java/</span>android<span class="regexp">/accounts/</span>IAccountManager.aidl \</span><br><span class="line">    部分代码省略 ...</span><br><span class="line">    core<span class="regexp">/java/</span>com<span class="regexp">/myservice/</span>IMyService.aidl \</span><br><span class="line">    部分代码省略 ...</span><br></pre></td></tr></table></figure><h3 id="Manager类"><a href="#Manager类" class="headerlink" title="Manager类"></a>Manager类</h3><p>Android系统中的ManagerService都是不可以直接访问的，需要通过它们的客户端代理类执行操作，我们也为我们的Service写一个代理类。</p><p><code>frameworks/base/core/java/com/myservice/MyManager.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.myservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.myservice.IMyService;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMyService mService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyManager</span><span class="params">(Context context, IMyService sevice)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mService = sevice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.setState(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.setName(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWhiteList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.setWhiteList(list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写系统服务"><a href="#编写系统服务" class="headerlink" title="编写系统服务"></a>编写系统服务</h3><p><code>frameworks/base/services/core/java/com/android/server/myservice/MyService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.server.myservice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.os.ServiceManager;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.myservice.MyManager;</span><br><span class="line"><span class="keyword">import</span> android.myservice.IMyService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">IMyService</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MyService"</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        Log.d(TAG,<span class="string">"setState:"</span>+value);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Log.d(TAG,<span class="string">"setName:"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWhiteList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            Log.d(TAG,<span class="string">"setWhiteList:"</span>+list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册系统服务"><a href="#注册系统服务" class="headerlink" title="注册系统服务"></a>注册系统服务</h3><p>在Context中增加系统服务常量</p><p><code>frameworks/base/core/java/android/content/Context.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">    <span class="meta">@StringDef</span>(&#123;</span><br><span class="line">            POWER_SERVICE,</span><br><span class="line">            WINDOW_SERVICE,</span><br><span class="line">            LAYOUT_INFLATER_SERVICE,</span><br><span class="line">            ...</span><br><span class="line">            MY_SERVICE, <span class="comment">//add </span></span><br><span class="line">            ...</span><br><span class="line">         </span><br><span class="line">            HARDWARE_PROPERTIES_SERVICE,</span><br><span class="line">            <span class="comment">//@hide: SOUND_TRIGGER_SERVICE,</span></span><br><span class="line">            SHORTCUT_SERVICE,</span><br><span class="line">            <span class="comment">//@hide: CONTEXTHUB_SERVICE,</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> ServiceName &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use with &#123;<span class="doctag">@link</span> #getSystemService&#125; to retrieve a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.myservice.MyManager&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getSystemService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.myservice.MyManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MY_SERVICE = <span class="string">"myservice"</span>;</span><br></pre></td></tr></table></figure><p>所有系统服务都运行在名为 system_server 的进程中, 我们要把编写好的服务加进去, SystemServer中有很多服务, 我们把我们的系统服务加到最后面</p><p><code>frameworks/base/services/java/com/android/server/SystemServer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.android.server.myservice.MyService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     MyService myManagerService = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">try</span>&#123;  </span><br><span class="line">          myManagerService = <span class="keyword">new</span> MyService(context);</span><br><span class="line">  Log.i(<span class="string">"MyService"</span>, <span class="string">"In SystemServer, MyService add.."</span>);  </span><br><span class="line">  ServiceManager.addService(Context.MY_SERVICE, myManagerService);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">Log.i(<span class="string">"MyService"</span>, <span class="string">"In SystemServer, MyService add err.."</span>+e);  </span><br><span class="line">&#125; </span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个时候刷机重启，就会报下面的错误，没有权限</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E/<span class="string">SELinux:</span> <span class="string">avc:</span>  denied  &#123; add &#125; <span class="keyword">for</span> service=myservice pid=<span class="number">1743</span> uid=<span class="number">1000</span> scontext=<span class="string">u:</span><span class="string">r:</span><span class="string">system_server:</span>s0 tcontext=<span class="string">u:</span><span class="string">object_r:</span><span class="string">default_android_service:</span>s0 tclass=service_manager permissive=<span class="number">0</span></span><br><span class="line">E/<span class="string">ServiceManager:</span> add_service(<span class="string">'myservice'</span>,<span class="number">5</span>a) uid=<span class="number">1000</span> - PERMISSION DENIED</span><br></pre></td></tr></table></figure><p>添加SELinux权限</p><p><code>device/qcom/sepolicy/common/service.te</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">myservice_service,      </span>app_api_service, system_server_service, service_manager_type;</span><br></pre></td></tr></table></figure><p><code>device/qcom/sepolicy/common/service_contexts</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">enrichrcsservice</span>                               <span class="selector-tag">u</span><span class="selector-pseudo">:object_r</span><span class="selector-pseudo">:radio_service</span><span class="selector-pseudo">:s0</span></span><br><span class="line"><span class="selector-tag">myservice</span>                          <span class="selector-tag">u</span><span class="selector-pseudo">:object_r</span><span class="selector-pseudo">:myservice_service</span><span class="selector-pseudo">:s0</span></span><br></pre></td></tr></table></figure><p>权限也可以添加到 <code>system/sepolicy/service_contexts</code>和<code>system/sepolicy/service.te</code>中，效果相同，但只可以在一个地方添加，否则会报重复。</p><h3 id="注册Manager"><a href="#注册Manager" class="headerlink" title="注册Manager"></a>注册Manager</h3><p>系统服务运行好了, 接下来就是 App获取系统服务, 一般我们都用<br><code>context.getSystemService()</code>，需要先注册, 代码如下</p><p><code>frameworks/base/core/java/android/app/SystemServiceRegistry.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.myservice.MyManager;</span><br><span class="line"><span class="keyword">import</span> android.myservice.IMyService;</span><br><span class="line">...</span><br><span class="line">registerService(Context.CONTEXTHUB_SERVICE, ContextHubManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;ContextHubManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ContextHubManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ContextHubManager(ctx.getOuterContext(),</span><br><span class="line">                  ctx.mMainThread.getHandler().getLooper());</span><br><span class="line">            &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add MyManager</span></span><br><span class="line">registerService(Context.MY_SERVICE, MyManager.class,</span><br><span class="line"><span class="keyword">new</span> CachedServiceFetcher&lt;MyManager&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">IBinder b = ServiceManager.getService(Context.MY_SERVICE);</span><br><span class="line">IMyService service = IMyService.Stub.asInterface(b);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyManager(ctx, service);</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure><p>OK, 系统代码修改完成了!</p><p>编译系统（可以单独编译boot.img和system.img，权限控制在boot.img，代码修改在system.img）、刷机</p><p>系统启动后</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1970-01-13</span> <span class="number">04</span>:<span class="number">01:02.700</span> <span class="number">1550-1550</span>/system_process I/MyService: In SystemServer, MyService add..</span><br></pre></td></tr></table></figure><p>没有报错，表示启动成功！</p><h3 id="App调用"><a href="#App调用" class="headerlink" title="App调用"></a>App调用</h3><p>将系统编译出的class.jar导入到工程中，否则找不到对应的Service（请自行百度），然后使用context.getSystemService(“myservice”)获取MyManager对象，最终调用到MyService中的方法。</p><p>客户端App：</p><p><img src="/2020/08/07/Android-添加自定义系统服务/1.png" alt=""></p><p>Service：</p><p><img src="/2020/08/07/Android-添加自定义系统服务/2.png" alt=""></p><p>搞定！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司准备对设备的Android系统做定制开发，之前都没搞过系统开发，只是了解一些原理性的知识，所以现在就是边做边学习。&lt;/p&gt;
&lt;p&gt;系统服务是Android中非常重要的一部分, 像ActivityManagerService（AMS）, PackageManagerSer
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Android系统定制笔记</title>
    <link href="http://yoursite.com/2020/07/30/Android%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/07/30/Android系统定制笔记/</id>
    <published>2020-07-30T11:22:56.000Z</published>
    <updated>2020-08-11T06:02:41.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、fastboot刷机"><a href="#一、fastboot刷机" class="headerlink" title="一、fastboot刷机"></a>一、fastboot刷机</h2><p>首先安装adb和fastboot</p><p><code>sudo apt-get install android-tools-adb android-tools-fastboot</code></p><h3 id="进入Fastboot模式"><a href="#进入Fastboot模式" class="headerlink" title="进入Fastboot模式"></a>进入Fastboot模式</h3><p>首先，确保你的手机能够adb连接，然后通过adb执行如下指令进入Fastboot模式，命令如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo adb reboot-bootloader</span></span><br></pre></td></tr></table></figure><p>稍等片刻，手机会重启进入Fastboot模式，查看通过如下命令进行确认：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo fastboot devices</span></span><br></pre></td></tr></table></figure><h3 id="刷img文件"><a href="#刷img文件" class="headerlink" title="刷img文件"></a>刷img文件</h3><ol><li>刷boot.img指令</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fastboot flash <span class="keyword">boot</span> <span class="keyword">boot</span>.img</span><br></pre></td></tr></table></figure><ol start="2"><li>刷system.img指令</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fastboot flash<span class="built_in"> system </span>system.img</span><br></pre></td></tr></table></figure><ol start="3"><li>刷userdata.img指令</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">fastboot</span> <span class="selector-tag">flash</span> <span class="selector-tag">userdata</span> <span class="selector-tag">userdata</span><span class="selector-class">.img</span></span><br></pre></td></tr></table></figure><ol start="4"><li>重启手机即可</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo fastboot reboot</span></span><br></pre></td></tr></table></figure><h2 id="二、系统编译"><a href="#二、系统编译" class="headerlink" title="二、系统编译"></a>二、系统编译</h2><h3 id="编译系统-全编"><a href="#编译系统-全编" class="headerlink" title="编译系统-全编"></a>编译系统-全编</h3><h4 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1.安装软件"></a>1.安装软件</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git-core gnupg flex bison gperf build-essential zip curl zlib1g-<span class="built_in">dev</span> libc6-<span class="built_in">dev</span></span><br><span class="line">lib32ncurses5-<span class="built_in">dev</span> x11proto-core-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> lib32z-<span class="built_in">dev</span> libgl1-mesa-<span class="built_in">dev</span> g++-multilib mingw32</span><br><span class="line">tofrodos python-markdown libxml2-utils xsltproc</span><br></pre></td></tr></table></figure><h4 id="2-安装openJDK"><a href="#2-安装openJDK" class="headerlink" title="2.安装openJDK"></a>2.安装openJDK</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:openjdk-r/ppa </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>如果你已经安装openJDK7或其他，可以使用下面命令修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--config java</span></span><br></pre></td></tr></table></figure><h4 id="3-编译系统"><a href="#3-编译系统" class="headerlink" title="3.编译系统"></a>3.编译系统</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、source build/envsetup.sh</span><br><span class="line"><span class="number">2</span>、lunch</span><br><span class="line">  <span class="comment">//该命令会显示可编译的所有版本，请选择一种，输入对应数字即可</span></span><br><span class="line"><span class="number">3</span>、make –j8</span><br></pre></td></tr></table></figure><p>然后请等待编译结束，编译完成后在/out/target/product/msm8953_64/下找到对应的img文件</p><h3 id="编译系统-模块编译"><a href="#编译系统-模块编译" class="headerlink" title="编译系统-模块编译"></a>编译系统-模块编译</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> update-api <span class="comment">//更新API接口，代码有修改，git pull拉取代码后请先执行该命令</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span> systemimage -j8  <span class="comment">//单独编译system.img</span></span><br></pre></td></tr></table></figure><h4 id="单模块编译"><a href="#单模块编译" class="headerlink" title="单模块编译"></a>单模块编译</h4><h5 id="修改应用源码"><a href="#修改应用源码" class="headerlink" title="修改应用源码"></a>修改应用源码</h5><p>例如修改了设置Settings代码，可以单独编译Settings的源码，编译出Settings.apk验证</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd packages<span class="meta-keyword">/apps/</span>Settings/</span><br><span class="line"></span><br><span class="line">mm <span class="comment">// 单独编译Settings.apk</span></span><br></pre></td></tr></table></figure><p>编译完成后 </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb <span class="keyword">push</span> Settings.apk <span class="regexp">/system/</span>priv-app<span class="regexp">/Settings/</span></span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><h5 id="修改源码framework后编译"><a href="#修改源码framework后编译" class="headerlink" title="修改源码framework后编译"></a>修改源码framework后编译</h5><ol><li>framework/base/core/res/res下添加或修改资源文件后需要先编译资源，然后编译framework 才可正常引用。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd frameworks<span class="regexp">/base/</span>core<span class="regexp">/res/</span> </span><br><span class="line">mm</span><br></pre></td></tr></table></figure><ol start="2"><li>编译 framework.jar </li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">cd</span> frameworks/<span class="keyword">base/ </span></span><br><span class="line"><span class="symbol">mm</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果 frameworks/base/services 下有修改，则要编译frameworks/base/services/java/ 执行mm ，编译 services.jar</p></li><li><p>执行如下命令</p></li></ol><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb remount</span><br><span class="line">adb <span class="keyword">push</span> framework-res.apk /<span class="keyword">system</span>/framework/</span><br><span class="line">adb <span class="keyword">push</span> framework.jar /<span class="keyword">system</span>/framework/</span><br><span class="line">adb <span class="keyword">push</span> services.jar /<span class="keyword">system</span>/framework/ （如果有修改的话）</span><br></pre></td></tr></table></figure><ol start="5"><li>push后，可以cd system/framework 进入目录，以ll命令确认下是否push成功。</li><li>adb reboot 重启设备。</li></ol><h2 id="三、系统定制"><a href="#三、系统定制" class="headerlink" title="三、系统定制"></a>三、系统定制</h2><h3 id="1-Launcher过滤App"><a href="#1-Launcher过滤App" class="headerlink" title="1 Launcher过滤App"></a>1 Launcher过滤App</h3><p>LauncherMode.java 中有一个loadAllApps函数，Launcher在其中加载所有App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the ApplicationInfos</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apps.size(); i++) &#123;</span><br><span class="line">    LauncherActivityInfoCompat app = apps.get(i);</span><br><span class="line">    Log.e(TAG,<span class="string">"loadAllPackages ="</span>+app.getComponentName().getPackageName());</span><br><span class="line">    <span class="keyword">if</span>(app.getComponentName().getPackageName() == <span class="string">"com.android.settings"</span> || app.getComponentName().getPackageName().contains(<span class="string">"decard"</span>))&#123;</span><br><span class="line">        Log.e(TAG,<span class="string">"settings || decard"</span>);</span><br><span class="line">        <span class="comment">// This builds the icon bitmaps.</span></span><br><span class="line">        mBgAllAppsList.add(<span class="keyword">new</span> AppInfo(mContext, app, user, mIconCache, quietMode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-去除抽屉"><a href="#2-去除抽屉" class="headerlink" title="2 去除抽屉"></a>2 去除抽屉</h3><p><a href="https://david1840.github.io/2020/08/07/Android7-1-Launcher3%E5%8E%BB%E9%99%A4%E6%8A%BD%E5%B1%89/" target="_blank" rel="noopener">Android7.1 Launcher3去除抽屉</a></p><h3 id="3-添加自定义系统服务"><a href="#3-添加自定义系统服务" class="headerlink" title="3 添加自定义系统服务"></a>3 添加自定义系统服务</h3><p><a href="https://david1840.github.io/2020/08/07/Android-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener"> Android 添加自定义系统服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、fastboot刷机&quot;&gt;&lt;a href=&quot;#一、fastboot刷机&quot; class=&quot;headerlink&quot; title=&quot;一、fastboot刷机&quot;&gt;&lt;/a&gt;一、fastboot刷机&lt;/h2&gt;&lt;p&gt;首先安装adb和fastboot&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg Filter</title>
    <link href="http://yoursite.com/2020/07/14/FFmpeg%E6%BB%A4%E9%95%9CFilter/"/>
    <id>http://yoursite.com/2020/07/14/FFmpeg滤镜Filter/</id>
    <published>2020-07-14T02:09:37.000Z</published>
    <updated>2020-08-19T02:29:28.995Z</updated>
    
    <content type="html"><![CDATA[<p>Filter，以认为是一些预定义的范式，可以实现类似积木的多种功能的自由组合。每个filter都有固定数目的输入和输出，而且实际使用中不允许有空 悬的输入输出端。使用文本描述时我们可以通过标识符指定输入和输出端口，将不同filter串联起来，构成更复杂的filter。这就形成了嵌套的 filter。当然每个filter可以通过ffmpeg/ffplay命令行实现，但通常filter更方便。</p><h3 id="Filter能做什么？"><a href="#Filter能做什么？" class="headerlink" title="Filter能做什么？"></a>Filter能做什么？</h3><p>比较常见的有：</p><ul><li>音视频的倍速播放</li><li>视频添加删除Logo</li><li>视频画中画</li><li>放大缩小</li><li>画面裁剪</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersrc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> AVFormatContext *fmt_ctx;</span><br><span class="line"><span class="keyword">static</span> AVCodecContext *dec_ctx;</span><br><span class="line">AVFilterContext *buffersink_ctx;</span><br><span class="line">AVFilterContext *buffersrc_ctx;</span><br><span class="line">AVFilterGraph *filter_graph;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> video_stream_index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开输入文件</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">open_input_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    AVCodec *dec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = avformat_open_input(&amp;fmt_ctx, filename, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot open input file\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = avformat_find_stream_info(fmt_ctx, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot find stream information\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择视频流</span></span><br><span class="line">    ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, <span class="number">-1</span>, <span class="number">-1</span>, &amp;dec, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot find a video stream in the input file\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    video_stream_index = ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create decoding context */</span></span><br><span class="line">    dec_ctx = avcodec_alloc_context3(dec);</span><br><span class="line">    <span class="keyword">if</span> (!dec_ctx)</span><br><span class="line">        <span class="keyword">return</span> AVERROR(ENOMEM);</span><br><span class="line">    avcodec_parameters_to_context(dec_ctx, fmt_ctx-&gt;streams[video_stream_index]-&gt;codecpar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化解码器</span></span><br><span class="line">    <span class="keyword">if</span> ((ret = avcodec_open2(dec_ctx, dec, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot open video decoder\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化filter</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_filters</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filters_descr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> args[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//滤镜输入缓冲区，解码器解码后的数据都会放到buffer中，是一个特殊的filter</span></span><br><span class="line">    <span class="keyword">const</span> AVFilter *buffersrc  = avfilter_get_by_name(<span class="string">"buffer"</span>); </span><br><span class="line">    <span class="comment">//滤镜输出缓冲区，滤镜处理完后输出的数据都会放在buffersink中，是一个特殊的filter</span></span><br><span class="line">    <span class="keyword">const</span> AVFilter *buffersink = avfilter_get_by_name(<span class="string">"buffersink"</span>);</span><br><span class="line">    AVFilterInOut *outputs = avfilter_inout_alloc();</span><br><span class="line">    AVFilterInOut *inputs  = avfilter_inout_alloc();</span><br><span class="line">    AVRational time_base = fmt_ctx-&gt;streams[video_stream_index]-&gt;time_base;</span><br><span class="line">    <span class="keyword">enum</span> AVPixelFormat pix_fmts[] = &#123;AV_PIX_FMT_YUV420P, AV_PIX_FMT_GRAY8, AV_PIX_FMT_NONE&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建filter图，会包含本次使用到的所有过滤器</span></span><br><span class="line">    filter_graph = avfilter_graph_alloc();</span><br><span class="line">    <span class="keyword">if</span> (!outputs || !inputs || !filter_graph) &#123;</span><br><span class="line">        ret = AVERROR(ENOMEM);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* buffer video source: the decoded frames from the decoder will be inserted here. */</span></span><br><span class="line">    <span class="built_in">snprintf</span>(args, <span class="keyword">sizeof</span>(args),</span><br><span class="line">            <span class="string">"video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d"</span>,</span><br><span class="line">            dec_ctx-&gt;width, dec_ctx-&gt;height, dec_ctx-&gt;pix_fmt,</span><br><span class="line">            time_base.num, time_base.den,</span><br><span class="line">            dec_ctx-&gt;sample_aspect_ratio.num, dec_ctx-&gt;sample_aspect_ratio.den);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建过滤器实例并将其添加到现有graph中</span></span><br><span class="line">    ret = avfilter_graph_create_filter(&amp;buffersrc_ctx, buffersrc, <span class="string">"in"</span>,</span><br><span class="line">                                       args, <span class="literal">NULL</span>, filter_graph);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot create buffer source\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 缓冲视频接收器: 终止过滤器链 */</span></span><br><span class="line">    ret = avfilter_graph_create_filter(&amp;buffersink_ctx, buffersink, <span class="string">"out"</span>,</span><br><span class="line">                                       <span class="literal">NULL</span>, <span class="literal">NULL</span>, filter_graph);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot create buffer sink\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = av_opt_set_int_list(buffersink_ctx, <span class="string">"pix_fmts"</span>, pix_fmts,</span><br><span class="line">                              AV_PIX_FMT_NONE, AV_OPT_SEARCH_CHILDREN);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cannot set output pixel format\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Set the endpoints for the filter graph. The filter_graph will</span></span><br><span class="line"><span class="comment">     * be linked to the graph described by filters_descr.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The buffer source output must be connected to the input pad of</span></span><br><span class="line"><span class="comment">     * the first filter described by filters_descr; since the first</span></span><br><span class="line"><span class="comment">     * filter input label is not specified, it is set to "in" by</span></span><br><span class="line"><span class="comment">     * default.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    outputs-&gt;name       = av_strdup(<span class="string">"in"</span>);</span><br><span class="line">    outputs-&gt;filter_ctx = buffersrc_ctx;</span><br><span class="line">    outputs-&gt;pad_idx    = <span class="number">0</span>;</span><br><span class="line">    outputs-&gt;next       = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The buffer sink input must be connected to the output pad of</span></span><br><span class="line"><span class="comment">     * the last filter described by filters_descr; since the last</span></span><br><span class="line"><span class="comment">     * filter output label is not specified, it is set to "out" by</span></span><br><span class="line"><span class="comment">     * default.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inputs-&gt;name       = av_strdup(<span class="string">"out"</span>);</span><br><span class="line">    inputs-&gt;filter_ctx = buffersink_ctx;</span><br><span class="line">    inputs-&gt;pad_idx    = <span class="number">0</span>;</span><br><span class="line">    inputs-&gt;next       = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将由字符串描述的图形添加到图形中</span></span><br><span class="line">    <span class="keyword">if</span> ((ret = avfilter_graph_parse_ptr(filter_graph, filters_descr,</span><br><span class="line">                                    &amp;inputs, &amp;outputs, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = avfilter_graph_config(filter_graph, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">    avfilter_inout_free(&amp;inputs);</span><br><span class="line">    avfilter_inout_free(&amp;outputs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存YUV数据</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">save_frame</span><span class="params">(AVFrame *filt_frame, FILE *out)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">"do_frame %d\n"</span>,filt_frame-&gt;format);</span><br><span class="line">    <span class="keyword">if</span>(filt_frame-&gt;format==AV_PIX_FMT_YUV420P)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"save 1 frame\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;filt_frame-&gt;height;i++)&#123;</span><br><span class="line">            fwrite(filt_frame-&gt;data[<span class="number">0</span>]+filt_frame-&gt;linesize[<span class="number">0</span>]*i,<span class="number">1</span>,filt_frame-&gt;width,out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;filt_frame-&gt;height/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            fwrite(filt_frame-&gt;data[<span class="number">1</span>]+filt_frame-&gt;linesize[<span class="number">1</span>]*i,<span class="number">1</span>,filt_frame-&gt;width/<span class="number">2</span>,out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;filt_frame-&gt;height/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            fwrite(filt_frame-&gt;data[<span class="number">2</span>]+filt_frame-&gt;linesize[<span class="number">2</span>]*i,<span class="number">1</span>,filt_frame-&gt;width/<span class="number">2</span>,out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    AVPacket packet;</span><br><span class="line">    AVFrame *frame;</span><br><span class="line">    AVFrame *filt_frame;</span><br><span class="line">    FILE *out = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filter_desc=<span class="string">"movie=my_logo.png[wm];[in][wm]overlay=5:5[out]"</span>; <span class="comment">//左上角绘制一个logo图片</span></span><br><span class="line">    <span class="comment">//"drawbox=30:10:64:64:red";//x= 30,y=10,width=64,height=64,color=red,绘制一个红色正方形</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* filename = <span class="string">"/Users/liuwei/Desktop/test.mp4"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* outfile = <span class="string">"/Users/liuwei/Desktop/new_test.yuv"</span>;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_DEBUG);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    frame = av_frame_alloc();</span><br><span class="line">    filt_frame = av_frame_alloc();</span><br><span class="line">    <span class="keyword">if</span> (!frame || !filt_frame) &#123;</span><br><span class="line">        perror(<span class="string">"Could not allocate frame"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out = fopen(outfile, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!out)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Failed to open yuv file!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = open_input_file(filename)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    <span class="keyword">if</span> ((ret = init_filters(filter_desc)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* read all packets */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 1 </span></span><br><span class="line">        <span class="keyword">if</span> ((ret = av_read_frame(fmt_ctx, &amp;packet)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (packet.stream_index == video_stream_index) &#123;</span><br><span class="line">            <span class="comment">//2</span></span><br><span class="line">            ret = avcodec_send_packet(dec_ctx, &amp;packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Error while sending a packet to the decoder\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//3</span></span><br><span class="line">                ret = avcodec_receive_frame(dec_ctx, frame);</span><br><span class="line">                <span class="keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Error while receiving a frame from the decoder\n"</span>);</span><br><span class="line">                    <span class="keyword">goto</span> end;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                frame-&gt;pts = frame-&gt;best_effort_timestamp;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*4 push the decoded frame into the filtergraph */</span></span><br><span class="line">                <span class="keyword">if</span> (av_buffersrc_add_frame_flags(buffersrc_ctx, frame, AV_BUFFERSRC_FLAG_KEEP_REF) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Error while feeding the filtergraph\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* pull filtered frames from the filtergraph */</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//5</span></span><br><span class="line">                    ret = av_buffersink_get_frame(buffersink_ctx, filt_frame);</span><br><span class="line">                    <span class="keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">goto</span> end;</span><br><span class="line">                    save_frame(filt_frame,out);</span><br><span class="line">                    av_frame_unref(filt_frame);</span><br><span class="line">                &#125;</span><br><span class="line">                av_frame_unref(frame);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(&amp;packet);</span><br><span class="line">    &#125;</span><br><span class="line">end:</span><br><span class="line">    avfilter_graph_free(&amp;filter_graph);</span><br><span class="line">    avcodec_free_context(&amp;dec_ctx);</span><br><span class="line">    avformat_close_input(&amp;fmt_ctx);</span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_frame_free(&amp;filt_frame);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != AVERROR_EOF) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error occurred: %s\n"</span>, av_err2str(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中关键函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">avfilter_graph_alloc</span><span class="params">()</span></span>：为FilterGraph分配内存。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">avfilter_graph_create_filter</span><span class="params">()</span></span>：创建并向FilterGraph中添加一个Filter。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">avfilter_graph_parse_ptr</span><span class="params">()</span></span>：将一串通过字符串描述的Graph添加到FilterGraph中。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">avfilter_graph_config</span><span class="params">()</span></span>：检查FilterGraph的配置。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">av_buffersrc_add_frame</span><span class="params">()</span></span>：向FilterGraph中加入一个AVFrame。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">av_buffersink_get_frame</span><span class="params">()</span></span>：从FilterGraph中取出一个AVFrame。</span><br></pre></td></tr></table></figure><p><code>*filter_desc=&quot;movie=my_logo.png[wm];[in][wm]overlay=5:5[out]&quot;;</code></p><p>代码会将一个MP4文件在左上角添加一个图片后输出为yuv文件，这个图片如果背景是透明的就是水印啦（主要是懒得做透明背景图片）。</p><p><img src="/2020/07/14/FFmpeg滤镜Filter/1.png" alt=""></p><p><code>&quot;drawbox=30:10:64:64:red&quot;;</code>x= 30,y=10,width=64,height=64,color=red, 绘制一个红色正方形<br><img src="/2020/07/14/FFmpeg滤镜Filter/2.png" alt=""></p><p><code>&quot;scale=iw*2:ih*2&quot;</code>视频缩放，iw 表示输入视频的宽，ih表示输入视频的高。*2 表示放大两倍,如果是/2表示缩小两倍</p><p><code>&quot;crop=320:240:0:0&quot;</code>视频裁剪，crop=width:height : x : y，其中 width 和 height 表示裁剪后的尺寸，x:y 表示裁剪区域的左上角坐标</p><p>还有很多filter可以使用，并且可以实现自定义filter，这些后面会慢慢了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Filter，以认为是一些预定义的范式，可以实现类似积木的多种功能的自由组合。每个filter都有固定数目的输入和输出，而且实际使用中不允许有空 悬的输入输出端。使用文本描述时我们可以通过标识符指定输入和输出端口，将不同filter串联起来，构成更复杂的filter。这就形
      
    
    </summary>
    
      <category term="FFmpeg" scheme="http://yoursite.com/categories/FFmpeg/"/>
    
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio导入Android系统源码</title>
    <link href="http://yoursite.com/2020/06/09/%E4%BD%BF%E7%94%A8Android-Studio%E5%AF%BC%E5%85%A5Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/06/09/使用Android-Studio导入Android系统源码/</id>
    <published>2020-06-09T01:29:00.000Z</published>
    <updated>2020-06-09T02:47:16.503Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我们默认大家已经下载好了Android系统的源代码，关于如何下载，网上有很多详尽的教程，我这里就不再过多的赘述，不会的同学可以自行百度。</p><blockquote><p>使用Android Studio导入系统源代码需要对代码进行一定的编译操作，如果有些同学使用的是Windows系统，可以尝试在Cygwin下进行编译，或者将在Linux下编译生成的三个产物拷贝到Windows的源代码根目录下，也可以起到一样的效果。</p></blockquote><p>这里需要执行以下四条命令：</p><ol><li><p>“source build/envsetup.sh” (source可以用 . 代替，即”. build/envsetup.sh”)</p></li><li><p>“lunch”，并选择要编译的项目。</p></li><li><p>“make idegen -j4” (这里的 -j4 表示用4线程来编译，可以不加)</p></li><li><p>“sudo development/tools/idegen/idegen.sh”</p></li></ol><p>下面进行分步讲解：</p><ol><li><p>进入系统源码的根目录(即可以看到frameworks、kernel等等文件夹的那一级目录)，执行”. build/envsetup.sh”命令</p><p><img src="/2020/06/09/使用Android-Studio导入Android系统源码/1.png" alt=""></p></li><li><p>继续执行”lunch”命令，并选择你想要编译的那个项目.我的系统是FireFly Rk3399开发版提供的系统，可编译的比较多。</p><p><img src="/2020/06/09/使用Android-Studio导入Android系统源码/2.png" alt=""></p><p>选择9，编译rk3399_firefly-userdebug</p><p><img src="/2020/06/09/使用Android-Studio导入Android系统源码/3.png" alt=""></p></li><li><p>前面两步是对编译环境进行配置，接下来执行”make idegen -j4”</p><p><img src="/2020/06/09/使用Android-Studio导入Android系统源码/4.png" alt=""></p></li><li><p>看到以上输出以后，执行”sudo<br>development/tools/idegen/idegen.sh”，并继续等待，这个过程可能比较长，不要着急</p></li></ol><p><img src="/2020/06/09/使用Android-Studio导入Android系统源码/5.png" alt=""></p><p>完成以上四个步骤之后，会发现在源码根目录下出现了三个新的文件(也有可能是两个)</p><ol><li><p>android.iml (记录项目所包含的module、依赖关系、SDK版本等等，类似一个XML文件)</p></li><li><p>android.ipr (工程的具体配置，代码以及依赖的lib等信息，类似于Visual Studio的sln文件)</p></li><li><p>android.iws (主要包含一些个人的配置信息，也有可能在执行上述操作后没有生成，这个没关系，在打开过一次项目之后就会自动生成了)</p><p>“android.iml”和”android.ipr”一般是”只读”的属性，我们这里建议大家，把这两个文件改成可读可写，否则，在更改一些项目配置的时候可能会出现无法保存的情况，执行如下两条命令即可。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">chmod</span> 777 <span class="selector-tag">android</span><span class="selector-class">.iml</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">chmod</span> 777 <span class="selector-tag">android</span><span class="selector-class">.ipr</span></span><br></pre></td></tr></table></figure><p>如果你的电脑性能足够好(内存大于16G，代码下载在SSD上)，那么可以直接打开Android Studio，点击”Open an existing Android Studio project”选项，找到并选中刚刚生成的”android.ipr”文件，点击OK，就可以开始导入项目了。 第一次导入，这个过程可能会持续很久，几十分钟或者超过一个小时。不过成功之后，以后再打开项目就会快很多了。</p><p>​        如果电脑性能一般的话，我建议，可以在导入项目前，手动对”android.iml”文件进行一下修改，可以使我们导入的时间尽可能的缩短一些。</p><p>​        首先，要保证”android.iml”文件已经添加了”可写入”的属性(上文中已经介绍了如何修改文件属性)。</p><p>​        接下来，使用文本编辑器打开”android.iml”文件，并执行以下修改(仅代表我的个人习惯，也可以根据同学们的喜好自己调整)：</p><ol><li>搜索关键字”orderEntry”，我一般会将所有带有这个关键字的标签项全部删除，仅保留以下三行，大概如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   ......</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">"sourceFolder"</span> <span class="attr">forTests</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">"inheritedJdk"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">orderEntryProperties</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>搜索”excludeFolder“关键字，对这里进行一些修改，将我们不需要看的代码Exclude掉。通过这个步骤，能极大地提升第一次加载项目的速度。</li></ol><p>​        等项目加载完成后，我们还可以通过Android Studio对Exclude的Module进行调整，所以也不用害怕这里Exclude掉了有用的代码，或少Exclude了一部分代码，在项目加载完以后再进行调整就行了。</p><p>​        以下是我的配置，大家可以参考(由于我比较关注Framework以及Telephony相关的代码，所以重点保留了这两部分，而其他一些如kernel、bootloader的代码，我就Exclude掉了，同学们也可以根据自己的需求来进行修改)。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/.repo"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/art"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/bionic"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/bootable"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/build"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/compatibility"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/dalvik"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/developers"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/developers/samples"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/development"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/device/google"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/device/sample"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/docs"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/external"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/flashing-files"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/frameworks/base/docs"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/kernel"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/libcore"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/libnativehelper"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/out"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/pdk"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/platform_testing"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/prebuilt"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/prebuilts"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/shortcut-fe"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/test"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/toolchain"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;excludeFolder <span class="attribute">url</span>=<span class="string">"file://<span class="variable">$MODULE_DIR</span>$/tools"</span> /&gt;</span><br></pre></td></tr></table></figure><p>​        完成之后，按照上面说的步骤，使用Android Studio选中”android.ipr”打开项目即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里我们默认大家已经下载好了Android系统的源代码，关于如何下载，网上有很多详尽的教程，我这里就不再过多的赘述，不会的同学可以自行百度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用Android Studio导入系统源代码需要对代码进行一定的编译操作，如果有些同学使
      
    
    </summary>
    
      <category term="Android系统" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-Builder模式</title>
    <link href="http://yoursite.com/2020/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/03/04/设计模式-Builder模式/</id>
    <published>2020-03-04T09:13:39.000Z</published>
    <updated>2020-07-13T08:15:13.067Z</updated>
    
    <content type="html"><![CDATA[<p>建造者模式（Builder）将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>相同的方法，不同的执行顺序，产生不同的事件结果时。</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不同时。</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常合适。</li><li>当初始化一个对象特别负责，如参数多，且很多掺乎都有默认值时。</li></ol><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul><li>Product产品类 —— 产品的抽象类</li><li>Builder——抽象Builder类，规范产品的组建</li><li>ConcreteBuilder——具体的Builder类</li><li>Director——统一组装过程</li></ul><p><img src="/2020/03/04/设计模式-Builder模式/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建造者模式（Builder）将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-Jetpack组件CameraX</title>
    <link href="http://yoursite.com/2020/02/25/Android%E5%BC%80%E5%8F%91-Jetpack%E7%BB%84%E4%BB%B6CameraX/"/>
    <id>http://yoursite.com/2020/02/25/Android开发-Jetpack组件CameraX/</id>
    <published>2020-02-25T03:36:26.000Z</published>
    <updated>2020-06-09T11:24:28.003Z</updated>
    
    <content type="html"><![CDATA[<p>CameraX 是一个 Jetpack 支持库，旨在帮助您简化相机应用的开发工作。它提供一致且易于使用的 API 界面，适用于大多数 Android 设备，并可向后兼容至 Android 5.0（API 级别 21）。</p><p>虽然它利用的是 camera2 的功能，但使用的是更为简单且基于用例的方法，该方法具有生命周期感知能力。它还解决了设备兼容性问题，因此您无需在代码库中包含设备专属代码。这些功能减少了将相机功能添加到应用时需要编写的代码量。</p><p>目前处于 Alpha 版测试阶段，因为其 API 界面尚未最终确定。我们不建议在生产环境中使用 Alpha 库。CameraX 库应在生产环境中严格避免依赖 Alpha 库，因为其 API 界面可能会以与源代码和二进制文件不兼容的方式发生变化。</p><p>相比较于使用Camera2预览、拍照时大量的接口、回调，使用CameraX基本可以使用不超过100行代码实现相同功能。虽然目前仍是测试版本，但个人强烈建议先学习下，CameraX 真的超简单，超好用！！！后面正式版发布后就可以随时使用。</p><h2 id="CameraX使用"><a href="#CameraX使用" class="headerlink" title="CameraX使用"></a>CameraX使用</h2><h3 id="CameraX-结构"><a href="#CameraX-结构" class="headerlink" title="CameraX 结构"></a>CameraX 结构</h3><p>开发者使用 CameraX，借助名为“用例”的抽象概念与设备的相机进行交互。目前提供的用例如下：</p><ul><li>预览：准备一个预览 SurfaceTexture</li><li>图片拍摄：拍摄并保存照片</li><li>图片分析：提供 CPU 可访问的缓冲区以进行分析（例如进行机器学习）</li></ul><p>不同用例可以相互组合使用，也可以同时处于活动状态。例如，用户可以在应用中使用预览用例查看进入相机视野的画面、加入图片分析用例来确定照片里的人物是否在微笑，以及包含一个图片拍摄用例以便在人物微笑时拍摄照片。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def camerax_version = <span class="string">"1.0.0-beta04"</span></span><br><span class="line"> <span class="comment">// CameraX core library using camera2 implementation</span></span><br><span class="line"><span class="keyword">implementation</span> <span class="string">"androidx.camera:camera-camera2:$camerax_version"</span></span><br><span class="line"> <span class="comment">// CameraX Lifecycle Library</span></span><br><span class="line"><span class="keyword">implementation</span> <span class="string">"androidx.camera:camera-lifecycle:$camerax_version"</span></span><br><span class="line"> <span class="comment">// CameraX View class</span></span><br><span class="line"><span class="keyword">implementation</span> <span class="string">"androidx.camera:camera-view:1.0.0-alpha11"</span></span><br></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.camera.view.PreviewView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewFinder"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用androidx.camera.view.PreviewView类。它是CameraX中显示预览用例的自定义视图。该类管理Surface生命周期，以及预览纵横比和方向。在它内部使用TextureView或SurfaceView来显示。</p><h3 id="实现预览"><a href="#实现预览" class="headerlink" title="实现预览"></a>实现预览</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startCamera</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> cameraProviderFuture = ProcessCameraProvider.getInstance(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">        cameraProviderFuture.addListener(Runnable &#123;</span><br><span class="line">            <span class="comment">// Used to bind the lifecycle of cameras to the lifecycle owner</span></span><br><span class="line">            <span class="keyword">val</span> cameraProvider: ProcessCameraProvider = cameraProviderFuture.<span class="keyword">get</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Preview</span></span><br><span class="line">            preview = Preview.Builder()</span><br><span class="line">                    .build()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Select back camera</span></span><br><span class="line">            <span class="keyword">val</span> cameraSelector = CameraSelector.Builder().requireLensFacing(CameraSelector.LENS_FACING_BACK).build()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Unbind use cases before rebinding</span></span><br><span class="line">                cameraProvider.unbindAll()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bind use cases to camera</span></span><br><span class="line">                camera = cameraProvider.bindToLifecycle(</span><br><span class="line">                        <span class="keyword">this</span>, cameraSelector, preview)</span><br><span class="line">                preview?.setSurfaceProvider(viewFinder.createSurfaceProvider())</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exc: Exception) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Use case binding failed"</span>, exc)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, ContextCompat.getMainExecutor(<span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就这样就可以实现Camera的预览功能，是不是很简单，想起之前写Camera2的痛苦，眼泪都快流下来了。</p><h3 id="拍照"><a href="#拍照" class="headerlink" title="拍照"></a>拍照</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在startCamera中增加</span></span><br><span class="line"><span class="comment">// ImageCapture</span></span><br><span class="line">imageCapture = ImageCapture.Builder()</span><br><span class="line">               .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)</span><br><span class="line">               .build()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">takePhoto</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Get a stable reference of the modifiable image capture use case</span></span><br><span class="line">    <span class="keyword">val</span> imageCapture = imageCapture ?: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create timestamped output file to hold the image</span></span><br><span class="line">    <span class="keyword">val</span> photoFile = File(</span><br><span class="line">            outputDirectory,</span><br><span class="line">            SimpleDateFormat(FILENAME_FORMAT, Locale.CHINA</span><br><span class="line">            ).format(System.currentTimeMillis()) + <span class="string">".jpg"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create output options object which contains file + metadata</span></span><br><span class="line">    <span class="keyword">val</span> outputOptions = ImageCapture.OutputFileOptions.Builder(photoFile).build()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup image capture listener which is triggered after photo has</span></span><br><span class="line">    <span class="comment">// been taken</span></span><br><span class="line">    imageCapture.takePicture(</span><br><span class="line">            outputOptions, ContextCompat.getMainExecutor(<span class="keyword">this</span>), <span class="keyword">object</span> : ImageCapture.OnImageSavedCallback &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(exc: <span class="type">ImageCaptureException</span>)</span></span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Photo capture failed: <span class="subst">$&#123;exc.message&#125;</span>"</span>, exc)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onImageSaved</span><span class="params">(output: <span class="type">ImageCapture</span>.<span class="type">OutputFileResults</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> savedUri = Uri.fromFile(photoFile)</span><br><span class="line">            <span class="keyword">val</span> msg = <span class="string">"Photo capture succeeded: <span class="variable">$savedUri</span>"</span></span><br><span class="line">            Toast.makeText(baseContext, msg, Toast.LENGTH_SHORT).show()</span><br><span class="line">            Log.d(TAG, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后绑定到Camera上</span></span><br><span class="line"><span class="comment">// Bind use cases to camera</span></span><br><span class="line">camera = cameraProvider.bindToLifecycle(</span><br><span class="line">          <span class="keyword">this</span>, cameraSelector, preview,imageCapture)</span><br></pre></td></tr></table></figure><p>完成了，这代码简洁程度简直爱了！</p><h3 id="图片分析"><a href="#图片分析" class="headerlink" title="图片分析"></a>图片分析</h3><p>写一个内部类，继承ImageAnalysis.Analyzer </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LuminosityAnalyzer</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> listener: LumaListener) : ImageAnalysis.Analyzer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> ByteBuffer.<span class="title">toByteArray</span><span class="params">()</span></span>: ByteArray &#123;</span><br><span class="line">        rewind()    <span class="comment">// Rewind the buffer to zero</span></span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = ByteArray(remaining())</span><br><span class="line">        <span class="keyword">get</span>(<span class="keyword">data</span>)   <span class="comment">// Copy the buffer into a byte array</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span> <span class="comment">// Return the byte array</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">analyze</span><span class="params">(image: <span class="type">ImageProxy</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//处理图片数据</span></span><br><span class="line">        <span class="keyword">val</span> buffer = image.planes[<span class="number">0</span>].buffer</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = buffer.toByteArray()</span><br><span class="line">        <span class="keyword">val</span> pixels = <span class="keyword">data</span>.map &#123; it.toInt() and <span class="number">0xFF</span> &#125;</span><br><span class="line">        <span class="keyword">val</span> luma = pixels.average()</span><br><span class="line">        listener(luma)</span><br><span class="line">        image.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">imageAnalyzer</span> = ImageAnalysis.<span class="keyword">Builder()</span></span><br><span class="line"><span class="keyword"> </span>       .<span class="keyword">build()</span></span><br><span class="line"><span class="keyword"> </span>       .also &#123;</span><br><span class="line">            <span class="keyword">it.setAnalyzer(cameraExecutor, </span>LuminosityAnalyzer &#123; luma -&gt;</span><br><span class="line">                Log.d(TAG, <span class="string">"Average luminosity: $luma"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>绑定设备</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bind use cases to camera</span></span><br><span class="line">camera = cameraProvider.bindToLifecycle(</span><br><span class="line">        <span class="keyword">this</span>, cameraSelector, preview, imageCapture, imageAnalyzer)</span><br></pre></td></tr></table></figure><p>仍然是这么简单！等CameraX正式版本发布，Camera2就扔到垃圾桶去吧。</p><p>记得申请权限啊！<code>Manifest.permission.CAMERA</code></p><p>可以翻墙的请看原文：<a href="https://codelabs.developers.google.com/codelabs/camerax-getting-started/#0" target="_blank" rel="noopener">Getting Started with CameraX</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CameraX 是一个 Jetpack 支持库，旨在帮助您简化相机应用的开发工作。它提供一致且易于使用的 API 界面，适用于大多数 Android 设备，并可向后兼容至 Android 5.0（API 级别 21）。&lt;/p&gt;
&lt;p&gt;虽然它利用的是 camera2 的功能，
      
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CameraX" scheme="http://yoursite.com/tags/CameraX/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式--LayoutInflater</title>
    <link href="http://yoursite.com/2020/02/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/23/设计模式-单例模式/</id>
    <published>2020-02-23T10:17:49.000Z</published>
    <updated>2020-03-04T08:08:16.397Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式应该是我们在开发过程中使用的最多，最频繁的设计模式了。今天就再来学习一下，然后学习Android中单例模式使用–LayoutInflater。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>所谓单例，就是整个程序有且仅有一个实例。该类负责创建自己的对象，同时确保只有一个对象被创建。在Java，一般常用在工具类的实现或创建对象需要消耗资源。在Android中，创建一个对象需要的资源过多，如访问IO和数据库等资源，就要考虑使用单例模式。</p><p>UML类图如图：</p><p><img src="/2020/02/23/设计模式-单例模式/pic-01.png" alt=""></p><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程不安全，延迟初始化，严格意义上不是不是单例模式</p><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</p><h3 id="双重锁模式"><a href="#双重锁模式" class="headerlink" title="双重锁模式"></a>双重锁模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全，延迟初始化。这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p><h3 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Inner.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，但具体还是根据项目选择。</p><h3 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="type">INSTANCE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认枚举实例的创建是线程安全的，并且在任何情况下都是单例。</p><p>那么枚举类型日常用例是这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton  &#123;</span><br><span class="line">    INSTANCE </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//doSomething 该实例支持的行为</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//可以省略此方法，通过Singleton.INSTANCE进行操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton get <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举单例模式在《Effective Java》中推荐的单例模式之一。但枚举实例在日常开发是很少使用的，就是很简单以导致可读性较差。</p><p>在以上所有的单例模式中，推荐静态内部类单例模式。主要是非常直观，即保证线程安全又保证唯一性。</p><h2 id="Android中的单例模式–LayoutInflater"><a href="#Android中的单例模式–LayoutInflater" class="headerlink" title="Android中的单例模式–LayoutInflater"></a>Android中的单例模式–LayoutInflater</h2><p>在Android系统中，我们经常会通过Context获取系统级别的服务，如WindowsManagerService等，更常用的是一个LayoutInflater类，这些服务会在合适的时候以单例的形式注册在系统中，在我们需要的时候就通过Context的getSystemService(String name)获取。我们以LayoutInflater为例来说明。</p><p>在Listview中LayoutInflater相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater inflater;</span><br><span class="line">inflater = (LayoutInflater) <span class="keyword">this</span>.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">ViewHolder viewHolder = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(convertView==<span class="keyword">null</span>)&#123;</span><br><span class="line">convertView = inflater.inflate(mResourceId, parent,<span class="keyword">false</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们使用Context类的getSystemService()获取到了LayoutInflater实例对象，我们追踪到Context类看到，该类是抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么getView中使用的Context对象的具体实现类是什么呢？其实在Application、Activity、Service中都会存在一个Context对象，即Context的总个数为Activity个数+Service个数+1。而ListView通常是显示在Activity中，那么我们就以Activity中的Context来分析。</p><p>我们知道，一个Activity的入口是ActivityThread中的main函数，在main函数中创建一个新的ActivityThread对象，并且启动消息循环（UI线程），创建新的Activity、新的Context对象，然后将该Context对象传递给Activity。下面看ActivityThread源代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   ...</span><br><span class="line">       </span><br><span class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</span><br><span class="line">    <span class="comment">//主线程消息循环</span></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line">    <span class="comment">//创建一个新的ActivityThread对象</span></span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">    thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    Looper.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</span><br><span class="line">    sCurrentActivityThread = <span class="keyword">this</span>;</span><br><span class="line">    mSystemThread = system;</span><br><span class="line">    <span class="comment">//不是系统应用的情况</span></span><br><span class="line">    <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">        ViewRootImpl.addFirstDrawHandler(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ensureJitEnabled();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        android.ddm.DdmHandleAppName.setAppName(<span class="string">"&lt;pre-initialized&gt;"</span>,</span><br><span class="line">                                                UserHandle.myUserId());</span><br><span class="line">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</span><br><span class="line">        <span class="comment">//通过AIDL，获取AMS的代理对象IActivityManager</span></span><br><span class="line">        <span class="keyword">final</span> IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//关联mAppThread，将AMS和我们的应用进程application进行连接</span></span><br><span class="line">            mgr.attachApplication(mAppThread);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在attach函数中，在非系统应用情况下，会通过Binder机制与AMS通信，最终调用handleLaunchActivity函数。</p><p>Activity的启动流程如下:</p><p><img src="/2020/02/23/设计模式-单例模式/start_activity_process.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">     ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">     Activity activity = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">            <span class="comment">//创建新Activity</span></span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);</span><br><span class="line">           </span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           </span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appContext.setOuterContext(activity);</span><br><span class="line">                activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.referrer, r.voiceInteractor, window, r.configCallback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ContextImpl <span class="title">createBaseContextForActivity</span><span class="params">(ActivityClientRecord r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Context对象，实现类为ContextImpl</span></span><br><span class="line">    ContextImpl appContext = ContextImpl.createActivityContext(</span><br><span class="line">            <span class="keyword">this</span>, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> appContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以分析得知，Context的实现类为ContextImpl，继续分析ContextImpl类。在ContextImpl中使用getSystemService获取对应的系统服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextImpl</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SystemServiceRegistry.getSystemService(<span class="keyword">this</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSystemServiceName</span><span class="params">(Class&lt;?&gt; serviceClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SystemServiceRegistry.getSystemServiceName(serviceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemServiceRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">     registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PhoneLayoutInflater(ctx.getOuterContext());</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String serviceName, Class&lt;T&gt; serviceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">            ServiceFetcher&lt;T&gt; serviceFetcher)</span> </span>&#123;</span><br><span class="line">        SYSTEM_SERVICE_NAMES.put(serviceClass, serviceName);</span><br><span class="line">        SYSTEM_SERVICE_FETCHERS.put(serviceName, serviceFetcher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在静态代码中注册了LAYOUT_INFLATER_SERVICE。在第一次调用时，createService会创建服务对象，然后将服务以键值对的形式存储在一个HashMap中，用户后面只需要通过Key值就能获取到对应的服务，从而达到单例的效果。</p><h2 id="深入理解LayoutInflater"><a href="#深入理解LayoutInflater" class="headerlink" title="深入理解LayoutInflater"></a>深入理解LayoutInflater</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutInflater</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LayoutInflater是一个抽象类，而在上面的代码中，我们看到注册LAYOUT_INFLATER_SERVICE服务时，创建的是一个PhoneLayoutInflater，所以它才是真正的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneLayoutInflater</span> <span class="keyword">extends</span> <span class="title">LayoutInflater</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内置View的前缀，如TextView的完整路径为android.widget.TextView</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</span><br><span class="line">        <span class="string">"android.widget."</span>,</span><br><span class="line">        <span class="string">"android.webkit."</span>,</span><br><span class="line">        <span class="string">"android.app."</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneLayoutInflater</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">PhoneLayoutInflater</span><span class="params">(LayoutInflater original, Context newContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(original, newContext);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> View <span class="title">onCreateView</span><span class="params">(String name, AttributeSet attrs)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String prefix : sClassPrefixList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                View view = createView(name, prefix, attrs);</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> view;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(name, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">cloneInContext</span><span class="params">(Context newContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneLayoutInflater(<span class="keyword">this</span>, newContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PhoneLayoutInflater中的代码核心就是onCreateView方法，该方法是在传递进来的View名称前加上sClassPrefixList中的前缀，用来得到该内置View类的完整路径，最后在根据该路径来构建对应的View对象。</p><p>那么LayoutInflater 到底是怎么实现解析 XML 里面的 View，这个还得从Activity的 setContentView(view) 说起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的 getWindow 返回的就是View的容器 PhoneWindow。mWinodw的创建是 Activity 的 attah方法中进行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></span><br><span class="line"><span class="function"><span class="params">        Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">        Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        CharSequence title, Activity parent, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">        NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class="line"><span class="function"><span class="params">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        Window window, ActivityConfigCallback activityConfigCallback)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">    mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line"></span><br><span class="line">    mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">    mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.setCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们再看PhoneWindow中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        installDecor();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还是调用 LaytouInflater 里面的方法了。</p><p>在看inflate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先把 XML 转换成 XML 资源</span></span><br><span class="line">    <span class="keyword">final</span> Resources res = getContext().getResources();</span><br><span class="line">    <span class="keyword">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// parser 代表 XML 解析器，root 代表父类布局 ，attachToRoot 代表是否添加到 root 视图 </span></span><br><span class="line">        <span class="keyword">return</span> inflate(parser, root, attachToRoot);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</span><br><span class="line">           <span class="keyword">final</span> Context inflaterContext = mContext;</span><br><span class="line">           <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">           Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">           mConstructorArgs[<span class="number">0</span>] = inflaterContext;</span><br><span class="line">           View result = root;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// Look for the root node.</span></span><br><span class="line">               <span class="keyword">int</span> type;</span><br><span class="line">               <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class="line">                       type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                   <span class="comment">// Empty</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//获取 xml 资源的第一个字符串</span></span><br><span class="line">               <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">               <span class="comment">//如果是merge的话，则直接解析root下面的视图树</span></span><br><span class="line">               <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></span><br><span class="line">                               + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   rInflate(parser, root, inflaterContext, attrs, <span class="keyword">false</span>);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">//根据 xml 的 tag 来解析 layout 的根视图。name 就是要 </span></span><br><span class="line">                   <span class="comment">//解析的视图的类名。如 LinearLayout。</span></span><br><span class="line">                   <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class="line"></span><br><span class="line">                   ViewGroup.LayoutParams params = <span class="keyword">null</span>;</span><br><span class="line">                       params = root.generateLayoutParams(attrs);</span><br><span class="line">                       <span class="keyword">if</span> (!attachToRoot) &#123;</span><br><span class="line">   </span><br><span class="line">                           temp.setLayoutParams(params);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                  rInflate(parser, temp, attrs, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">               </span><br><span class="line">                   <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class="line">                       root.addView(temp, params);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                       result = temp;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此方法做了以下事情：<br>1、根据 id，生成 XmlPullParser<br>2.如果是 merge ，则直接解析 merge 下的所有子View，这也说明了 为什么 merge 标签为什么会减少一层视图的原因，因为根本没有进入 else 的逻辑。<br>3.如果不是 merge，则进入 else，调用 createViewFromTag 来解析根视图，并赋值给temp<br>4.调用 rInflate ，解析 temp 下面的视图，并将这些视图添加到 temp 中。</p><p>首先看createViewFromTag：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, Context context, AttributeSet attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> ignoreThemeAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"view"</span>)) &#123;</span><br><span class="line">        name = attrs.getAttributeValue(<span class="keyword">null</span>, <span class="string">"class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        View view;<span class="comment">// 最后要返回的 View</span></span><br><span class="line">        <span class="keyword">if</span> (mFactory2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; mPrivateFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123; <span class="comment">// 如果 Factory 都没有设置过，最后在生成 View</span></span><br><span class="line">            <span class="keyword">final</span> Object lastContext = mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = context;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123; <span class="comment">// 系统控件 </span></span><br><span class="line">                    view = onCreateView(parent, name, attrs);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 非系统控件，自定义的 View </span></span><br><span class="line">                    view = createView(name, <span class="keyword">null</span>, attrs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 name 没有包含 ”.“ 的时候，我们认为他是内置布局组件。</p><p>比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>而自定义View则需要写完整的路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.test.TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>所以实际上onCreate只是像我们上面说的添加了前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">onCreateView</span><span class="params">(String name, AttributeSet attrs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createView(name, <span class="string">"android.view."</span>, attrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是调用createView方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">createView</span><span class="params">(String name, String prefix, AttributeSet attrs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClassNotFoundException, InflateException </span>&#123;</span><br><span class="line">    Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</span><br><span class="line">    Class&lt;? extends View&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Class not found in the cache, see if it's real, and try to add it</span></span><br><span class="line">            <span class="comment">//如果 prefix 不为空，则需要填写完整路径</span></span><br><span class="line">            clazz = mContext.getClassLoader().loadClass(</span><br><span class="line">                    prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (mFilter != <span class="keyword">null</span> &amp;&amp; clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> allowed = mFilter.onLoadClass(clazz);</span><br><span class="line">                <span class="keyword">if</span> (!allowed) &#123;</span><br><span class="line">                    failNotAllowed(name, prefix, attrs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取构造函数</span></span><br><span class="line">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//将构造函数存入缓存</span></span><br><span class="line">            sConstructorMap.put(name, constructor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        、、、</span><br><span class="line">         Object[] args = mConstructorArgs;</span><br><span class="line">        args[<span class="number">1</span>] = attrs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射构造View</span></span><br><span class="line">        <span class="keyword">final</span> View view = constructor.newInstance(args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>createView相对简单，如果有前缀，那么构造View的完整路径，并将该类加载到虚拟机中，然后获取该类的构造函数并缓存，再通过构造函数创建该View对象，最后将该对象返回。</p><p>而我们的窗口是一颗视图树，LayoutInflater需要解析完这棵树，就交给rInflate方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rInflate</span><span class="params">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">           AttributeSet attrs, <span class="keyword">boolean</span> finishInflate)</span> <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取树的深度，深度优先遍历</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> depth = parser.getDepth();</span><br><span class="line">       <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class="line">               parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class="line">               parseRequestFocus(parser, parent);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class="line">               parseViewTag(parser, parent, attrs);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (parser.getDepth() == <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;include /&gt; cannot be the root element"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               parseInclude(parser, context, parent, attrs);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; must be the root element"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class="line">               <span class="keyword">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class="line">               <span class="keyword">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class="line">               rInflateChildren(parser, view, attrs, <span class="keyword">true</span>);</span><br><span class="line">               viewGroup.addView(view, params);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (finishInflate) &#123;</span><br><span class="line">           parent.onFinishInflate();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>分为 3 步：<br>1.获取树的高度，深度优先遍历<br>2.while 循环，挨个元素进行解析<br>3.根据元素名进行解析，递归调用进行解析，将解析到的 View 添加到 ViewGroup 中。</p><p>当调用了Activity的onResume方法后，通过setContextView设置的内容就会出现在我们视野中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式应该是我们在开发过程中使用的最多，最频繁的设计模式了。今天就再来学习一下，然后学习Android中单例模式使用–LayoutInflater。&lt;/p&gt;
&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
